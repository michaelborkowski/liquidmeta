(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun cast_as_int () Int)
(declare-fun x$35$$35$1 () Int)
(declare-fun fib () Int)
(declare-fun x () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(push 1)
(assert (and (or (= x 15) (= x 15)) (or (= x$35$$35$1 15) (= x$35$$35$1 15))))
(push 1)
(assert (not (= (apply$35$$35$0 fib x$35$$35$1) 610)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (or (= x 15) (= x 15)) (and (or (= x$35$$35$1 15) (= x$35$$35$1 15)) (= (apply$35$$35$0 fib (- x$35$$35$1 6)) (+ (apply$35$$35$0 fib (- x$35$$35$1 8)) (apply$35$$35$0 fib (- x$35$$35$1 7)))) (= (apply$35$$35$0 fib (- x$35$$35$1 1)) (+ (apply$35$$35$0 fib (- x$35$$35$1 3)) (apply$35$$35$0 fib (- x$35$$35$1 2)))) (= (apply$35$$35$0 fib x$35$$35$1) (+ (apply$35$$35$0 fib (- x$35$$35$1 2)) (apply$35$$35$0 fib (- x$35$$35$1 1)))) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 9)) (apply$35$$35$0 fib (- x$35$$35$1 8))) 21) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 12)) (apply$35$$35$0 fib (- x$35$$35$1 11))) 5) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 10)) (apply$35$$35$0 fib (- x$35$$35$1 9))) 13) (= (apply$35$$35$0 fib (- x$35$$35$1 3)) (+ (apply$35$$35$0 fib (- x$35$$35$1 5)) (apply$35$$35$0 fib (- x$35$$35$1 4)))) (= (apply$35$$35$0 fib (- x$35$$35$1 10)) (+ (apply$35$$35$0 fib (- x$35$$35$1 12)) (apply$35$$35$0 fib (- x$35$$35$1 11)))) (= (apply$35$$35$0 fib x$35$$35$1) 610) (= (apply$35$$35$0 fib (- x$35$$35$1 5)) (+ (apply$35$$35$0 fib (- x$35$$35$1 7)) (apply$35$$35$0 fib (- x$35$$35$1 6)))) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 14)) (apply$35$$35$0 fib (- x$35$$35$1 13))) 2) (= (apply$35$$35$0 fib (- x$35$$35$1 14)) 1) (= (apply$35$$35$0 fib (- x$35$$35$1 4)) (+ (apply$35$$35$0 fib (- x$35$$35$1 6)) (apply$35$$35$0 fib (- x$35$$35$1 5)))) (= (apply$35$$35$0 fib (- x$35$$35$1 7)) (+ (apply$35$$35$0 fib (- x$35$$35$1 9)) (apply$35$$35$0 fib (- x$35$$35$1 8)))) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 7)) (apply$35$$35$0 fib (- x$35$$35$1 6))) 55) (= (apply$35$$35$0 fib (- x$35$$35$1 9)) (+ (apply$35$$35$0 fib (- x$35$$35$1 11)) (apply$35$$35$0 fib (- x$35$$35$1 10)))) (= (apply$35$$35$0 fib (- x$35$$35$1 8)) (+ (apply$35$$35$0 fib (- x$35$$35$1 10)) (apply$35$$35$0 fib (- x$35$$35$1 9)))) (= (apply$35$$35$0 fib (- x$35$$35$1 13)) 1) (= (apply$35$$35$0 fib (- x$35$$35$1 11)) (+ (apply$35$$35$0 fib (- x$35$$35$1 13)) (apply$35$$35$0 fib (- x$35$$35$1 12)))) (= (apply$35$$35$0 fib (- x$35$$35$1 2)) (+ (apply$35$$35$0 fib (- x$35$$35$1 4)) (apply$35$$35$0 fib (- x$35$$35$1 3)))) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 13)) (apply$35$$35$0 fib (- x$35$$35$1 12))) 3) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 2)) (apply$35$$35$0 fib (- x$35$$35$1 1))) 610) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 8)) (apply$35$$35$0 fib (- x$35$$35$1 7))) 34) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 6)) (apply$35$$35$0 fib (- x$35$$35$1 5))) 89) (= (apply$35$$35$0 fib (- x$35$$35$1 12)) (+ (apply$35$$35$0 fib (- x$35$$35$1 14)) (apply$35$$35$0 fib (- x$35$$35$1 13)))) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 4)) (apply$35$$35$0 fib (- x$35$$35$1 3))) 233) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 3)) (apply$35$$35$0 fib (- x$35$$35$1 2))) 377) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 11)) (apply$35$$35$0 fib (- x$35$$35$1 10))) 8) (= (+ (apply$35$$35$0 fib (- x$35$$35$1 5)) (apply$35$$35$0 fib (- x$35$$35$1 4))) 144))))
(push 1)
(assert (not (= (apply$35$$35$0 fib x$35$$35$1) 610)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(exit)
