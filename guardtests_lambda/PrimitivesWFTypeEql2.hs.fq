// Config {srcFile = "/mnt/f/liquidmeta/guardtests_lambda/PrimitivesWFTypeEql2.hs", cores = Nothing, minPartSize = 500, maxPartSize = 700, solver = z3, linear = False, stringTheory = False, defunction = False, allowHO = True, allowHOqs = False, eliminate = some, elimBound = Nothing, smtTimeout = Nothing, elimStats = False, solverStats = False, metadata = False, stats = False, parts = False, save = True, minimize = False, minimizeQs = False, minimizeKs = False, minimalSol = False, etaElim = False, gradual = False, ginteractive = False, autoKuts = False, nonLinCuts = False, noslice = False, rewriteAxioms = True, oldPLE = False, noIncrPle = False, checkCstr = [], extensionality = False, maxRWOrderingConstraints = Nothing, rwTerminationCheck = False, stdin = False, json = False, noLazyPLE = False, fuel = Nothing}


data Basics.FType 0 = [
       | Basics.FTPoly {Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 : int, Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 : Basics.Kind, Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 : Basics.FType}
       | Basics.FTFunc {Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 : Basics.FType, Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 : Basics.FType}
       | Basics.FTBasic {Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 : Basics.Basic}
     ]
data WellFormedness.WFEnvP 0 = [
       | WellFormedness.WFEnv {WellFormedness.WFEnv##lqdc##$select##WellFormedness.WFEnv##1 : Basics.Env}
     ]
data SystemFTyping.HasFTypeP 0 = [
       | SystemFTyping.HasFType {SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##1 : Basics.FEnv, SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##2 : Basics.Expr, SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##3 : Basics.FType}
     ]
data Basics.Basic 0 = [
       | Basics.FTV {Basics.FTV##lqdc##$select##Basics.FTV##1 : int}
       | Basics.BTV {Basics.BTV##lqdc##$select##Basics.BTV##1 : int}
       | Basics.TInt {}
       | Basics.TBool {}
     ]
data WellFormedness.WFType 0 = [
       | WellFormedness.WFVar3 {WellFormedness.WFVar3##g : Basics.Env, WellFormedness.WFVar3##a : int, WellFormedness.WFVar3##tt : Basics.Expr, WellFormedness.WFVar3##k : Basics.Kind, WellFormedness.WFVar3##lqdc##$select##WellFormedness.WFVar3##3 : WellFormedness.WFType, WellFormedness.WFVar3##a' : int, WellFormedness.WFVar3##k' : Basics.Kind}
       | WellFormedness.WFVar2 {WellFormedness.WFVar2##g : Basics.Env, WellFormedness.WFVar2##a : int, WellFormedness.WFVar2##tt : Basics.Expr, WellFormedness.WFVar2##k : Basics.Kind, WellFormedness.WFVar2##lqdc##$select##WellFormedness.WFVar2##3 : WellFormedness.WFType, WellFormedness.WFVar2##y : int, WellFormedness.WFVar2##t : Basics.Type}
       | WellFormedness.WFVar1 {WellFormedness.WFVar1##g : Basics.Env, WellFormedness.WFVar1##a : int, WellFormedness.WFVar1##tt : Basics.Expr, WellFormedness.WFVar1##k : Basics.Kind}
       | WellFormedness.WFRefn {WellFormedness.WFRefn##g : Basics.Env, WellFormedness.WFRefn##x : Basics.RVname, WellFormedness.WFRefn##b : Basics.Basic, WellFormedness.WFRefn##tt : Basics.Expr, WellFormedness.WFRefn##lqdc##$select##WellFormedness.WFRefn##4 : WellFormedness.WFType, WellFormedness.WFRefn##p : Basics.Expr, WellFormedness.WFRefn##y : int, WellFormedness.WFRefn##lqdc##$select##WellFormedness.WFRefn##1 : SystemFTyping.HasFType}
       | WellFormedness.WFPoly {WellFormedness.WFPoly##g : Basics.Env, WellFormedness.WFPoly##a : int, WellFormedness.WFPoly##k : Basics.Kind, WellFormedness.WFPoly##t : Basics.Type, WellFormedness.WFPoly##k_t : Basics.Kind, WellFormedness.WFPoly##a' : int, WellFormedness.WFPoly##lqdc##$select##WellFormedness.WFPoly##1 : WellFormedness.WFType}
       | WellFormedness.WFKind {WellFormedness.WFKind##g : Basics.Env, WellFormedness.WFKind##t : Basics.Type, WellFormedness.WFKind##lqdc##$select##WellFormedness.WFKind##1 : WellFormedness.WFType}
       | WellFormedness.WFFunc {WellFormedness.WFFunc##g : Basics.Env, WellFormedness.WFFunc##x : int, WellFormedness.WFFunc##t_x : Basics.Type, WellFormedness.WFFunc##k_x : Basics.Kind, WellFormedness.WFFunc##lqdc##$select##WellFormedness.WFFunc##5 : WellFormedness.WFType, WellFormedness.WFFunc##t : Basics.Type, WellFormedness.WFFunc##k : Basics.Kind, WellFormedness.WFFunc##y : int, WellFormedness.WFFunc##lqdc##$select##WellFormedness.WFFunc##1 : WellFormedness.WFType}
       | WellFormedness.WFExis {WellFormedness.WFExis##g : Basics.Env, WellFormedness.WFExis##x : int, WellFormedness.WFExis##t_x : Basics.Type, WellFormedness.WFExis##k_x : Basics.Kind, WellFormedness.WFExis##lqdc##$select##WellFormedness.WFExis##5 : WellFormedness.WFType, WellFormedness.WFExis##t : Basics.Type, WellFormedness.WFExis##k : Basics.Kind, WellFormedness.WFExis##y : int, WellFormedness.WFExis##lqdc##$select##WellFormedness.WFExis##1 : WellFormedness.WFType}
       | WellFormedness.WFBase {WellFormedness.WFBase##g : Basics.Env, WellFormedness.WFBase##b : Basics.Basic, WellFormedness.WFBase##tt : Basics.Expr}
     ]
data WellFormedness.WFTypeP 0 = [
       | WellFormedness.WFType {WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##1 : Basics.Env, WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##2 : Basics.Type, WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##3 : Basics.Kind}
     ]
data SystemFTyping.HasFType 0 = [
       | SystemFTyping.FTVar3 {SystemFTyping.FTVar3##g : Basics.FEnv, SystemFTyping.FTVar3##x : int, SystemFTyping.FTVar3##b : Basics.FType, SystemFTyping.FTVar3##lqdc##$select##SystemFTyping.FTVar3##3 : SystemFTyping.HasFType, SystemFTyping.FTVar3##y : int, SystemFTyping.FTVar3##k : Basics.Kind}
       | SystemFTyping.FTVar2 {SystemFTyping.FTVar2##g : Basics.FEnv, SystemFTyping.FTVar2##x : int, SystemFTyping.FTVar2##b : Basics.FType, SystemFTyping.FTVar2##lqdc##$select##SystemFTyping.FTVar2##3 : SystemFTyping.HasFType, SystemFTyping.FTVar2##y : int, SystemFTyping.FTVar2##b' : Basics.FType}
       | SystemFTyping.FTVar1 {SystemFTyping.FTVar1##g : Basics.FEnv, SystemFTyping.FTVar1##x : int, SystemFTyping.FTVar1##b : Basics.FType}
       | SystemFTyping.FTPrm {SystemFTyping.FTPrm##g : Basics.FEnv, SystemFTyping.FTPrm##c : Basics.Prim}
       | SystemFTyping.FTLet {SystemFTyping.FTLet##g : Basics.FEnv, SystemFTyping.FTLet##e_x : Basics.Expr, SystemFTyping.FTLet##b : Basics.FType, SystemFTyping.FTLet##lqdc##$select##SystemFTyping.FTLet##6 : SystemFTyping.HasFType, SystemFTyping.FTLet##x : int, SystemFTyping.FTLet##e : Basics.Expr, SystemFTyping.FTLet##b' : Basics.FType, SystemFTyping.FTLet##y : int, SystemFTyping.FTLet##lqdc##$select##SystemFTyping.FTLet##1 : SystemFTyping.HasFType}
       | SystemFTyping.FTIC {SystemFTyping.FTIC##g : Basics.FEnv, SystemFTyping.FTIC##n : int}
       | SystemFTyping.FTConj {SystemFTyping.FTConj##g : Basics.FEnv, SystemFTyping.FTConj##e : Basics.Expr, SystemFTyping.FTConj##lqdc##$select##SystemFTyping.FTConj##3 : SystemFTyping.HasFType, SystemFTyping.FTConj##e' : Basics.Expr, SystemFTyping.FTConj##lqdc##$select##SystemFTyping.FTConj##1 : SystemFTyping.HasFType}
       | SystemFTyping.FTBC {SystemFTyping.FTBC##g : Basics.FEnv, SystemFTyping.FTBC##b : bool}
       | SystemFTyping.FTAppT {SystemFTyping.FTAppT##g : Basics.FEnv, SystemFTyping.FTAppT##e : Basics.Expr, SystemFTyping.FTAppT##a : int, SystemFTyping.FTAppT##k : Basics.Kind, SystemFTyping.FTAppT##t' : Basics.FType, SystemFTyping.FTAppT##lqdc##$select##SystemFTyping.FTAppT##3 : SystemFTyping.HasFType, SystemFTyping.FTAppT##rt : Basics.Type, SystemFTyping.FTAppT##lqdc##$select##SystemFTyping.FTAppT##1 : SystemFWellFormedness.WFFT}
       | SystemFTyping.FTApp {SystemFTyping.FTApp##g : Basics.FEnv, SystemFTyping.FTApp##e : Basics.Expr, SystemFTyping.FTApp##b : Basics.FType, SystemFTyping.FTApp##b' : Basics.FType, SystemFTyping.FTApp##lqdc##$select##SystemFTyping.FTApp##3 : SystemFTyping.HasFType, SystemFTyping.FTApp##e' : Basics.Expr, SystemFTyping.FTApp##lqdc##$select##SystemFTyping.FTApp##1 : SystemFTyping.HasFType}
       | SystemFTyping.FTAnn {SystemFTyping.FTAnn##g : Basics.FEnv, SystemFTyping.FTAnn##e : Basics.Expr, SystemFTyping.FTAnn##b : Basics.FType, SystemFTyping.FTAnn##t1 : Basics.Type, SystemFTyping.FTAnn##lqdc##$select##SystemFTyping.FTAnn##1 : SystemFTyping.HasFType}
       | SystemFTyping.FTAbsT {SystemFTyping.FTAbsT##g : Basics.FEnv, SystemFTyping.FTAbsT##a : int, SystemFTyping.FTAbsT##k : Basics.Kind, SystemFTyping.FTAbsT##e : Basics.Expr, SystemFTyping.FTAbsT##b : Basics.FType, SystemFTyping.FTAbsT##a' : int, SystemFTyping.FTAbsT##lqdc##$select##SystemFTyping.FTAbsT##1 : SystemFTyping.HasFType}
       | SystemFTyping.FTAbs {SystemFTyping.FTAbs##g : Basics.FEnv, SystemFTyping.FTAbs##x : int, SystemFTyping.FTAbs##b : Basics.FType, SystemFTyping.FTAbs##k : Basics.Kind, SystemFTyping.FTAbs##lqdc##$select##SystemFTyping.FTAbs##5 : SystemFWellFormedness.WFFT, SystemFTyping.FTAbs##e : Basics.Expr, SystemFTyping.FTAbs##b' : Basics.FType, SystemFTyping.FTAbs##y : int, SystemFTyping.FTAbs##lqdc##$select##SystemFTyping.FTAbs##1 : SystemFTyping.HasFType}
     ]
data Basics.RVname 0 = [
       | Basics.Z {}
     ]
data SystemFWellFormedness.WFFE 0 = [
       | SystemFWellFormedness.WFFEmpty {}
       | SystemFWellFormedness.WFFBindT {SystemFWellFormedness.WFFBindT##g : Basics.FEnv, SystemFWellFormedness.WFFBindT##lqdc##$select##SystemFWellFormedness.WFFBindT##3 : SystemFWellFormedness.WFFE, SystemFWellFormedness.WFFBindT##a : int, SystemFWellFormedness.WFFBindT##k : Basics.Kind}
       | SystemFWellFormedness.WFFBind {SystemFWellFormedness.WFFBind##g : Basics.FEnv, SystemFWellFormedness.WFFBind##lqdc##$select##SystemFWellFormedness.WFFBind##5 : SystemFWellFormedness.WFFE, SystemFWellFormedness.WFFBind##x : int, SystemFWellFormedness.WFFBind##t : Basics.FType, SystemFWellFormedness.WFFBind##k : Basics.Kind, SystemFWellFormedness.WFFBind##lqdc##$select##SystemFWellFormedness.WFFBind##1 : SystemFWellFormedness.WFFT}
     ]
data SystemFWellFormedness.WFFTP 0 = [
       | SystemFWellFormedness.WFFT {SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##1 : Basics.FEnv, SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##2 : Basics.FType, SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##3 : Basics.Kind}
     ]
data WellFormedness.WFEnv 0 = [
       | WellFormedness.WFEEmpty {}
       | WellFormedness.WFEBindT {WellFormedness.WFEBindT##g : Basics.Env, WellFormedness.WFEBindT##lqdc##$select##WellFormedness.WFEBindT##3 : WellFormedness.WFEnv, WellFormedness.WFEBindT##a : int, WellFormedness.WFEBindT##k : Basics.Kind}
       | WellFormedness.WFEBind {WellFormedness.WFEBind##g : Basics.Env, WellFormedness.WFEBind##lqdc##$select##WellFormedness.WFEBind##5 : WellFormedness.WFEnv, WellFormedness.WFEBind##x : int, WellFormedness.WFEBind##t : Basics.Type, WellFormedness.WFEBind##k : Basics.Kind, WellFormedness.WFEBind##lqdc##$select##WellFormedness.WFEBind##1 : WellFormedness.WFType}
     ]
data Basics.Kind 0 = [
       | Basics.Star {}
       | Basics.Base {}
     ]
data GHC.Maybe.Maybe 1 = [
       | GHC.Maybe.Just {GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 : @(0)}
       | GHC.Maybe.Nothing {}
     ]
data Basics.Type 0 = [
       | Basics.TRefn {Basics.TRefn##lqdc##$select##Basics.TRefn##3 : Basics.Basic, Basics.TRefn##lqdc##$select##Basics.TRefn##2 : Basics.RVname, Basics.TRefn##p : Basics.Expr}
       | Basics.TPoly {Basics.TPoly##lqdc##$select##Basics.TPoly##3 : int, Basics.TPoly##lqdc##$select##Basics.TPoly##2 : Basics.Kind, Basics.TPoly##lqdc##$select##Basics.TPoly##1 : Basics.Type}
       | Basics.TFunc {Basics.TFunc##lqdc##$select##Basics.TFunc##3 : int, Basics.TFunc##lqdc##$select##Basics.TFunc##2 : Basics.Type, Basics.TFunc##lqdc##$select##Basics.TFunc##1 : Basics.Type}
       | Basics.TExists {Basics.TExists##lqdc##$select##Basics.TExists##3 : int, Basics.TExists##lqdc##$select##Basics.TExists##2 : Basics.Type, Basics.TExists##lqdc##$select##Basics.TExists##1 : Basics.Type}
     ]
data Basics.Env 0 = [
       | Basics.Empty {}
       | Basics.ConsT {Basics.ConsT##a : int, Basics.ConsT##k : Basics.Kind, Basics.ConsT##g : Basics.Env}
       | Basics.Cons {Basics.Cons##x : int, Basics.Cons##t : Basics.Type, Basics.Cons##g : Basics.Env}
     ]
data Basics.Prim 0 = [
       | Basics.Eql {}
       | Basics.Eqn {Basics.Eqn##lqdc##$select##Basics.Eqn##1 : int}
       | Basics.Eq {}
       | Basics.Leqn {Basics.Leqn##lqdc##$select##Basics.Leqn##1 : int}
       | Basics.Leq {}
       | Basics.Eqv {}
       | Basics.Not {}
       | Basics.Or {}
       | Basics.And {}
     ]
data SystemFWellFormedness.WFFEP 0 = [
       | SystemFWellFormedness.WFFE {SystemFWellFormedness.WFFE##lqdc##$select##SystemFWellFormedness.WFFE##1 : Basics.FEnv}
     ]
data SystemFWellFormedness.WFFT 0 = [
       | SystemFWellFormedness.WFFTPoly {SystemFWellFormedness.WFFTPoly##g : Basics.FEnv, SystemFWellFormedness.WFFTPoly##a : int, SystemFWellFormedness.WFFTPoly##k : Basics.Kind, SystemFWellFormedness.WFFTPoly##t : Basics.FType, SystemFWellFormedness.WFFTPoly##k_t : Basics.Kind, SystemFWellFormedness.WFFTPoly##a' : int, SystemFWellFormedness.WFFTPoly##lqdc##$select##SystemFWellFormedness.WFFTPoly##1 : SystemFWellFormedness.WFFT}
       | SystemFWellFormedness.WFFTKind {SystemFWellFormedness.WFFTKind##g : Basics.FEnv, SystemFWellFormedness.WFFTKind##t : Basics.FType, SystemFWellFormedness.WFFTKind##lqdc##$select##SystemFWellFormedness.WFFTKind##1 : SystemFWellFormedness.WFFT}
       | SystemFWellFormedness.WFFTFunc {SystemFWellFormedness.WFFTFunc##g : Basics.FEnv, SystemFWellFormedness.WFFTFunc##t1 : Basics.FType, SystemFWellFormedness.WFFTFunc##k1 : Basics.Kind, SystemFWellFormedness.WFFTFunc##lqdc##$select##SystemFWellFormedness.WFFTFunc##4 : SystemFWellFormedness.WFFT, SystemFWellFormedness.WFFTFunc##t2 : Basics.FType, SystemFWellFormedness.WFFTFunc##k2 : Basics.Kind, SystemFWellFormedness.WFFTFunc##lqdc##$select##SystemFWellFormedness.WFFTFunc##1 : SystemFWellFormedness.WFFT}
       | SystemFWellFormedness.WFFTFV3 {SystemFWellFormedness.WFFTFV3##g : Basics.FEnv, SystemFWellFormedness.WFFTFV3##a : int, SystemFWellFormedness.WFFTFV3##k : Basics.Kind, SystemFWellFormedness.WFFTFV3##lqdc##$select##SystemFWellFormedness.WFFTFV3##3 : SystemFWellFormedness.WFFT, SystemFWellFormedness.WFFTFV3##a' : int, SystemFWellFormedness.WFFTFV3##k' : Basics.Kind}
       | SystemFWellFormedness.WFFTFV2 {SystemFWellFormedness.WFFTFV2##g : Basics.FEnv, SystemFWellFormedness.WFFTFV2##a : int, SystemFWellFormedness.WFFTFV2##k : Basics.Kind, SystemFWellFormedness.WFFTFV2##lqdc##$select##SystemFWellFormedness.WFFTFV2##3 : SystemFWellFormedness.WFFT, SystemFWellFormedness.WFFTFV2##a' : int, SystemFWellFormedness.WFFTFV2##t : Basics.FType}
       | SystemFWellFormedness.WFFTFV1 {SystemFWellFormedness.WFFTFV1##g : Basics.FEnv, SystemFWellFormedness.WFFTFV1##a : int, SystemFWellFormedness.WFFTFV1##k : Basics.Kind}
       | SystemFWellFormedness.WFFTBasic {SystemFWellFormedness.WFFTBasic##g : Basics.FEnv, SystemFWellFormedness.WFFTBasic##b : Basics.Basic}
     ]
data Basics.Expr 0 = [
       | Basics.Conj {Basics.Conj##lqdc##$select##Basics.Conj##1 : Basics.Expr, Basics.Conj##lqdc##$select##Basics.Conj##2 : Basics.Expr}
       | Basics.Annot {Basics.Annot##lqdc##$select##Basics.Annot##1 : Basics.Expr, Basics.Annot##lqdc##$select##Basics.Annot##2 : Basics.Type}
       | Basics.Let {Basics.Let##lqdc##$select##Basics.Let##1 : int, Basics.Let##lqdc##$select##Basics.Let##2 : Basics.Expr, Basics.Let##lqdc##$select##Basics.Let##3 : Basics.Expr}
       | Basics.AppT {Basics.AppT##lqdc##$select##Basics.AppT##1 : Basics.Expr, Basics.AppT##lqdc##$select##Basics.AppT##2 : Basics.Type}
       | Basics.LambdaT {Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 : int, Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 : Basics.Kind, Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 : Basics.Expr}
       | Basics.App {Basics.App##lqdc##$select##Basics.App##1 : Basics.Expr, Basics.App##lqdc##$select##Basics.App##2 : Basics.Expr}
       | Basics.Lambda {Basics.Lambda##lqdc##$select##Basics.Lambda##1 : int, Basics.Lambda##lqdc##$select##Basics.Lambda##2 : Basics.Expr}
       | Basics.FV {Basics.FV##lqdc##$select##Basics.FV##1 : int}
       | Basics.BV {Basics.BV##lqdc##$select##Basics.BV##1 : int}
       | Basics.Prim {Basics.Prim##lqdc##$select##Basics.Prim##1 : Basics.Prim}
       | Basics.Ic {Basics.Ic##lqdc##$select##Basics.Ic##1 : int}
       | Basics.Bc {Basics.Bc##lqdc##$select##Basics.Bc##1 : bool}
     ]
data Basics.FEnv 0 = [
       | Basics.FEmpty {}
       | Basics.FConsT {Basics.FConsT##a : int, Basics.FConsT##k : Basics.Kind, Basics.FConsT##g : Basics.FEnv}
       | Basics.FCons {Basics.FCons##x : int, Basics.FCons##t : Basics.FType, Basics.FCons##g : Basics.FEnv}
     ]


define GHC.Base.. (lq1 : func(0 , [b##a3Tn;
                                   c##a3To]),  lq2 : func(0 , [a##a3Tp;
                                                               b##a3Tn]),  lq3 : a##a3Tp) : c##a3To = { (lq1 (lq2 lq3)) }
define PrimitivesWFTypeEql.foo18 (lq1 : int) : (GHC.Maybe.Maybe int) = { (GHC.Maybe.Just lq1) }
define SystemFTyping.isFTLet (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then false else (if (is$SystemFTyping.FTVar2 lq1) then false else (if (is$SystemFTyping.FTVar3 lq1) then false else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then false else (if (is$SystemFTyping.FTApp lq1) then false else (if (is$SystemFTyping.FTAbsT lq1) then false else (if (is$SystemFTyping.FTAppT lq1) then false else (if (is$SystemFTyping.FTLet lq1) then true else (if (is$SystemFTyping.FTAnn lq1) then false else false)))))))))))) }
define SystemFTyping.noDefnsBaseAppT (lq1 : Basics.Expr) : bool = { (if (is$Basics.Bc lq1) then true else (if (is$Basics.Ic lq1) then true else (if (is$Basics.Prim lq1) then true else (if (is$Basics.BV lq1) then true else (if (is$Basics.FV lq1) then true else (if (is$Basics.Lambda lq1) then false else (if (is$Basics.App lq1) then && [(SystemFTyping.noDefnsBaseAppT (Basics.App##lqdc##$select##Basics.App##1 lq1));
                                                                                                                                                                                                                                                                                                                                                (SystemFTyping.noDefnsBaseAppT (Basics.App##lqdc##$select##Basics.App##2 lq1))] else (if (is$Basics.LambdaT lq1) then false else (if (is$Basics.AppT lq1) then (SystemFTyping.noDefnsBaseAppT (Basics.AppT##lqdc##$select##Basics.AppT##1 lq1)) else (if (is$Basics.Let lq1) then false else (if (is$Basics.Annot lq1) then (SystemFTyping.noDefnsBaseAppT (Basics.Annot##lqdc##$select##Basics.Annot##1 lq1)) else && [(SystemFTyping.noDefnsBaseAppT (Basics.Conj##lqdc##$select##Basics.Conj##1 lq1));
ystemFTyping.noDefnsBaseAppT (Basics.Conj##lqdc##$select##Basics.Conj##2 lq1))]))))))))))) }
define SystemFTyping.refn_pred (c : Basics.Prim) : Basics.Expr = { (if (is$Basics.And c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.Prim Basics.And) (Basics.BV 1)) (Basics.BV 2))) else (if (is$Basics.Or c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.Prim Basics.Or) (Basics.BV 1)) (Basics.BV 2))) else (if (is$Basics.Not c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.Prim Basics.Not) (Basics.BV 2))) else (if (is$Basics.Eqv c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.Prim Basics.Or) (Basics.App (Basics.App (Basics.Prim Basics.And) (Basics.BV 1)) (Basics.BV 2))) (Basics.App (Basics.App (Basics.Prim Basics.And) (Basics.App (Basics.Prim Basics.Not) (Basics.BV 1))) (Basics.App (Basics.Prim Basics.Not) (Basics.BV 2))))) else (if (is$Basics.Leq c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.Prim Basics.Leq) (Basics.BV 1)) (Basics.BV 2))) else (if (is$Basics.Leqn c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.Prim Basics.Leq) (Basics.Ic (Basics.Leqn##lqdc##$select##Basics.Leqn##1 c))) (Basics.BV 2))) else (if (is$Basics.Eq c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.Prim Basics.Eq) (Basics.BV 1)) (Basics.BV 2))) else (if (is$Basics.Eqn c) then (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.Prim Basics.Eq) (Basics.Ic (Basics.Eqn##lqdc##$select##Basics.Eqn##1 c))) (Basics.BV 2))) else (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.App (Basics.App (Basics.AppT (Basics.Prim Basics.Eql) (Basics.TRefn (Basics.BTV 1) Basics.Z (Basics.Bc true))) (Basics.BV 1)) (Basics.BV 2))))))))))) }
define SystemFTyping.isFTAppT (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then false else (if (is$SystemFTyping.FTVar2 lq1) then false else (if (is$SystemFTyping.FTVar3 lq1) then false else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then false else (if (is$SystemFTyping.FTApp lq1) then false else (if (is$SystemFTyping.FTAbsT lq1) then false else (if (is$SystemFTyping.FTAppT lq1) then true else (if (is$SystemFTyping.FTLet lq1) then false else (if (is$SystemFTyping.FTAnn lq1) then false else false)))))))))))) }
define SystemFTyping.erase_ty (c : Basics.Prim) : Basics.FType = { (if (is$Basics.And c) then (Basics.FTFunc (Basics.FTBasic Basics.TBool) (Basics.FTFunc (Basics.FTBasic Basics.TBool) (Basics.FTBasic Basics.TBool))) else (if (is$Basics.Or c) then (Basics.FTFunc (Basics.FTBasic Basics.TBool) (Basics.FTFunc (Basics.FTBasic Basics.TBool) (Basics.FTBasic Basics.TBool))) else (if (is$Basics.Not c) then (Basics.FTFunc (Basics.FTBasic Basics.TBool) (Basics.FTBasic Basics.TBool)) else (if (is$Basics.Eqv c) then (Basics.FTFunc (Basics.FTBasic Basics.TBool) (Basics.FTFunc (Basics.FTBasic Basics.TBool) (Basics.FTBasic Basics.TBool))) else (if (is$Basics.Leq c) then (Basics.FTFunc (Basics.FTBasic Basics.TInt) (Basics.FTFunc (Basics.FTBasic Basics.TInt) (Basics.FTBasic Basics.TBool))) else (if (is$Basics.Leqn c) then (Basics.FTFunc (Basics.FTBasic Basics.TInt) (Basics.FTBasic Basics.TBool)) else (if (is$Basics.Eq c) then (Basics.FTFunc (Basics.FTBasic Basics.TInt) (Basics.FTFunc (Basics.FTBasic Basics.TInt) (Basics.FTBasic Basics.TBool))) else (if (is$Basics.Eqn c) then (Basics.FTFunc (Basics.FTBasic Basics.TInt) (Basics.FTBasic Basics.TBool)) else (Basics.FTPoly 1 Basics.Base (Basics.FTFunc (Basics.FTBasic (Basics.BTV 1)) (Basics.FTFunc (Basics.FTBasic (Basics.BTV 1)) (Basics.FTBasic Basics.TBool)))))))))))) }
define SystemFTyping.isFTAbsT (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then false else (if (is$SystemFTyping.FTVar2 lq1) then false else (if (is$SystemFTyping.FTVar3 lq1) then false else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then false else (if (is$SystemFTyping.FTApp lq1) then false else (if (is$SystemFTyping.FTAbsT lq1) then true else (if (is$SystemFTyping.FTAppT lq1) then false else (if (is$SystemFTyping.FTLet lq1) then false else (if (is$SystemFTyping.FTAnn lq1) then false else false)))))))))))) }
define SystemFTyping.isFTAbs (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then false else (if (is$SystemFTyping.FTVar2 lq1) then false else (if (is$SystemFTyping.FTVar3 lq1) then false else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then true else (if (is$SystemFTyping.FTApp lq1) then false else (if (is$SystemFTyping.FTAbsT lq1) then false else (if (is$SystemFTyping.FTAppT lq1) then false else (if (is$SystemFTyping.FTLet lq1) then false else (if (is$SystemFTyping.FTAnn lq1) then false else false)))))))))))) }
define SystemFTyping.refn_pred_freeBV (c : Basics.Prim) : (Set_Set int) = { (if (is$Basics.And c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 (GHC.Types.$58$ 1 GHC.Types.$91$$93$)))) else (if (is$Basics.Or c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 (GHC.Types.$58$ 1 GHC.Types.$91$$93$)))) else (if (is$Basics.Not c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 GHC.Types.$91$$93$))) else (if (is$Basics.Eqv c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 (GHC.Types.$58$ 1 GHC.Types.$91$$93$)))) else (if (is$Basics.Leq c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 (GHC.Types.$58$ 1 GHC.Types.$91$$93$)))) else (if (is$Basics.Leqn c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 GHC.Types.$91$$93$))) else (if (is$Basics.Eq c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 (GHC.Types.$58$ 1 GHC.Types.$91$$93$)))) else (if (is$Basics.Eqn c) then (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 GHC.Types.$91$$93$))) else (listElts (GHC.Types.$58$ 0 (GHC.Types.$58$ 2 (GHC.Types.$58$ 1 GHC.Types.$91$$93$)))))))))))) }
define SystemFTyping.firstBV (c : Basics.Prim) : int = { (if (is$Basics.And c) then 1 else (if (is$Basics.Or c) then 1 else (if (is$Basics.Not c) then 2 else (if (is$Basics.Eqv c) then 1 else (if (is$Basics.Leq c) then 1 else (if (is$Basics.Leqn c) then 2 else (if (is$Basics.Eq c) then 1 else (if (is$Basics.Eqn c) then 2 else 1)))))))) }
define SystemFTyping.isFTVar (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then true else (if (is$SystemFTyping.FTVar2 lq1) then true else (if (is$SystemFTyping.FTVar3 lq1) then true else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then false else (if (is$SystemFTyping.FTApp lq1) then false else (if (is$SystemFTyping.FTAbsT lq1) then false else (if (is$SystemFTyping.FTAppT lq1) then false else (if (is$SystemFTyping.FTLet lq1) then false else (if (is$SystemFTyping.FTAnn lq1) then false else false)))))))))))) }
define SystemFTyping.tyic (n : int) : Basics.Type = { (Basics.TRefn Basics.TInt Basics.Z (Basics.App (Basics.App (Basics.Prim Basics.Eq) (Basics.BV 0)) (Basics.Ic n))) }
define SystemFTyping.inType (c : Basics.Prim) : Basics.Type = { (if (is$Basics.And c) then (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) else (if (is$Basics.Or c) then (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) else (if (is$Basics.Not c) then (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) else (if (is$Basics.Eqv c) then (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) else (if (is$Basics.Leq c) then (Basics.TRefn Basics.TInt Basics.Z (Basics.Bc true)) else (if (is$Basics.Leqn c) then (Basics.TRefn Basics.TInt Basics.Z (Basics.Bc true)) else (if (is$Basics.Eq c) then (Basics.TRefn Basics.TInt Basics.Z (Basics.Bc true)) else (if (is$Basics.Eqn c) then (Basics.TRefn Basics.TInt Basics.Z (Basics.Bc true)) else (Basics.TRefn (Basics.BTV 1) Basics.Z (Basics.Bc true)))))))))) }
define SystemFTyping.synthType (lq_tmp$db##0 : Basics.FEnv,  e : Basics.Expr) : (GHC.Maybe.Maybe Basics.FType) = { (if (is$Basics.Bc e) then (GHC.Maybe.Just (Basics.FTBasic Basics.TBool)) else (if (is$Basics.Ic e) then (GHC.Maybe.Just (Basics.FTBasic Basics.TInt)) else (if (is$Basics.Prim e) then (GHC.Maybe.Just (SystemFTyping.erase_ty (Basics.Prim##lqdc##$select##Basics.Prim##1 e))) else (if (is$Basics.BV e) then GHC.Maybe.Nothing else (if (is$Basics.FV e) then (Basics.lookupF (Basics.FV##lqdc##$select##Basics.FV##1 e) lq_tmp$db##0) else (if (is$Basics.App e) then (if (is$GHC.Maybe.Nothing (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##2 e))) then GHC.Maybe.Nothing else (if (is$GHC.Maybe.Nothing (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##1 e))) then GHC.Maybe.Nothing else (if (is$Basics.FTBasic (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##1 e)))) then GHC.Maybe.Nothing else (if (is$Basics.FTFunc (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##1 e)))) then (if ((Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##1 e)))) = (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##2 e)))) then (GHC.Maybe.Just (Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##1 e))))) else GHC.Maybe.Nothing) else GHC.Maybe.Nothing)))) else (if (is$Basics.AppT e) then (if (is$GHC.Maybe.Nothing (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e))) then GHC.Maybe.Nothing else (if (is$Basics.FTBasic (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e)))) then GHC.Maybe.Nothing else (if (is$Basics.FTFunc (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e)))) then GHC.Maybe.Nothing else (if (is$Basics.Base (Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e))))) then (if && [(SystemFWellFormedness.isWFFT lq_tmp$db##0 (Basics.erase (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) Basics.Base);
et_sub (Basics.free (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) (Basics.vbindsF lq_tmp$db##0));
asics.noExists (Basics.AppT##lqdc##$select##Basics.AppT##2 e));
et_sub (Basics.freeTV (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) (Basics.tvbindsF lq_tmp$db##0));
et_emp (Basics.tfreeBV (Basics.AppT##lqdc##$select##Basics.AppT##2 e)));
et_emp (Basics.tfreeBTV (Basics.AppT##lqdc##$select##Basics.AppT##2 e)))]]]]] then (GHC.Maybe.Just (Basics.ftsubBV (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e)))) (Basics.erase (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e)))))) else GHC.Maybe.Nothing) else GHC.Maybe.Nothing)))) else (if (is$Basics.Annot e) then (if && [&& [(SystemFTyping.checkType lq_tmp$db##0 (Basics.Annot##lqdc##$select##Basics.Annot##1 e) (Basics.erase (Basics.Annot##lqdc##$select##Basics.Annot##2 e)));
et_sub (Basics.free (Basics.Annot##lqdc##$select##Basics.Annot##2 e)) (Basics.vbindsF lq_tmp$db##0));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (Set_sub (Basics.freeTV (Basics.Annot##lqdc##$select##Basics.Annot##2 e)) (Basics.tvbindsF lq_tmp$db##0))]];
et_emp (Basics.tfreeBV (Basics.Annot##lqdc##$select##Basics.Annot##2 e)));
et_emp (Basics.tfreeBTV (Basics.Annot##lqdc##$select##Basics.Annot##2 e)))]] then (GHC.Maybe.Just (Basics.erase (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else GHC.Maybe.Nothing) else (if && [(SystemFTyping.checkType lq_tmp$db##0 (Basics.Conj##lqdc##$select##Basics.Conj##1 e) (Basics.FTBasic Basics.TBool));
ystemFTyping.checkType lq_tmp$db##0 (Basics.Conj##lqdc##$select##Basics.Conj##2 e) (Basics.FTBasic Basics.TBool))] then (GHC.Maybe.Just (Basics.FTBasic Basics.TBool)) else GHC.Maybe.Nothing))))))))) }
define SystemFTyping.foo04 (lq1 : a##a7vp) : (GHC.Maybe.Maybe a##a7vp) = { (GHC.Maybe.Just lq1) }
define SystemFTyping.ty' (c : Basics.Prim) : Basics.Type = { (if (is$Basics.And c) then (Basics.TFunc 2 (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred Basics.And))) else (if (is$Basics.Or c) then (Basics.TFunc 2 (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred Basics.Or))) else (if (is$Basics.Not c) then (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred Basics.Not)) else (if (is$Basics.Eqv c) then (Basics.TFunc 2 (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred Basics.Eqv))) else (if (is$Basics.Leq c) then (Basics.TFunc 2 (Basics.TRefn Basics.TInt Basics.Z (Basics.Bc true)) (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred Basics.Leq))) else (if (is$Basics.Leqn c) then (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred (Basics.Leqn (Basics.Leqn##lqdc##$select##Basics.Leqn##1 c)))) else (if (is$Basics.Eq c) then (Basics.TFunc 2 (Basics.TRefn Basics.TInt Basics.Z (Basics.Bc true)) (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred Basics.Eq))) else (if (is$Basics.Eqn c) then (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred (Basics.Eqn (Basics.Eqn##lqdc##$select##Basics.Eqn##1 c)))) else (Basics.TFunc 2 (Basics.TRefn (Basics.BTV 1) Basics.Z (Basics.Bc true)) (Basics.TRefn Basics.TBool Basics.Z (SystemFTyping.refn_pred Basics.Eql))))))))))) }
define SystemFTyping.isFTApp (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then false else (if (is$SystemFTyping.FTVar2 lq1) then false else (if (is$SystemFTyping.FTVar3 lq1) then false else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then false else (if (is$SystemFTyping.FTApp lq1) then true else (if (is$SystemFTyping.FTAbsT lq1) then false else (if (is$SystemFTyping.FTAppT lq1) then false else (if (is$SystemFTyping.FTLet lq1) then false else (if (is$SystemFTyping.FTAnn lq1) then false else false)))))))))))) }
define GHC.Base.. (lq1 : func(0 , [b##a3Tn;
                                   c##a3To]),  lq2 : func(0 , [a##a3Tp;
                                                               b##a3Tn]),  lq3 : a##a3Tp) : c##a3To = { (lq1 (lq2 lq3)) }
define SystemFTyping.isFTAnn (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then false else (if (is$SystemFTyping.FTVar2 lq1) then false else (if (is$SystemFTyping.FTVar3 lq1) then false else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then false else (if (is$SystemFTyping.FTApp lq1) then false else (if (is$SystemFTyping.FTAbsT lq1) then false else (if (is$SystemFTyping.FTAppT lq1) then false else (if (is$SystemFTyping.FTLet lq1) then false else (if (is$SystemFTyping.FTAnn lq1) then true else false)))))))))))) }
define SystemFTyping.tybc (b : bool) : Basics.Type = { (if b then (Basics.TRefn Basics.TBool Basics.Z (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.Bc true))) else (Basics.TRefn Basics.TBool Basics.Z (Basics.App (Basics.App (Basics.Prim Basics.Eqv) (Basics.BV 0)) (Basics.Bc false)))) }
define SystemFTyping.isFTConj (lq1 : SystemFTyping.HasFType) : bool = { (if (is$SystemFTyping.FTBC lq1) then false else (if (is$SystemFTyping.FTIC lq1) then false else (if (is$SystemFTyping.FTVar1 lq1) then false else (if (is$SystemFTyping.FTVar2 lq1) then false else (if (is$SystemFTyping.FTVar3 lq1) then false else (if (is$SystemFTyping.FTPrm lq1) then false else (if (is$SystemFTyping.FTAbs lq1) then false else (if (is$SystemFTyping.FTApp lq1) then false else (if (is$SystemFTyping.FTAbsT lq1) then false else (if (is$SystemFTyping.FTAppT lq1) then false else (if (is$SystemFTyping.FTLet lq1) then false else (if (is$SystemFTyping.FTAnn lq1) then false else true)))))))))))) }
define SystemFTyping.ty (c : Basics.Prim) : Basics.Type = { (if (is$Basics.And c) then (Basics.TFunc (SystemFTyping.firstBV Basics.And) (SystemFTyping.inType Basics.And) (SystemFTyping.ty' Basics.And)) else (if (is$Basics.Or c) then (Basics.TFunc (SystemFTyping.firstBV Basics.Or) (SystemFTyping.inType Basics.Or) (SystemFTyping.ty' Basics.Or)) else (if (is$Basics.Not c) then (Basics.TFunc (SystemFTyping.firstBV Basics.Not) (SystemFTyping.inType Basics.Not) (SystemFTyping.ty' Basics.Not)) else (if (is$Basics.Eqv c) then (Basics.TFunc (SystemFTyping.firstBV Basics.Eqv) (SystemFTyping.inType Basics.Eqv) (SystemFTyping.ty' Basics.Eqv)) else (if (is$Basics.Leq c) then (Basics.TFunc (SystemFTyping.firstBV Basics.Leq) (SystemFTyping.inType Basics.Leq) (SystemFTyping.ty' Basics.Leq)) else (if (is$Basics.Leqn c) then (Basics.TFunc (SystemFTyping.firstBV (Basics.Leqn (Basics.Leqn##lqdc##$select##Basics.Leqn##1 c))) (SystemFTyping.inType (Basics.Leqn (Basics.Leqn##lqdc##$select##Basics.Leqn##1 c))) (SystemFTyping.ty' (Basics.Leqn (Basics.Leqn##lqdc##$select##Basics.Leqn##1 c)))) else (if (is$Basics.Eq c) then (Basics.TFunc (SystemFTyping.firstBV Basics.Eq) (SystemFTyping.inType Basics.Eq) (SystemFTyping.ty' Basics.Eq)) else (if (is$Basics.Eqn c) then (Basics.TFunc (SystemFTyping.firstBV (Basics.Eqn (Basics.Eqn##lqdc##$select##Basics.Eqn##1 c))) (SystemFTyping.inType (Basics.Eqn (Basics.Eqn##lqdc##$select##Basics.Eqn##1 c))) (SystemFTyping.ty' (Basics.Eqn (Basics.Eqn##lqdc##$select##Basics.Eqn##1 c)))) else (Basics.TPoly 1 Basics.Base (Basics.TFunc (SystemFTyping.firstBV Basics.Eql) (SystemFTyping.inType Basics.Eql) (SystemFTyping.ty' Basics.Eql))))))))))) }
define SystemFTyping.checkType (lq_tmp$db##0 : Basics.FEnv,  e : Basics.Expr,  t : Basics.FType) : bool = { (if (is$Basics.Bc e) then (t = (Basics.FTBasic Basics.TBool)) else (if (is$Basics.Ic e) then (t = (Basics.FTBasic Basics.TInt)) else (if (is$Basics.Prim e) then (t = (SystemFTyping.erase_ty (Basics.Prim##lqdc##$select##Basics.Prim##1 e))) else (if (is$Basics.BV e) then false else (if (is$Basics.FV e) then (Basics.bound_inF (Basics.FV##lqdc##$select##Basics.FV##1 e) t lq_tmp$db##0) else (if (is$Basics.App e) then (if (is$GHC.Maybe.Nothing (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##2 e))) then false else (SystemFTyping.checkType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##1 e) (Basics.FTFunc (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.App##lqdc##$select##Basics.App##2 e))) t))) else (if (is$Basics.AppT e) then (if (is$GHC.Maybe.Nothing (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e))) then false else (if (is$Basics.FTBasic (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e)))) then false else (if (is$Basics.FTFunc (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e)))) then false else (if (is$Basics.Base (Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e))))) then && [(t = (Basics.ftsubBV (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e)))) (Basics.erase (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 (GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 (SystemFTyping.synthType lq_tmp$db##0 (Basics.AppT##lqdc##$select##Basics.AppT##1 e))))));
ystemFWellFormedness.isWFFT lq_tmp$db##0 (Basics.erase (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) Basics.Base);
asics.noExists (Basics.AppT##lqdc##$select##Basics.AppT##2 e));
et_sub (Basics.free (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) (Basics.vbindsF lq_tmp$db##0));
et_sub (Basics.freeTV (Basics.AppT##lqdc##$select##Basics.AppT##2 e)) (Basics.tvbindsF lq_tmp$db##0));
et_emp (Basics.tfreeBV (Basics.AppT##lqdc##$select##Basics.AppT##2 e)));
et_emp (Basics.tfreeBTV (Basics.AppT##lqdc##$select##Basics.AppT##2 e)))]]]]]] else false)))) else (if (is$Basics.Annot e) then && [(SystemFTyping.checkType lq_tmp$db##0 (Basics.Annot##lqdc##$select##Basics.Annot##1 e) t);
t = (Basics.erase (Basics.Annot##lqdc##$select##Basics.Annot##2 e)));
et_sub (Basics.free (Basics.Annot##lqdc##$select##Basics.Annot##2 e)) (Basics.vbindsF lq_tmp$db##0));
et_sub (Basics.freeTV (Basics.Annot##lqdc##$select##Basics.Annot##2 e)) (Basics.tvbindsF lq_tmp$db##0));
et_emp (Basics.tfreeBV (Basics.Annot##lqdc##$select##Basics.Annot##2 e)));
et_emp (Basics.tfreeBTV (Basics.Annot##lqdc##$select##Basics.Annot##2 e)))]]]]] else && [(t = (Basics.FTBasic Basics.TBool));
ystemFTyping.checkType lq_tmp$db##0 (Basics.Conj##lqdc##$select##Basics.Conj##1 e) (Basics.FTBasic Basics.TBool));
ystemFTyping.checkType lq_tmp$db##0 (Basics.Conj##lqdc##$select##Basics.Conj##2 e) (Basics.FTBasic Basics.TBool))]])))))))) }
define WellFormedness.isWFPoly (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then true else false)))))))) }
define WellFormedness.isWFFunc (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then true else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define WellFormedness.isWellFormed (g : Basics.Env,  t : Basics.Type,  lq_tmp$db##0 : Basics.Kind) : bool = { (if (is$Basics.TRefn t) then (if (is$Basics.TBool (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (SystemFTyping.checkType (Basics.FCons (Basics.fresh_var g) (Basics.FTBasic (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) (Basics.erase_env g)) (Basics.unbind 0 (Basics.fresh_var g) (Basics.TRefn##p t)) (Basics.FTBasic Basics.TBool)) else (if (is$Basics.TInt (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (SystemFTyping.checkType (Basics.FCons (Basics.fresh_var g) (Basics.FTBasic (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) (Basics.erase_env g)) (Basics.unbind 0 (Basics.fresh_var g) (Basics.TRefn##p t)) (Basics.FTBasic Basics.TBool)) else (if (is$Basics.BTV (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then false else (if (Basics.tv_bound_in (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) Basics.Base g) then (SystemFTyping.checkType (Basics.FCons (Basics.fresh_var g) (Basics.FTBasic (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) (Basics.erase_env g)) (Basics.unbind 0 (Basics.fresh_var g) (Basics.TRefn##p t)) (Basics.FTBasic Basics.TBool)) else (if (Basics.tv_bound_in (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) Basics.Star g) then && [(lq_tmp$db##0 = Basics.Star);
asics.TRefn##lqdc##$select##Basics.TRefn##2 t) = Basics.Z);
asics.isTrivial (Basics.TRefn##p t))]] else false))))) else (if (is$Basics.TFunc t) then && [(lq_tmp$db##0 = Basics.Star);
ellFormedness.isWellFormed g (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t) Basics.Star);
ellFormedness.isWellFormed (Basics.Cons (Basics.fresh_var g) (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t) g) (Basics.unbindT (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.fresh_var g) (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t)) Basics.Star)]] else (if (is$Basics.TExists t) then && [(WellFormedness.isWellFormed g (Basics.TExists##lqdc##$select##Basics.TExists##2 t) Basics.Star);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (WellFormedness.isWellFormed (Basics.Cons (Basics.fresh_var g) (Basics.TExists##lqdc##$select##Basics.TExists##2 t) g) (Basics.unbindT (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.fresh_var g) (Basics.TExists##lqdc##$select##Basics.TExists##1 t)) lq_tmp$db##0)] else && [(lq_tmp$db##0 = Basics.Star);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (WellFormedness.isWellFormed (Basics.ConsT (Basics.fresh_var g) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) g) (Basics.unbind_tvT (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.fresh_var g) (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)) Basics.Star)]))) }
define WellFormedness.isWFExis (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then true else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define WellFormedness.foo05 (lq1 : a##a9aa) : (GHC.Maybe.Maybe a##a9aa) = { (GHC.Maybe.Just lq1) }
define WellFormedness.isWFVar1 (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then true else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define WellFormedness.isWFVar3 (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then true else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define GHC.Base.. (lq1 : func(0 , [b##a3Tn;
                                   c##a3To]),  lq2 : func(0 , [a##a3Tp;
                                                               b##a3Tn]),  lq3 : a##a3Tp) : c##a3To = { (lq1 (lq2 lq3)) }
define WellFormedness.isWFVar2 (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then true else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define WellFormedness.isWFRefn (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then true else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define WellFormedness.isWFBase (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then true else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define WellFormedness.isWFKind (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then false else (if (is$WellFormedness.WFVar2 lq1) then false else (if (is$WellFormedness.WFVar3 lq1) then false else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else true)))))))) }
define WellFormedness.isWFVar (lq1 : WellFormedness.WFType) : bool = { (if (is$WellFormedness.WFBase lq1) then false else (if (is$WellFormedness.WFRefn lq1) then false else (if (is$WellFormedness.WFVar1 lq1) then true else (if (is$WellFormedness.WFVar2 lq1) then true else (if (is$WellFormedness.WFVar3 lq1) then true else (if (is$WellFormedness.WFFunc lq1) then false else (if (is$WellFormedness.WFExis lq1) then false else (if (is$WellFormedness.WFPoly lq1) then false else false)))))))) }
define WellFormedness.noDefnsInRefns (lq1 : Basics.Env,  lq2 : Basics.Type) : bool = { (if (is$Basics.TRefn lq2) then (SystemFTyping.noDefnsBaseAppT (Basics.unbind 0 (Basics.fresh_var lq1) (Basics.TRefn##p lq2))) else (if (is$Basics.TFunc lq2) then && [(WellFormedness.noDefnsInRefns lq1 (Basics.TFunc##lqdc##$select##Basics.TFunc##2 lq2));
                                                                                                                                                                                                                                                             (WellFormedness.noDefnsInRefns (Basics.Cons (Basics.fresh_var lq1) (Basics.TFunc##lqdc##$select##Basics.TFunc##2 lq2) lq1) (Basics.unbindT (Basics.TFunc##lqdc##$select##Basics.TFunc##3 lq2) (Basics.fresh_var lq1) (Basics.TFunc##lqdc##$select##Basics.TFunc##1 lq2)))] else (if (is$Basics.TExists lq2) then && [(WellFormedness.noDefnsInRefns lq1 (Basics.TExists##lqdc##$select##Basics.TExists##2 lq2));
ellFormedness.noDefnsInRefns (Basics.Cons (Basics.fresh_var lq1) (Basics.TExists##lqdc##$select##Basics.TExists##2 lq2) lq1) (Basics.unbindT (Basics.TExists##lqdc##$select##Basics.TExists##3 lq2) (Basics.fresh_var lq1) (Basics.TExists##lqdc##$select##Basics.TExists##1 lq2)))] else (WellFormedness.noDefnsInRefns (Basics.ConsT (Basics.fresh_var lq1) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 lq2) lq1) (Basics.unbind_tvT (Basics.TPoly##lqdc##$select##Basics.TPoly##3 lq2) (Basics.fresh_var lq1) (Basics.TPoly##lqdc##$select##Basics.TPoly##1 lq2)))))) }
define SystemFWellFormedness.foo03 (lq1 : a##a6TO) : (GHC.Maybe.Maybe a##a6TO) = { (GHC.Maybe.Just lq1) }
define SystemFWellFormedness.isWFFTFunc (lq1 : SystemFWellFormedness.WFFT) : bool = { (if (is$SystemFWellFormedness.WFFTBasic lq1) then false else (if (is$SystemFWellFormedness.WFFTFV1 lq1) then false else (if (is$SystemFWellFormedness.WFFTFV2 lq1) then false else (if (is$SystemFWellFormedness.WFFTFV3 lq1) then false else (if (is$SystemFWellFormedness.WFFTFunc lq1) then true else (if (is$SystemFWellFormedness.WFFTPoly lq1) then false else false)))))) }
define GHC.Base.. (lq1 : func(0 , [b##a3Tn;
                                   c##a3To]),  lq2 : func(0 , [a##a3Tp;
                                                               b##a3Tn]),  lq3 : a##a3Tp) : c##a3To = { (lq1 (lq2 lq3)) }
define SystemFWellFormedness.isWFFTPoly (lq1 : SystemFWellFormedness.WFFT) : bool = { (if (is$SystemFWellFormedness.WFFTBasic lq1) then false else (if (is$SystemFWellFormedness.WFFTFV1 lq1) then false else (if (is$SystemFWellFormedness.WFFTFV2 lq1) then false else (if (is$SystemFWellFormedness.WFFTFV3 lq1) then false else (if (is$SystemFWellFormedness.WFFTFunc lq1) then false else (if (is$SystemFWellFormedness.WFFTPoly lq1) then true else false)))))) }
define SystemFWellFormedness.isWFFT (g : Basics.FEnv,  t : Basics.FType,  lq_tmp$db##0 : Basics.Kind) : bool = { (if (is$Basics.FTBasic t) then (if (is$Basics.TBool (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then true else (if (is$Basics.TInt (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then true else (if (is$Basics.BTV (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then false else (if (Basics.tv_bound_inF (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) Basics.Base g) then true else (if (Basics.tv_bound_inF (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) Basics.Star g) then (lq_tmp$db##0 = Basics.Star) else false))))) else (if (is$Basics.FTFunc t) then && [(lq_tmp$db##0 = Basics.Star);
ystemFWellFormedness.isWFFT g (Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 t) Basics.Star);
ystemFWellFormedness.isWFFT g (Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 t) Basics.Star)]] else && [(lq_tmp$db##0 = Basics.Star);
ystemFWellFormedness.isWFFT (Basics.FConsT (Basics.fresh_varF g) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 t) g) (Basics.unbindFT (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 t) (Basics.fresh_varF g) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 t)) Basics.Star)])) }
define Basics.withProof (x : a##a3Na,  lq_tmp$db##0 : b##a3Nb) : a##a3Na = { x }
define Basics.unbindT (x : int,  y : int,  t : Basics.Type) : Basics.Type = { (Basics.tsubBV x (Basics.FV y) t) }
define Basics.fv (e : Basics.Expr) : (Set_Set int) = { (if (is$Basics.Bc e) then (Set_empty 0) else (if (is$Basics.Ic e) then (Set_empty 0) else (if (is$Basics.Prim e) then (Set_empty 0) else (if (is$Basics.BV e) then (Set_empty 0) else (if (is$Basics.FV e) then (Set_sng (Basics.FV##lqdc##$select##Basics.FV##1 e)) else (if (is$Basics.Lambda e) then (Basics.fv (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e)) else (if (is$Basics.App e) then (Set_cup (Basics.fv (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.fv (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (Basics.fv (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)) else (if (is$Basics.AppT e) then (Set_cup (Basics.fv (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.free (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (Set_cup (Basics.fv (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.fv (Basics.Let##lqdc##$select##Basics.Let##3 e))) else (if (is$Basics.Annot e) then (Set_cup (Basics.fv (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.free (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Set_cup (Basics.fv (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.fv (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.bound_in (lq1 : int,  lq2 : Basics.Type,  lq3 : Basics.Env) : bool = { (if (is$Basics.Empty lq3) then false else (if (is$Basics.Cons lq3) then (if (lq1 = (Basics.Cons##x lq3)) then (lq2 = (Basics.Cons##t lq3)) else (Basics.bound_in lq1 lq2 (Basics.Cons##g lq3))) else (if (lq1 = (Basics.ConsT##a lq3)) then false else (Basics.bound_in lq1 lq2 (Basics.ConsT##g lq3))))) }
define Basics.vbinds (g : Basics.Env) : (Set_Set int) = { (if (is$Basics.Empty g) then (Set_empty 0) else (if (is$Basics.Cons g) then (Set_cup (Set_sng (Basics.Cons##x g)) (Basics.vbinds (Basics.Cons##g g))) else (Basics.vbinds (Basics.ConsT##g g)))) }
define Basics.fresh_varF (g : Basics.FEnv) : int = { (Basics.maxpListF g) }
define Basics.maxpListF (g : Basics.FEnv) : int = { (if (is$Basics.FEmpty g) then 1 else (if (is$Basics.FCons g) then (Basics.max (1 + (Basics.FCons##x g)) (Basics.maxpListF (Basics.FCons##g g))) else (Basics.max (1 + (Basics.FConsT##a g)) (Basics.maxpListF (Basics.FConsT##g g))))) }
define Basics.fresh_var_excludingF (g : Basics.FEnv,  x : int) : int = { (if (Basics.in_envF x g) then (Basics.maxpListF g) else (Basics.maxpListF (Basics.FCons x (Basics.FTBasic Basics.TBool) g))) }
define Basics.strengthen (p : Basics.Expr,  r : Basics.Expr) : Basics.Expr = { (if (is$Basics.Bc p) then (Basics.Conj p r) else (if (is$Basics.Ic p) then (Basics.Conj p r) else (if (is$Basics.Prim p) then (Basics.Conj p r) else (if (is$Basics.BV p) then (Basics.Conj p r) else (if (is$Basics.FV p) then (Basics.Conj p r) else (if (is$Basics.Lambda p) then (Basics.Conj p r) else (if (is$Basics.App p) then (Basics.Conj p r) else (if (is$Basics.LambdaT p) then (Basics.Conj p r) else (if (is$Basics.AppT p) then (Basics.Conj p r) else (if (is$Basics.Let p) then (Basics.Conj p r) else (if (is$Basics.Annot p) then (Basics.Conj p r) else (Basics.strengthen (Basics.Conj##lqdc##$select##Basics.Conj##1 p) (Basics.strengthen (Basics.Conj##lqdc##$select##Basics.Conj##2 p) r))))))))))))) }
define Basics.isTFunc (lq1 : Basics.Type) : bool = { (if (is$Basics.TRefn lq1) then false else (if (is$Basics.TFunc lq1) then true else (if (is$Basics.TExists lq1) then false else false))) }
define Basics.chgFTV (a : int,  a' : int,  e : Basics.Expr) : Basics.Expr = { (if (is$Basics.Bc e) then (Basics.Bc (Basics.Bc##lqdc##$select##Basics.Bc##1 e)) else (if (is$Basics.Ic e) then (Basics.Ic (Basics.Ic##lqdc##$select##Basics.Ic##1 e)) else (if (is$Basics.Prim e) then (Basics.Prim (Basics.Prim##lqdc##$select##Basics.Prim##1 e)) else (if (is$Basics.BV e) then (Basics.BV (Basics.BV##lqdc##$select##Basics.BV##1 e)) else (if (is$Basics.FV e) then (Basics.FV (Basics.FV##lqdc##$select##Basics.FV##1 e)) else (if (is$Basics.Lambda e) then (Basics.Lambda (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e) (Basics.chgFTV a a' (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e))) else (if (is$Basics.App e) then (Basics.App (Basics.chgFTV a a' (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.chgFTV a a' (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.chgFTV a a' (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e))) else (if (is$Basics.AppT e) then (Basics.AppT (Basics.chgFTV a a' (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.tchgFTV a a' (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (Basics.Let (Basics.Let##lqdc##$select##Basics.Let##1 e) (Basics.chgFTV a a' (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.chgFTV a a' (Basics.Let##lqdc##$select##Basics.Let##3 e))) else (if (is$Basics.Annot e) then (Basics.Annot (Basics.chgFTV a a' (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.tchgFTV a a' (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Basics.Conj (Basics.chgFTV a a' (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.chgFTV a a' (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.lem_refn_is_pred (t : Basics.Type,  b : Basics.Basic,  z : Basics.RVname,  p : Basics.Expr) : Tuple = { GHC.Tuple.$40$$41$ }
define Basics.tvbindsF (g : Basics.FEnv) : (Set_Set int) = { (if (is$Basics.FEmpty g) then (Set_empty 0) else (if (is$Basics.FCons g) then (Basics.tvbindsF (Basics.FCons##g g)) else (Set_cup (Set_sng (Basics.FConsT##a g)) (Basics.tvbindsF (Basics.FConsT##g g))))) }
define Basics.unbind (x : int,  y : int,  e : Basics.Expr) : Basics.Expr = { (Basics.subBV x (Basics.FV y) e) }
define Basics.fresh_var (g : Basics.Env) : int = { (Basics.maxpList g) }
define Basics.ftsubFV (a : int,  t_a : Basics.FType,  t : Basics.FType) : Basics.FType = { (if (is$Basics.FTBasic t) then (if (is$Basics.TBool (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) else (if (is$Basics.TInt (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) else (if (is$Basics.BTV (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) else (if (a = (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t))) then t_a else (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)))))) else (if (is$Basics.FTFunc t) then (Basics.FTFunc (Basics.ftsubFV a t_a (Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 t)) (Basics.ftsubFV a t_a (Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 t))) else (Basics.FTPoly (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 t) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 t) (Basics.ftsubFV a t_a (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 t))))) }
define Basics.unbindFT (a : int,  a' : int,  t : Basics.FType) : Basics.FType = { (Basics.ftsubBV a (Basics.FTBasic (Basics.FTV a')) t) }
define Basics.freeTV (t : Basics.Type) : (Set_Set int) = { (if (is$Basics.TRefn t) then (if (is$Basics.TBool (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.ftv (Basics.TRefn##p t)) else (if (is$Basics.TInt (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.ftv (Basics.TRefn##p t)) else (if (is$Basics.BTV (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.ftv (Basics.TRefn##p t)) else (Set_cup (Set_sng (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t))) (Basics.ftv (Basics.TRefn##p t)))))) else (if (is$Basics.TFunc t) then (Set_cup (Basics.freeTV (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.freeTV (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t))) else (if (is$Basics.TExists t) then (Set_cup (Basics.freeTV (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.freeTV (Basics.TExists##lqdc##$select##Basics.TExists##1 t))) else (Basics.freeTV (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t))))) }
define Basics.subFV (x : int,  v : Basics.Expr,  e : Basics.Expr) : Basics.Expr = { (if (is$Basics.Bc e) then (Basics.Bc (Basics.Bc##lqdc##$select##Basics.Bc##1 e)) else (if (is$Basics.Ic e) then (Basics.Ic (Basics.Ic##lqdc##$select##Basics.Ic##1 e)) else (if (is$Basics.Prim e) then (Basics.Prim (Basics.Prim##lqdc##$select##Basics.Prim##1 e)) else (if (is$Basics.BV e) then (Basics.BV (Basics.BV##lqdc##$select##Basics.BV##1 e)) else (if (is$Basics.FV e) then (if (x = (Basics.FV##lqdc##$select##Basics.FV##1 e)) then v else (Basics.FV (Basics.FV##lqdc##$select##Basics.FV##1 e))) else (if (is$Basics.Lambda e) then (Basics.Lambda (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e) (Basics.subFV x v (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e))) else (if (is$Basics.App e) then (Basics.App (Basics.subFV x v (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.subFV x v (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.subFV x v (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e))) else (if (is$Basics.AppT e) then (Basics.AppT (Basics.subFV x v (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.tsubFV x v (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (Basics.Let (Basics.Let##lqdc##$select##Basics.Let##1 e) (Basics.subFV x v (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.subFV x v (Basics.Let##lqdc##$select##Basics.Let##3 e))) else (if (is$Basics.Annot e) then (Basics.Annot (Basics.subFV x v (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.tsubFV x v (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Basics.Conj (Basics.subFV x v (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.subFV x v (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.max (lq1 : int,  lq2 : int) : int = { (if (lq1 >= lq2) then lq1 else lq2) }
define Basics.ftv (e : Basics.Expr) : (Set_Set int) = { (if (is$Basics.Bc e) then (Set_empty 0) else (if (is$Basics.Ic e) then (Set_empty 0) else (if (is$Basics.Prim e) then (Set_empty 0) else (if (is$Basics.BV e) then (Set_empty 0) else (if (is$Basics.FV e) then (Set_empty 0) else (if (is$Basics.Lambda e) then (Basics.ftv (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e)) else (if (is$Basics.App e) then (Set_cup (Basics.ftv (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.ftv (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (Basics.ftv (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)) else (if (is$Basics.AppT e) then (Set_cup (Basics.ftv (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.freeTV (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (Set_cup (Basics.ftv (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.ftv (Basics.Let##lqdc##$select##Basics.Let##3 e))) else (if (is$Basics.Annot e) then (Set_cup (Basics.ftv (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.freeTV (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Set_cup (Basics.ftv (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.ftv (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.isPred (e : Basics.Expr) : bool = { (if (is$Basics.Bc e) then true else (if (is$Basics.Ic e) then true else (if (is$Basics.Prim e) then true else (if (is$Basics.BV e) then true else (if (is$Basics.FV e) then true else (if (is$Basics.Lambda e) then (Basics.isTerm (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e)) else (if (is$Basics.App e) then && [(Basics.isTerm (Basics.App##lqdc##$select##Basics.App##1 e));
                                                                                                                                                                                                                                                                                                                                                                             (Basics.isTerm (Basics.App##lqdc##$select##Basics.App##2 e))] else (if (is$Basics.LambdaT e) then (Basics.isTerm (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)) else (if (is$Basics.AppT e) then (Basics.isTerm (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) else (if (is$Basics.Let e) then && [(Basics.isTerm (Basics.Let##lqdc##$select##Basics.Let##2 e));
asics.isTerm (Basics.Let##lqdc##$select##Basics.Let##3 e))] else (if (is$Basics.Annot e) then (Basics.isTerm (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) else && [(Basics.isPred (Basics.Conj##lqdc##$select##Basics.Conj##1 e));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (Basics.isPred (Basics.Conj##lqdc##$select##Basics.Conj##2 e))]))))))))))) }
define Basics.tv_in_env (lq1 : int,  lq2 : Basics.Env) : bool = { (Set_mem lq1 (Basics.tvbinds lq2)) }
define Basics.v_in_env (lq1 : int,  lq2 : Basics.Env) : bool = { (Set_mem lq1 (Basics.vbinds lq2)) }
define Basics.bound_inF (lq1 : int,  lq2 : Basics.FType,  lq3 : Basics.FEnv) : bool = { (if (is$Basics.FEmpty lq3) then false else (if (is$Basics.FCons lq3) then (if (lq1 = (Basics.FCons##x lq3)) then (lq2 = (Basics.FCons##t lq3)) else (Basics.bound_inF lq1 lq2 (Basics.FCons##g lq3))) else (if (lq1 = (Basics.FConsT##a lq3)) then false else (Basics.bound_inF lq1 lq2 (Basics.FConsT##g lq3))))) }
define Basics.tsubFTV (a : int,  t_a : Basics.Type,  t : Basics.Type) : Basics.Type = { (if (is$Basics.TRefn t) then (if (is$Basics.TBool (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subFTV a t_a (Basics.TRefn##p t))) else (if (is$Basics.TInt (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subFTV a t_a (Basics.TRefn##p t))) else (if (is$Basics.BTV (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subFTV a t_a (Basics.TRefn##p t))) else (if (a = (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t))) then (Basics.push (Basics.subFTV a t_a (Basics.TRefn##p t)) t_a) else (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subFTV a t_a (Basics.TRefn##p t))))))) else (if (is$Basics.TFunc t) then (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.tsubFTV a t_a (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.tsubFTV a t_a (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t))) else (if (is$Basics.TExists t) then (Basics.TExists (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.tsubFTV a t_a (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.tsubFTV a t_a (Basics.TExists##lqdc##$select##Basics.TExists##1 t))) else (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.tsubFTV a t_a (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)))))) }
define Basics.bindsF (lq1 : Basics.FEnv) : (Set_Set int) = { (if (is$Basics.FEmpty lq1) then (Set_empty 0) else (if (is$Basics.FCons lq1) then (Set_cup (Set_sng (Basics.FCons##x lq1)) (Basics.bindsF (Basics.FCons##g lq1))) else (Set_cup (Set_sng (Basics.FConsT##a lq1)) (Basics.bindsF (Basics.FConsT##g lq1))))) }
define Basics.binds (lq1 : Basics.Env) : (Set_Set int) = { (if (is$Basics.Empty lq1) then (Set_empty 0) else (if (is$Basics.Cons lq1) then (Set_cup (Set_sng (Basics.Cons##x lq1)) (Basics.binds (Basics.Cons##g lq1))) else (Set_cup (Set_sng (Basics.ConsT##a lq1)) (Basics.binds (Basics.ConsT##g lq1))))) }
define Basics.kind_for_tv (a : int,  g : Basics.Env) : Basics.Kind = { (if (is$Basics.Cons g) then (Basics.kind_for_tv a (Basics.Cons##g g)) else (if (a = (Basics.ConsT##a g)) then (Basics.ConsT##k g) else (Basics.kind_for_tv a (Basics.ConsT##g g)))) }
define Basics.subFTV (a : int,  t : Basics.Type,  e : Basics.Expr) : Basics.Expr = { (if (is$Basics.Bc e) then (Basics.Bc (Basics.Bc##lqdc##$select##Basics.Bc##1 e)) else (if (is$Basics.Ic e) then (Basics.Ic (Basics.Ic##lqdc##$select##Basics.Ic##1 e)) else (if (is$Basics.Prim e) then (Basics.Prim (Basics.Prim##lqdc##$select##Basics.Prim##1 e)) else (if (is$Basics.BV e) then (Basics.BV (Basics.BV##lqdc##$select##Basics.BV##1 e)) else (if (is$Basics.FV e) then (Basics.FV (Basics.FV##lqdc##$select##Basics.FV##1 e)) else (if (is$Basics.Lambda e) then (Basics.Lambda (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e) (Basics.subFTV a t (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e))) else (if (is$Basics.App e) then (Basics.App (Basics.subFTV a t (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.subFTV a t (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.subFTV a t (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e))) else (if (is$Basics.AppT e) then (Basics.AppT (Basics.subFTV a t (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.tsubFTV a t (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (Basics.Let (Basics.Let##lqdc##$select##Basics.Let##1 e) (Basics.subFTV a t (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.subFTV a t (Basics.Let##lqdc##$select##Basics.Let##3 e))) else (if (is$Basics.Annot e) then (Basics.Annot (Basics.subFTV a t (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.tsubFTV a t (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Basics.Conj (Basics.subFTV a t (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.subFTV a t (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.lookupF (lq1 : int,  lq2 : Basics.FEnv) : (GHC.Maybe.Maybe Basics.FType) = { (if (is$Basics.FEmpty lq2) then GHC.Maybe.Nothing else (if (is$Basics.FCons lq2) then (if (lq1 = (Basics.FCons##x lq2)) then (GHC.Maybe.Just (Basics.FCons##t lq2)) else (Basics.lookupF lq1 (Basics.FCons##g lq2))) else (if (lq1 = (Basics.FConsT##a lq2)) then GHC.Maybe.Nothing else (Basics.lookupF lq1 (Basics.FConsT##g lq2))))) }
define Basics.isTPoly (lq1 : Basics.Type) : bool = { (if (is$Basics.TRefn lq1) then false else (if (is$Basics.TFunc lq1) then false else (if (is$Basics.TExists lq1) then false else true))) }
define Basics.isBTV (lq1 : Basics.Basic) : bool = { (if (is$Basics.TBool lq1) then false else (if (is$Basics.TInt lq1) then false else (if (is$Basics.BTV lq1) then true else false))) }
define Basics.ffreeTV (t : Basics.FType) : (Set_Set int) = { (if (is$Basics.FTBasic t) then (if (is$Basics.TBool (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Set_empty 0) else (if (is$Basics.TInt (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Set_empty 0) else (if (is$Basics.BTV (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Set_empty 0) else (Set_sng (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)))))) else (if (is$Basics.FTFunc t) then (Set_cup (Basics.ffreeTV (Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 t)) (Basics.ffreeTV (Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 t))) else (Basics.ffreeTV (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 t)))) }
define Basics.isTerm (e : Basics.Expr) : bool = { (if (is$Basics.Bc e) then true else (if (is$Basics.Ic e) then true else (if (is$Basics.Prim e) then true else (if (is$Basics.BV e) then true else (if (is$Basics.FV e) then true else (if (is$Basics.Lambda e) then (Basics.isTerm (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e)) else (if (is$Basics.App e) then && [(Basics.isTerm (Basics.App##lqdc##$select##Basics.App##1 e));
                                                                                                                                                                                                                                                                                                                                                                             (Basics.isTerm (Basics.App##lqdc##$select##Basics.App##2 e))] else (if (is$Basics.LambdaT e) then (Basics.isTerm (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)) else (if (is$Basics.AppT e) then (Basics.isTerm (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) else (if (is$Basics.Let e) then && [(Basics.isTerm (Basics.Let##lqdc##$select##Basics.Let##2 e));
asics.isTerm (Basics.Let##lqdc##$select##Basics.Let##3 e))] else (if (is$Basics.Annot e) then (Basics.isTerm (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) else false))))))))))) }
define Basics.tchgFTV (a : int,  a' : int,  t : Basics.Type) : Basics.Type = { (if (is$Basics.TRefn t) then (if (is$Basics.TBool (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.chgFTV a a' (Basics.TRefn##p t))) else (if (is$Basics.TInt (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.chgFTV a a' (Basics.TRefn##p t))) else (if (is$Basics.BTV (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.chgFTV a a' (Basics.TRefn##p t))) else (if (a = (Basics.FTV##lqdc##$select##Basics.FTV##1 (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t))) then (Basics.TRefn (Basics.FTV a') (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.chgFTV a a' (Basics.TRefn##p t))) else (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.chgFTV a a' (Basics.TRefn##p t))))))) else (if (is$Basics.TFunc t) then (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.tchgFTV a a' (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.tchgFTV a a' (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t))) else (if (is$Basics.TExists t) then (Basics.TExists (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.tchgFTV a a' (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.tchgFTV a a' (Basics.TExists##lqdc##$select##Basics.TExists##1 t))) else (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.tchgFTV a a' (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)))))) }
define Basics.tv_bound_inF (lq1 : int,  lq2 : Basics.Kind,  lq3 : Basics.FEnv) : bool = { (if (is$Basics.FEmpty lq3) then false else (if (is$Basics.FCons lq3) then (if (lq1 = (Basics.FCons##x lq3)) then false else (Basics.tv_bound_inF lq1 lq2 (Basics.FCons##g lq3))) else (if (lq1 = (Basics.FConsT##a lq3)) then (lq2 = (Basics.FConsT##k lq3)) else (Basics.tv_bound_inF lq1 lq2 (Basics.FConsT##g lq3))))) }
define Basics.ffreeBV (t : Basics.FType) : (Set_Set int) = { (if (is$Basics.FTBasic t) then (if (is$Basics.TBool (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Set_empty 0) else (if (is$Basics.TInt (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Set_empty 0) else (if (is$Basics.BTV (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Set_sng (Basics.BTV##lqdc##$select##Basics.BTV##1 (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t))) else (Set_empty 0)))) else (if (is$Basics.FTFunc t) then (Set_cup (Basics.ffreeBV (Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 t)) (Basics.ffreeBV (Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 t))) else (Set_dif (Basics.ffreeBV (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 t)) (Set_sng (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 t))))) }
define Basics.lem_value_term (v : Basics.Expr) : Tuple = { (if (is$Basics.Bc v) then GHC.Tuple.$40$$41$ else (if (is$Basics.Ic v) then GHC.Tuple.$40$$41$ else (if (is$Basics.Prim v) then GHC.Tuple.$40$$41$ else (if (is$Basics.BV v) then GHC.Tuple.$40$$41$ else (if (is$Basics.FV v) then GHC.Tuple.$40$$41$ else (if (is$Basics.Lambda v) then GHC.Tuple.$40$$41$ else GHC.Tuple.$40$$41$)))))) }
define Basics.kind_for_tvF (a : int,  g : Basics.FEnv) : Basics.Kind = { (if (is$Basics.FCons g) then (Basics.kind_for_tvF a (Basics.FCons##g g)) else (if (a = (Basics.FConsT##a g)) then (Basics.FConsT##k g) else (Basics.kind_for_tvF a (Basics.FConsT##g g)))) }
define Basics.unbind_tv (a : int,  a' : int,  e : Basics.Expr) : Basics.Expr = { (if (is$Basics.Bc e) then (Basics.Bc (Basics.Bc##lqdc##$select##Basics.Bc##1 e)) else (if (is$Basics.Ic e) then (Basics.Ic (Basics.Ic##lqdc##$select##Basics.Ic##1 e)) else (if (is$Basics.Prim e) then (Basics.Prim (Basics.Prim##lqdc##$select##Basics.Prim##1 e)) else (if (is$Basics.BV e) then (Basics.BV (Basics.BV##lqdc##$select##Basics.BV##1 e)) else (if (is$Basics.FV e) then (Basics.FV (Basics.FV##lqdc##$select##Basics.FV##1 e)) else (if (is$Basics.Lambda e) then (Basics.Lambda (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e) (Basics.unbind_tv a a' (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e))) else (if (is$Basics.App e) then (Basics.App (Basics.unbind_tv a a' (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.unbind_tv a a' (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (if (a = (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e)) then (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)) else (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.unbind_tv a a' (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)))) else (if (is$Basics.AppT e) then (Basics.AppT (Basics.unbind_tv a a' (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.unbind_tvT a a' (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (Basics.Let (Basics.Let##lqdc##$select##Basics.Let##1 e) (Basics.unbind_tv a a' (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.unbind_tv a a' (Basics.Let##lqdc##$select##Basics.Let##3 e))) else (if (is$Basics.Annot e) then (Basics.Annot (Basics.unbind_tv a a' (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.unbind_tvT a a' (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Basics.Conj (Basics.unbind_tv a a' (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.unbind_tv a a' (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.subBV (x : int,  v : Basics.Expr,  e : Basics.Expr) : Basics.Expr = { (if (is$Basics.Bc e) then (Basics.Bc (Basics.Bc##lqdc##$select##Basics.Bc##1 e)) else (if (is$Basics.Ic e) then (Basics.Ic (Basics.Ic##lqdc##$select##Basics.Ic##1 e)) else (if (is$Basics.Prim e) then (Basics.Prim (Basics.Prim##lqdc##$select##Basics.Prim##1 e)) else (if (is$Basics.BV e) then (if (x = (Basics.BV##lqdc##$select##Basics.BV##1 e)) then v else (Basics.BV (Basics.BV##lqdc##$select##Basics.BV##1 e))) else (if (is$Basics.FV e) then (Basics.FV (Basics.FV##lqdc##$select##Basics.FV##1 e)) else (if (is$Basics.Lambda e) then (if (x = (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e)) then (Basics.Lambda (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e) (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e)) else (Basics.Lambda (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e) (Basics.subBV x v (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e)))) else (if (is$Basics.App e) then (Basics.App (Basics.subBV x v (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.subBV x v (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.subBV x v (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e))) else (if (is$Basics.AppT e) then (Basics.AppT (Basics.subBV x v (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.tsubBV x v (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (if (x = (Basics.Let##lqdc##$select##Basics.Let##1 e)) then (Basics.Let (Basics.Let##lqdc##$select##Basics.Let##1 e) (Basics.subBV x v (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.Let##lqdc##$select##Basics.Let##3 e)) else (Basics.Let (Basics.Let##lqdc##$select##Basics.Let##1 e) (Basics.subBV x v (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.subBV x v (Basics.Let##lqdc##$select##Basics.Let##3 e)))) else (if (is$Basics.Annot e) then (Basics.Annot (Basics.subBV x v (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.tsubBV x v (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Basics.Conj (Basics.subBV x v (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.subBV x v (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.lem_maxp_list1 (g : Basics.Env,  x : int) : bool = { (if (is$Basics.Empty g) then true else (if (is$Basics.Cons g) then (if (is$Basics.Empty (Basics.Cons##g g)) then true else (if (is$Basics.Cons (Basics.Cons##g g)) then (if (x > (Basics.Cons##x g)) then true else true) else (if (x > (Basics.Cons##x g)) then true else true))) else (if (is$Basics.Empty (Basics.ConsT##g g)) then true else (if (is$Basics.Cons (Basics.ConsT##g g)) then (if (x > (Basics.ConsT##a g)) then true else true) else (if (x > (Basics.ConsT##a g)) then true else true))))) }
define Basics.subBTV (a : int,  t : Basics.Type,  e : Basics.Expr) : Basics.Expr = { (if (is$Basics.Bc e) then (Basics.Bc (Basics.Bc##lqdc##$select##Basics.Bc##1 e)) else (if (is$Basics.Ic e) then (Basics.Ic (Basics.Ic##lqdc##$select##Basics.Ic##1 e)) else (if (is$Basics.Prim e) then (Basics.Prim (Basics.Prim##lqdc##$select##Basics.Prim##1 e)) else (if (is$Basics.BV e) then (Basics.BV (Basics.BV##lqdc##$select##Basics.BV##1 e)) else (if (is$Basics.FV e) then (Basics.FV (Basics.FV##lqdc##$select##Basics.FV##1 e)) else (if (is$Basics.Lambda e) then (Basics.Lambda (Basics.Lambda##lqdc##$select##Basics.Lambda##1 e) (Basics.subBTV a t (Basics.Lambda##lqdc##$select##Basics.Lambda##2 e))) else (if (is$Basics.App e) then (Basics.App (Basics.subBTV a t (Basics.App##lqdc##$select##Basics.App##1 e)) (Basics.subBTV a t (Basics.App##lqdc##$select##Basics.App##2 e))) else (if (is$Basics.LambdaT e) then (if (a = (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e)) then (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)) else (Basics.LambdaT (Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 e) (Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 e) (Basics.subBTV a t (Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 e)))) else (if (is$Basics.AppT e) then (Basics.AppT (Basics.subBTV a t (Basics.AppT##lqdc##$select##Basics.AppT##1 e)) (Basics.tsubBTV a t (Basics.AppT##lqdc##$select##Basics.AppT##2 e))) else (if (is$Basics.Let e) then (Basics.Let (Basics.Let##lqdc##$select##Basics.Let##1 e) (Basics.subBTV a t (Basics.Let##lqdc##$select##Basics.Let##2 e)) (Basics.subBTV a t (Basics.Let##lqdc##$select##Basics.Let##3 e))) else (if (is$Basics.Annot e) then (Basics.Annot (Basics.subBTV a t (Basics.Annot##lqdc##$select##Basics.Annot##1 e)) (Basics.tsubBTV a t (Basics.Annot##lqdc##$select##Basics.Annot##2 e))) else (Basics.Conj (Basics.subBTV a t (Basics.Conj##lqdc##$select##Basics.Conj##1 e)) (Basics.subBTV a t (Basics.Conj##lqdc##$select##Basics.Conj##2 e)))))))))))))) }
define Basics.tsubBTV (a : int,  t_a : Basics.Type,  t : Basics.Type) : Basics.Type = { (if (is$Basics.TRefn t) then (if (is$Basics.TBool (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subBTV a t_a (Basics.TRefn##p t))) else (if (is$Basics.TInt (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subBTV a t_a (Basics.TRefn##p t))) else (if (is$Basics.BTV (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (if (a = (Basics.BTV##lqdc##$select##Basics.BTV##1 (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t))) then (Basics.push (Basics.subBTV a t_a (Basics.TRefn##p t)) t_a) else (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subBTV a t_a (Basics.TRefn##p t)))) else (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subBTV a t_a (Basics.TRefn##p t)))))) else (if (is$Basics.TFunc t) then (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.tsubBTV a t_a (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.tsubBTV a t_a (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t))) else (if (is$Basics.TExists t) then (Basics.TExists (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.tsubBTV a t_a (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.tsubBTV a t_a (Basics.TExists##lqdc##$select##Basics.TExists##1 t))) else (if (a = (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t)) then (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)) else (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.tsubBTV a t_a (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t))))))) }
define Basics.erase_env (g : Basics.Env) : Basics.FEnv = { (if (is$Basics.Empty g) then Basics.FEmpty else (if (is$Basics.Cons g) then (Basics.FCons (Basics.Cons##x g) (Basics.erase (Basics.Cons##t g)) (Basics.erase_env (Basics.Cons##g g))) else (Basics.FConsT (Basics.ConsT##a g) (Basics.ConsT##k g) (Basics.erase_env (Basics.ConsT##g g))))) }
define Basics.erase (lq1 : Basics.Type) : Basics.FType = { (if (is$Basics.TRefn lq1) then (Basics.FTBasic (Basics.TRefn##lqdc##$select##Basics.TRefn##3 lq1)) else (if (is$Basics.TFunc lq1) then (Basics.FTFunc (Basics.erase (Basics.TFunc##lqdc##$select##Basics.TFunc##2 lq1)) (Basics.erase (Basics.TFunc##lqdc##$select##Basics.TFunc##1 lq1))) else (if (is$Basics.TExists lq1) then (Basics.erase (Basics.TExists##lqdc##$select##Basics.TExists##1 lq1)) else (Basics.FTPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 lq1) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 lq1) (Basics.erase (Basics.TPoly##lqdc##$select##Basics.TPoly##1 lq1)))))) }
define Basics.isTRefn (lq1 : Basics.Type) : bool = { (if (is$Basics.TRefn lq1) then true else (if (is$Basics.TFunc lq1) then false else (if (is$Basics.TExists lq1) then false else false))) }
define Basics.isValue (e : Basics.Expr) : bool = { (if (is$Basics.Bc e) then true else (if (is$Basics.Ic e) then true else (if (is$Basics.Prim e) then true else (if (is$Basics.BV e) then true else (if (is$Basics.FV e) then true else (if (is$Basics.Lambda e) then true else (if (is$Basics.App e) then false else (if (is$Basics.LambdaT e) then true else (if (is$Basics.AppT e) then false else (if (is$Basics.Let e) then false else (if (is$Basics.Annot e) then false else false))))))))))) }
define Basics.tvbinds (g : Basics.Env) : (Set_Set int) = { (if (is$Basics.Empty g) then (Set_empty 0) else (if (is$Basics.Cons g) then (Basics.tvbinds (Basics.Cons##g g)) else (Set_cup (Set_sng (Basics.ConsT##a g)) (Basics.tvbinds (Basics.ConsT##g g))))) }
define Basics.lem_term_pred (e : Basics.Expr) : Tuple = { (if (is$Basics.Bc e) then GHC.Tuple.$40$$41$ else (if (is$Basics.Ic e) then GHC.Tuple.$40$$41$ else (if (is$Basics.Prim e) then GHC.Tuple.$40$$41$ else (if (is$Basics.BV e) then GHC.Tuple.$40$$41$ else (if (is$Basics.FV e) then GHC.Tuple.$40$$41$ else (if (is$Basics.Lambda e) then GHC.Tuple.$40$$41$ else (if (is$Basics.App e) then GHC.Tuple.$40$$41$ else (if (is$Basics.LambdaT e) then GHC.Tuple.$40$$41$ else (if (is$Basics.AppT e) then GHC.Tuple.$40$$41$ else (if (is$Basics.Let e) then GHC.Tuple.$40$$41$ else GHC.Tuple.$40$$41$)))))))))) }
define Basics.unbind_tvT (a : int,  a' : int,  t : Basics.Type) : Basics.Type = { (if (is$Basics.TRefn t) then (if (is$Basics.TBool (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.unbind_tv a a' (Basics.TRefn##p t))) else (if (is$Basics.TInt (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.unbind_tv a a' (Basics.TRefn##p t))) else (if (is$Basics.BTV (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t)) then (if (a = (Basics.BTV##lqdc##$select##Basics.BTV##1 (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t))) then (Basics.TRefn (Basics.FTV a') (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.unbind_tv a a' (Basics.TRefn##p t))) else (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.unbind_tv a a' (Basics.TRefn##p t)))) else (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.unbind_tv a a' (Basics.TRefn##p t)))))) else (if (is$Basics.TFunc t) then (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.unbind_tvT a a' (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.unbind_tvT a a' (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t))) else (if (is$Basics.TExists t) then (Basics.TExists (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.unbind_tvT a a' (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.unbind_tvT a a' (Basics.TExists##lqdc##$select##Basics.TExists##1 t))) else (if (a = (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t)) then (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)) else (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.unbind_tvT a a' (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t))))))) }
define Basics.noExists (lq1 : Basics.Type) : bool = { (if (is$Basics.TRefn lq1) then true else (if (is$Basics.TFunc lq1) then && [(Basics.noExists (Basics.TFunc##lqdc##$select##Basics.TFunc##2 lq1));
                                                                                                                                  (Basics.noExists (Basics.TFunc##lqdc##$select##Basics.TFunc##1 lq1))] else (if (is$Basics.TExists lq1) then false else (Basics.noExists (Basics.TPoly##lqdc##$select##Basics.TPoly##1 lq1))))) }
define GHC.Base.. (lq1 : func(0 , [b##a3Tn;
                                   c##a3To]),  lq2 : func(0 , [a##a3Tp;
                                                               b##a3Tn]),  lq3 : a##a3Tp) : c##a3To = { (lq1 (lq2 lq3)) }
define Basics.isTrivial (lq1 : Basics.Expr) : bool = { (if (is$Basics.Bc lq1) then (if (Basics.Bc##lqdc##$select##Basics.Bc##1 lq1) then true else false) else (if (is$Basics.Ic lq1) then false else (if (is$Basics.Prim lq1) then false else (if (is$Basics.BV lq1) then false else (if (is$Basics.FV lq1) then false else (if (is$Basics.Lambda lq1) then false else (if (is$Basics.App lq1) then false else (if (is$Basics.LambdaT lq1) then false else (if (is$Basics.AppT lq1) then false else (if (is$Basics.Let lq1) then false else (if (is$Basics.Annot lq1) then false else && [((Basics.Conj##lqdc##$select##Basics.Conj##1 lq1) = (Basics.Bc true));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Basics.isTrivial (Basics.Conj##lqdc##$select##Basics.Conj##2 lq1))]))))))))))) }
define Basics.lem_maxp_listF (g : Basics.FEnv,  x : int) : bool = { (if (is$Basics.FEmpty g) then true else (if (is$Basics.FCons g) then (if (is$Basics.FEmpty (Basics.FCons##g g)) then true else (if (is$Basics.FCons (Basics.FCons##g g)) then (if (x > (Basics.FCons##x g)) then true else true) else (if (x > (Basics.FCons##x g)) then true else true))) else (if (is$Basics.FEmpty (Basics.FConsT##g g)) then true else (if (is$Basics.FCons (Basics.FConsT##g g)) then (if (x > (Basics.FConsT##a g)) then true else true) else (if (x > (Basics.FConsT##a g)) then true else true))))) }
define Basics.in_envF (lq1 : int,  lq2 : Basics.FEnv) : bool = { (Set_mem lq1 (Basics.bindsF lq2)) }
define Basics.fresh_var_excluding (g : Basics.Env,  x : int) : int = { (if (Basics.in_env x g) then (Basics.maxpList g) else (Basics.maxpList (Basics.Cons x (Basics.TRefn Basics.TBool Basics.Z (Basics.Bc true)) g))) }
define Basics.vbindsF (g : Basics.FEnv) : (Set_Set int) = { (if (is$Basics.FEmpty g) then (Set_empty 0) else (if (is$Basics.FCons g) then (Set_cup (Set_sng (Basics.FCons##x g)) (Basics.vbindsF (Basics.FCons##g g))) else (Basics.vbindsF (Basics.FConsT##g g)))) }
define Basics.lem_value_pred (v : Basics.Expr) : Tuple = { (if (is$Basics.Bc v) then GHC.Tuple.$40$$41$ else (if (is$Basics.Ic v) then GHC.Tuple.$40$$41$ else (if (is$Basics.Prim v) then GHC.Tuple.$40$$41$ else (if (is$Basics.BV v) then GHC.Tuple.$40$$41$ else (if (is$Basics.FV v) then GHC.Tuple.$40$$41$ else (if (is$Basics.Lambda v) then GHC.Tuple.$40$$41$ else GHC.Tuple.$40$$41$)))))) }
define Basics.tv_bound_in (lq1 : int,  lq2 : Basics.Kind,  lq3 : Basics.Env) : bool = { (if (is$Basics.Empty lq3) then false else (if (is$Basics.Cons lq3) then (if (lq1 = (Basics.Cons##x lq3)) then false else (Basics.tv_bound_in lq1 lq2 (Basics.Cons##g lq3))) else (if (lq1 = (Basics.ConsT##a lq3)) then (lq2 = (Basics.ConsT##k lq3)) else (Basics.tv_bound_in lq1 lq2 (Basics.ConsT##g lq3))))) }
define Basics.tsubFV (x : int,  e : Basics.Expr,  t : Basics.Type) : Basics.Type = { (if (is$Basics.TRefn t) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subFV x e (Basics.TRefn##p t))) else (if (is$Basics.TFunc t) then (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.tsubFV x e (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.tsubFV x e (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t))) else (if (is$Basics.TExists t) then (Basics.TExists (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.tsubFV x e (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.tsubFV x e (Basics.TExists##lqdc##$select##Basics.TExists##1 t))) else (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.tsubFV x e (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)))))) }
define Basics.ftsubBV (a : int,  t_a : Basics.FType,  t : Basics.FType) : Basics.FType = { (if (is$Basics.FTBasic t) then (if (is$Basics.TBool (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) else (if (is$Basics.TInt (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) else (if (is$Basics.BTV (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t)) then (if (a = (Basics.BTV##lqdc##$select##Basics.BTV##1 (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t))) then t_a else (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t))) else (Basics.FTBasic (Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 t))))) else (if (is$Basics.FTFunc t) then (Basics.FTFunc (Basics.ftsubBV a t_a (Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 t)) (Basics.ftsubBV a t_a (Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 t))) else (if (a = (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 t)) then (Basics.FTPoly (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 t) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 t) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 t)) else (Basics.FTPoly (Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 t) (Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 t) (Basics.ftsubBV a t_a (Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 t)))))) }
define Basics.free (t : Basics.Type) : (Set_Set int) = { (if (is$Basics.TRefn t) then (Basics.fv (Basics.TRefn##p t)) else (if (is$Basics.TFunc t) then (Set_cup (Basics.free (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.free (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t))) else (if (is$Basics.TExists t) then (Set_cup (Basics.free (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.free (Basics.TExists##lqdc##$select##Basics.TExists##1 t))) else (Basics.free (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t))))) }
define Basics.isConjunction (lq1 : Basics.Expr) : bool = { (if (is$Basics.Bc lq1) then false else (if (is$Basics.Ic lq1) then false else (if (is$Basics.Prim lq1) then false else (if (is$Basics.BV lq1) then false else (if (is$Basics.FV lq1) then false else (if (is$Basics.Lambda lq1) then false else (if (is$Basics.App lq1) then false else (if (is$Basics.LambdaT lq1) then false else (if (is$Basics.AppT lq1) then false else (if (is$Basics.Let lq1) then false else (if (is$Basics.Annot lq1) then false else true))))))))))) }
define Basics.maxpList (g : Basics.Env) : int = { (if (is$Basics.Empty g) then 1 else (if (is$Basics.Cons g) then (Basics.max (1 + (Basics.Cons##x g)) (Basics.maxpList (Basics.Cons##g g))) else (Basics.max (1 + (Basics.ConsT##a g)) (Basics.maxpList (Basics.ConsT##g g))))) }
define Basics.tsubBV (x : int,  v_x : Basics.Expr,  t : Basics.Type) : Basics.Type = { (if (is$Basics.TRefn t) then (if (x = 0) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.TRefn##p t)) else (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.subBV x v_x (Basics.TRefn##p t)))) else (if (is$Basics.TFunc t) then (if (x = (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t)) then (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.tsubBV x v_x (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t)) else (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.tsubBV x v_x (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t)) (Basics.tsubBV x v_x (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t)))) else (if (is$Basics.TExists t) then (if (x = (Basics.TExists##lqdc##$select##Basics.TExists##3 t)) then (Basics.TExists (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.tsubBV x v_x (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.TExists##lqdc##$select##Basics.TExists##1 t)) else (Basics.TExists (Basics.TExists##lqdc##$select##Basics.TExists##3 t) (Basics.tsubBV x v_x (Basics.TExists##lqdc##$select##Basics.TExists##2 t)) (Basics.tsubBV x v_x (Basics.TExists##lqdc##$select##Basics.TExists##1 t)))) else (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.tsubBV x v_x (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)))))) }
define Basics.isTExists (lq1 : Basics.Type) : bool = { (if (is$Basics.TRefn lq1) then false else (if (is$Basics.TFunc lq1) then false else (if (is$Basics.TExists lq1) then true else false))) }
define Basics.in_env (lq1 : int,  lq2 : Basics.Env) : bool = { (Set_mem lq1 (Basics.binds lq2)) }
define Basics.push (p : Basics.Expr,  t : Basics.Type) : Basics.Type = { (if (is$Basics.TRefn t) then (Basics.TRefn (Basics.TRefn##lqdc##$select##Basics.TRefn##3 t) (Basics.TRefn##lqdc##$select##Basics.TRefn##2 t) (Basics.strengthen p (Basics.TRefn##p t))) else (if (is$Basics.TFunc t) then (Basics.TFunc (Basics.TFunc##lqdc##$select##Basics.TFunc##3 t) (Basics.TFunc##lqdc##$select##Basics.TFunc##2 t) (Basics.TFunc##lqdc##$select##Basics.TFunc##1 t)) else (Basics.TPoly (Basics.TPoly##lqdc##$select##Basics.TPoly##3 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##2 t) (Basics.TPoly##lqdc##$select##Basics.TPoly##1 t)))) }
match tail GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  (lq_tmp$x##1043)
match head GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  (lq_tmp$x##1042)
match lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  (lq_tmp$x##1043)
match lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  (lq_tmp$x##1042)
match is$36$GHC.Types.$58$ GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  (true)
match is$36$GHC.Types.$91$$93$ GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  (false)
match len GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  ((1 + (len lq_tmp$x##1043)))
match listElts GHC.Types.$58$ lq_tmp$x##1042 lq_tmp$x##1043  =  ((Set_cup (Set_sng lq_tmp$x##1042) (listElts lq_tmp$x##1043)))
match is$GHC.Maybe.Just GHC.Maybe.Nothing  =  (false)
match is$GHC.Maybe.Nothing GHC.Maybe.Nothing  =  (true)
match is$GHC.Maybe.Just GHC.Maybe.Nothing  =  (false)
match is$GHC.Maybe.Nothing GHC.Maybe.Nothing  =  (true)
match is$GHC.Maybe.Just GHC.Maybe.Nothing  =  (false)
match is$GHC.Maybe.Nothing GHC.Maybe.Nothing  =  (true)
match is$GHC.Maybe.Just GHC.Maybe.Nothing  =  (false)
match is$GHC.Maybe.Nothing GHC.Maybe.Nothing  =  (true)
match is$GHC.Maybe.Just GHC.Maybe.Nothing  =  (false)
match is$GHC.Maybe.Nothing GHC.Maybe.Nothing  =  (true)
match isJust GHC.Maybe.Nothing  =  (false)
match GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 GHC.Maybe.Just lq_tmp$x##867  =  (lq_tmp$x##867)
match is$GHC.Maybe.Just GHC.Maybe.Just lq_tmp$x##867  =  (true)
match is$GHC.Maybe.Nothing GHC.Maybe.Just lq_tmp$x##867  =  (false)
match GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 GHC.Maybe.Just lq_tmp$x##867  =  (lq_tmp$x##867)
match is$GHC.Maybe.Just GHC.Maybe.Just lq_tmp$x##867  =  (true)
match is$GHC.Maybe.Nothing GHC.Maybe.Just lq_tmp$x##867  =  (false)
match GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 GHC.Maybe.Just lq_tmp$x##867  =  (lq_tmp$x##867)
match is$GHC.Maybe.Just GHC.Maybe.Just lq_tmp$x##867  =  (true)
match is$GHC.Maybe.Nothing GHC.Maybe.Just lq_tmp$x##867  =  (false)
match GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 GHC.Maybe.Just lq_tmp$x##867  =  (lq_tmp$x##867)
match is$GHC.Maybe.Just GHC.Maybe.Just lq_tmp$x##867  =  (true)
match is$GHC.Maybe.Nothing GHC.Maybe.Just lq_tmp$x##867  =  (false)
match GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 GHC.Maybe.Just lq_tmp$x##867  =  (lq_tmp$x##867)
match is$GHC.Maybe.Just GHC.Maybe.Just lq_tmp$x##867  =  (true)
match is$GHC.Maybe.Nothing GHC.Maybe.Just lq_tmp$x##867  =  (false)
match isJust GHC.Maybe.Just lq_tmp$x##867  =  (true)
match fromJust GHC.Maybe.Just lq_tmp$x##867  =  (lq_tmp$x##867)
match is$36$GHC.Types.$58$ GHC.Types.$91$$93$  =  (false)
match is$36$GHC.Types.$91$$93$ GHC.Types.$91$$93$  =  (true)
match len GHC.Types.$91$$93$  =  (0)
match x_Tuple22 GHC.Tuple.$40$$44$$41$ lq_tmp$x##1038 lq_tmp$x##1039  =  (lq_tmp$x##1039)
match x_Tuple21 GHC.Tuple.$40$$44$$41$ lq_tmp$x##1038 lq_tmp$x##1039  =  (lq_tmp$x##1038)
match lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 GHC.Tuple.$40$$44$$41$ lq_tmp$x##1038 lq_tmp$x##1039  =  (lq_tmp$x##1039)
match lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 GHC.Tuple.$40$$44$$41$ lq_tmp$x##1038 lq_tmp$x##1039  =  (lq_tmp$x##1038)
match is$36$GHC.Tuple.$40$$44$$41$ GHC.Tuple.$40$$44$$41$ lq_tmp$x##1038 lq_tmp$x##1039  =  (true)
match snd GHC.Tuple.$40$$44$$41$ lq_tmp$x##1038 lq_tmp$x##1039  =  (lq_tmp$x##1039)
match fst GHC.Tuple.$40$$44$$41$ lq_tmp$x##1038 lq_tmp$x##1039  =  (lq_tmp$x##1038)
match x_Tuple33 GHC.Tuple.$40$$44$$44$$41$ lq_tmp$x##961 lq_tmp$x##962 lq_tmp$x##963  =  (lq_tmp$x##963)
match x_Tuple32 GHC.Tuple.$40$$44$$44$$41$ lq_tmp$x##961 lq_tmp$x##962 lq_tmp$x##963  =  (lq_tmp$x##962)
match x_Tuple31 GHC.Tuple.$40$$44$$44$$41$ lq_tmp$x##961 lq_tmp$x##962 lq_tmp$x##963  =  (lq_tmp$x##961)
match lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 GHC.Tuple.$40$$44$$44$$41$ lq_tmp$x##961 lq_tmp$x##962 lq_tmp$x##963  =  (lq_tmp$x##963)
match lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 GHC.Tuple.$40$$44$$44$$41$ lq_tmp$x##961 lq_tmp$x##962 lq_tmp$x##963  =  (lq_tmp$x##962)
match lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 GHC.Tuple.$40$$44$$44$$41$ lq_tmp$x##961 lq_tmp$x##962 lq_tmp$x##963  =  (lq_tmp$x##961)
match is$36$GHC.Tuple.$40$$44$$44$$41$ GHC.Tuple.$40$$44$$44$$41$ lq_tmp$x##961 lq_tmp$x##962 lq_tmp$x##963  =  (true)
match is$Basics.Eql Basics.And  =  (false)
match is$Basics.Eqn Basics.And  =  (false)
match is$Basics.Eq Basics.And  =  (false)
match is$Basics.Leqn Basics.And  =  (false)
match is$Basics.Leq Basics.And  =  (false)
match is$Basics.Eqv Basics.And  =  (false)
match is$Basics.Not Basics.And  =  (false)
match is$Basics.Or Basics.And  =  (false)
match is$Basics.And Basics.And  =  (true)
match is$Basics.Eql Basics.And  =  (false)
match is$Basics.Eqn Basics.And  =  (false)
match is$Basics.Eq Basics.And  =  (false)
match is$Basics.Leqn Basics.And  =  (false)
match is$Basics.Leq Basics.And  =  (false)
match is$Basics.Eqv Basics.And  =  (false)
match is$Basics.Not Basics.And  =  (false)
match is$Basics.Or Basics.And  =  (false)
match is$Basics.And Basics.And  =  (true)
match is$Basics.Eql Basics.Or  =  (false)
match is$Basics.Eqn Basics.Or  =  (false)
match is$Basics.Eq Basics.Or  =  (false)
match is$Basics.Leqn Basics.Or  =  (false)
match is$Basics.Leq Basics.Or  =  (false)
match is$Basics.Eqv Basics.Or  =  (false)
match is$Basics.Not Basics.Or  =  (false)
match is$Basics.Or Basics.Or  =  (true)
match is$Basics.And Basics.Or  =  (false)
match is$Basics.Eql Basics.Or  =  (false)
match is$Basics.Eqn Basics.Or  =  (false)
match is$Basics.Eq Basics.Or  =  (false)
match is$Basics.Leqn Basics.Or  =  (false)
match is$Basics.Leq Basics.Or  =  (false)
match is$Basics.Eqv Basics.Or  =  (false)
match is$Basics.Not Basics.Or  =  (false)
match is$Basics.Or Basics.Or  =  (true)
match is$Basics.And Basics.Or  =  (false)
match is$Basics.Eql Basics.Not  =  (false)
match is$Basics.Eqn Basics.Not  =  (false)
match is$Basics.Eq Basics.Not  =  (false)
match is$Basics.Leqn Basics.Not  =  (false)
match is$Basics.Leq Basics.Not  =  (false)
match is$Basics.Eqv Basics.Not  =  (false)
match is$Basics.Not Basics.Not  =  (true)
match is$Basics.Or Basics.Not  =  (false)
match is$Basics.And Basics.Not  =  (false)
match is$Basics.Eql Basics.Not  =  (false)
match is$Basics.Eqn Basics.Not  =  (false)
match is$Basics.Eq Basics.Not  =  (false)
match is$Basics.Leqn Basics.Not  =  (false)
match is$Basics.Leq Basics.Not  =  (false)
match is$Basics.Eqv Basics.Not  =  (false)
match is$Basics.Not Basics.Not  =  (true)
match is$Basics.Or Basics.Not  =  (false)
match is$Basics.And Basics.Not  =  (false)
match is$Basics.Eql Basics.Eqv  =  (false)
match is$Basics.Eqn Basics.Eqv  =  (false)
match is$Basics.Eq Basics.Eqv  =  (false)
match is$Basics.Leqn Basics.Eqv  =  (false)
match is$Basics.Leq Basics.Eqv  =  (false)
match is$Basics.Eqv Basics.Eqv  =  (true)
match is$Basics.Not Basics.Eqv  =  (false)
match is$Basics.Or Basics.Eqv  =  (false)
match is$Basics.And Basics.Eqv  =  (false)
match is$Basics.Eql Basics.Eqv  =  (false)
match is$Basics.Eqn Basics.Eqv  =  (false)
match is$Basics.Eq Basics.Eqv  =  (false)
match is$Basics.Leqn Basics.Eqv  =  (false)
match is$Basics.Leq Basics.Eqv  =  (false)
match is$Basics.Eqv Basics.Eqv  =  (true)
match is$Basics.Not Basics.Eqv  =  (false)
match is$Basics.Or Basics.Eqv  =  (false)
match is$Basics.And Basics.Eqv  =  (false)
match is$Basics.Eql Basics.Leq  =  (false)
match is$Basics.Eqn Basics.Leq  =  (false)
match is$Basics.Eq Basics.Leq  =  (false)
match is$Basics.Leqn Basics.Leq  =  (false)
match is$Basics.Leq Basics.Leq  =  (true)
match is$Basics.Eqv Basics.Leq  =  (false)
match is$Basics.Not Basics.Leq  =  (false)
match is$Basics.Or Basics.Leq  =  (false)
match is$Basics.And Basics.Leq  =  (false)
match is$Basics.Eql Basics.Leq  =  (false)
match is$Basics.Eqn Basics.Leq  =  (false)
match is$Basics.Eq Basics.Leq  =  (false)
match is$Basics.Leqn Basics.Leq  =  (false)
match is$Basics.Leq Basics.Leq  =  (true)
match is$Basics.Eqv Basics.Leq  =  (false)
match is$Basics.Not Basics.Leq  =  (false)
match is$Basics.Or Basics.Leq  =  (false)
match is$Basics.And Basics.Leq  =  (false)
match is$Basics.Eql Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eqn Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eq Basics.Leqn lq_tmp$x##1092  =  (false)
match Basics.Leqn##lqdc##$select##Basics.Leqn##1 Basics.Leqn lq_tmp$x##1092  =  (lq_tmp$x##1092)
match is$Basics.Leqn Basics.Leqn lq_tmp$x##1092  =  (true)
match is$Basics.Leq Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eqv Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Not Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Or Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.And Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eql Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eqn Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eq Basics.Leqn lq_tmp$x##1092  =  (false)
match Basics.Leqn##lqdc##$select##Basics.Leqn##1 Basics.Leqn lq_tmp$x##1092  =  (lq_tmp$x##1092)
match is$Basics.Leqn Basics.Leqn lq_tmp$x##1092  =  (true)
match is$Basics.Leq Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eqv Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Not Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Or Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.And Basics.Leqn lq_tmp$x##1092  =  (false)
match is$Basics.Eql Basics.Eq  =  (false)
match is$Basics.Eqn Basics.Eq  =  (false)
match is$Basics.Eq Basics.Eq  =  (true)
match is$Basics.Leqn Basics.Eq  =  (false)
match is$Basics.Leq Basics.Eq  =  (false)
match is$Basics.Eqv Basics.Eq  =  (false)
match is$Basics.Not Basics.Eq  =  (false)
match is$Basics.Or Basics.Eq  =  (false)
match is$Basics.And Basics.Eq  =  (false)
match is$Basics.Eql Basics.Eq  =  (false)
match is$Basics.Eqn Basics.Eq  =  (false)
match is$Basics.Eq Basics.Eq  =  (true)
match is$Basics.Leqn Basics.Eq  =  (false)
match is$Basics.Leq Basics.Eq  =  (false)
match is$Basics.Eqv Basics.Eq  =  (false)
match is$Basics.Not Basics.Eq  =  (false)
match is$Basics.Or Basics.Eq  =  (false)
match is$Basics.And Basics.Eq  =  (false)
match is$Basics.Eql Basics.Eqn lq_tmp$x##911  =  (false)
match Basics.Eqn##lqdc##$select##Basics.Eqn##1 Basics.Eqn lq_tmp$x##911  =  (lq_tmp$x##911)
match is$Basics.Eqn Basics.Eqn lq_tmp$x##911  =  (true)
match is$Basics.Eq Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Leqn Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Leq Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Eqv Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Not Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Or Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.And Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Eql Basics.Eqn lq_tmp$x##911  =  (false)
match Basics.Eqn##lqdc##$select##Basics.Eqn##1 Basics.Eqn lq_tmp$x##911  =  (lq_tmp$x##911)
match is$Basics.Eqn Basics.Eqn lq_tmp$x##911  =  (true)
match is$Basics.Eq Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Leqn Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Leq Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Eqv Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Not Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Or Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.And Basics.Eqn lq_tmp$x##911  =  (false)
match is$Basics.Eql Basics.Eql  =  (true)
match is$Basics.Eqn Basics.Eql  =  (false)
match is$Basics.Eq Basics.Eql  =  (false)
match is$Basics.Leqn Basics.Eql  =  (false)
match is$Basics.Leq Basics.Eql  =  (false)
match is$Basics.Eqv Basics.Eql  =  (false)
match is$Basics.Not Basics.Eql  =  (false)
match is$Basics.Or Basics.Eql  =  (false)
match is$Basics.And Basics.Eql  =  (false)
match is$Basics.Eql Basics.Eql  =  (true)
match is$Basics.Eqn Basics.Eql  =  (false)
match is$Basics.Eq Basics.Eql  =  (false)
match is$Basics.Leqn Basics.Eql  =  (false)
match is$Basics.Leq Basics.Eql  =  (false)
match is$Basics.Eqv Basics.Eql  =  (false)
match is$Basics.Not Basics.Eql  =  (false)
match is$Basics.Or Basics.Eql  =  (false)
match is$Basics.And Basics.Eql  =  (false)
match is$Basics.FTV Basics.TBool  =  (false)
match is$Basics.BTV Basics.TBool  =  (false)
match is$Basics.TInt Basics.TBool  =  (false)
match is$Basics.TBool Basics.TBool  =  (true)
match is$Basics.FTV Basics.TInt  =  (false)
match is$Basics.BTV Basics.TInt  =  (false)
match is$Basics.TInt Basics.TInt  =  (true)
match is$Basics.TBool Basics.TInt  =  (false)
match is$Basics.FTV Basics.BTV lq_tmp$x##1141  =  (false)
match Basics.BTV##lqdc##$select##Basics.BTV##1 Basics.BTV lq_tmp$x##1141  =  (lq_tmp$x##1141)
match is$Basics.BTV Basics.BTV lq_tmp$x##1141  =  (true)
match is$Basics.TInt Basics.BTV lq_tmp$x##1141  =  (false)
match is$Basics.TBool Basics.BTV lq_tmp$x##1141  =  (false)
match Basics.FTV##lqdc##$select##Basics.FTV##1 Basics.FTV lq_tmp$x##960  =  (lq_tmp$x##960)
match is$Basics.FTV Basics.FTV lq_tmp$x##960  =  (true)
match is$Basics.BTV Basics.FTV lq_tmp$x##960  =  (false)
match is$Basics.TInt Basics.FTV lq_tmp$x##960  =  (false)
match is$Basics.TBool Basics.FTV lq_tmp$x##960  =  (false)
match is$Basics.Star Basics.Base  =  (false)
match is$Basics.Base Basics.Base  =  (true)
match is$Basics.Star Basics.Base  =  (false)
match is$Basics.Base Basics.Base  =  (true)
match is$Basics.Star Basics.Base  =  (false)
match is$Basics.Base Basics.Base  =  (true)
match Basics.ksize Basics.Base  =  (0)
match is$Basics.Star Basics.Star  =  (true)
match is$Basics.Base Basics.Star  =  (false)
match is$Basics.Star Basics.Star  =  (true)
match is$Basics.Base Basics.Star  =  (false)
match is$Basics.Star Basics.Star  =  (true)
match is$Basics.Base Basics.Star  =  (false)
match Basics.ksize Basics.Star  =  (1)
match is$Basics.Z Basics.Z  =  (true)
match Basics.TRefn##p Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1098)
match Basics.TRefn##lqdc##$select##Basics.TRefn##2 Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1097)
match Basics.TRefn##lqdc##$select##Basics.TRefn##3 Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1096)
match is$Basics.TRefn Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (true)
match is$Basics.TPoly Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match is$Basics.TFunc Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match is$Basics.TExists Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match is$Basics.TPoly Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match is$Basics.TExists Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match is$Basics.TFunc Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match Basics.TRefn##p Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1098)
match Basics.TRefn##lqdc##$select##Basics.TRefn##2 Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1097)
match Basics.TRefn##lqdc##$select##Basics.TRefn##3 Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1096)
match is$Basics.TRefn Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (true)
match is$Basics.TPoly Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match is$Basics.TExists Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match is$Basics.TFunc Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (false)
match Basics.TRefn##p Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1098)
match Basics.TRefn##lqdc##$select##Basics.TRefn##2 Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1097)
match Basics.TRefn##lqdc##$select##Basics.TRefn##3 Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (lq_tmp$x##1096)
match is$Basics.TRefn Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (true)
match Basics.tsize Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  (((Basics.esize lq_tmp$x##1098) + 1))
match Basics.tfreeBTV Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  ((if (is$Basics.TBool lq_tmp$x##1096) then (Basics.freeBTV lq_tmp$x##1098) else (if (is$Basics.TInt lq_tmp$x##1096) then (Basics.freeBTV lq_tmp$x##1098) else (if (is$Basics.BTV lq_tmp$x##1096) then (Set_cup (Set_sng (Basics.BTV##lqdc##$select##Basics.BTV##1 lq_tmp$x##1096)) (Basics.freeBTV lq_tmp$x##1098)) else (Basics.freeBTV lq_tmp$x##1098)))))
match Basics.tfreeBV Basics.TRefn lq_tmp$x##1096 lq_tmp$x##1097 lq_tmp$x##1098  =  ((Set_dif (Basics.freeBV lq_tmp$x##1098) (Set_sng 0)))
match is$Basics.TRefn Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match is$Basics.TPoly Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match Basics.TFunc##lqdc##$select##Basics.TFunc##1 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##993)
match Basics.TFunc##lqdc##$select##Basics.TFunc##2 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##992)
match Basics.TFunc##lqdc##$select##Basics.TFunc##3 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##991)
match is$Basics.TFunc Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (true)
match is$Basics.TExists Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match is$Basics.TPoly Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match is$Basics.TExists Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match Basics.TFunc##lqdc##$select##Basics.TFunc##1 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##993)
match Basics.TFunc##lqdc##$select##Basics.TFunc##2 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##992)
match Basics.TFunc##lqdc##$select##Basics.TFunc##3 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##991)
match is$Basics.TFunc Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (true)
match is$Basics.TRefn Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match is$Basics.TPoly Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match is$Basics.TExists Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match Basics.TFunc##lqdc##$select##Basics.TFunc##1 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##993)
match Basics.TFunc##lqdc##$select##Basics.TFunc##2 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##992)
match Basics.TFunc##lqdc##$select##Basics.TFunc##3 Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (lq_tmp$x##991)
match is$Basics.TFunc Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (true)
match is$Basics.TRefn Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  (false)
match Basics.tsize Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  ((((Basics.tsize lq_tmp$x##992) + (Basics.tsize lq_tmp$x##993)) + 1))
match Basics.tfreeBTV Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  ((Set_cup (Basics.tfreeBTV lq_tmp$x##992) (Basics.tfreeBTV lq_tmp$x##993)))
match Basics.tfreeBV Basics.TFunc lq_tmp$x##991 lq_tmp$x##992 lq_tmp$x##993  =  ((Set_cup (Basics.tfreeBV lq_tmp$x##992) (Set_dif (Basics.tfreeBV lq_tmp$x##993) (Set_sng lq_tmp$x##991))))
match is$Basics.TRefn Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match is$Basics.TPoly Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match is$Basics.TFunc Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match Basics.TExists##lqdc##$select##Basics.TExists##1 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1012)
match Basics.TExists##lqdc##$select##Basics.TExists##2 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1011)
match Basics.TExists##lqdc##$select##Basics.TExists##3 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1010)
match is$Basics.TExists Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (true)
match is$Basics.TPoly Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match Basics.TExists##lqdc##$select##Basics.TExists##1 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1012)
match Basics.TExists##lqdc##$select##Basics.TExists##2 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1011)
match Basics.TExists##lqdc##$select##Basics.TExists##3 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1010)
match is$Basics.TExists Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (true)
match is$Basics.TFunc Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match is$Basics.TRefn Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match is$Basics.TPoly Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match Basics.TExists##lqdc##$select##Basics.TExists##1 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1012)
match Basics.TExists##lqdc##$select##Basics.TExists##2 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1011)
match Basics.TExists##lqdc##$select##Basics.TExists##3 Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (lq_tmp$x##1010)
match is$Basics.TExists Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (true)
match is$Basics.TFunc Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match is$Basics.TRefn Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  (false)
match Basics.tsize Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  ((((Basics.tsize lq_tmp$x##1011) + (Basics.tsize lq_tmp$x##1012)) + 1))
match Basics.tfreeBTV Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  ((Set_cup (Basics.tfreeBTV lq_tmp$x##1011) (Basics.tfreeBTV lq_tmp$x##1012)))
match Basics.tfreeBV Basics.TExists lq_tmp$x##1010 lq_tmp$x##1011 lq_tmp$x##1012  =  ((Set_cup (Basics.tfreeBV lq_tmp$x##1011) (Set_dif (Basics.tfreeBV lq_tmp$x##1012) (Set_sng lq_tmp$x##1010))))
match is$Basics.TRefn Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match Basics.TPoly##lqdc##$select##Basics.TPoly##1 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##924)
match Basics.TPoly##lqdc##$select##Basics.TPoly##2 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##923)
match Basics.TPoly##lqdc##$select##Basics.TPoly##3 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##922)
match is$Basics.TPoly Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (true)
match is$Basics.TFunc Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match is$Basics.TExists Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match Basics.TPoly##lqdc##$select##Basics.TPoly##1 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##924)
match Basics.TPoly##lqdc##$select##Basics.TPoly##2 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##923)
match Basics.TPoly##lqdc##$select##Basics.TPoly##3 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##922)
match is$Basics.TPoly Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (true)
match is$Basics.TExists Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match is$Basics.TFunc Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match is$Basics.TRefn Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match Basics.TPoly##lqdc##$select##Basics.TPoly##1 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##924)
match Basics.TPoly##lqdc##$select##Basics.TPoly##2 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##923)
match Basics.TPoly##lqdc##$select##Basics.TPoly##3 Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (lq_tmp$x##922)
match is$Basics.TPoly Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (true)
match is$Basics.TExists Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match is$Basics.TFunc Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match is$Basics.TRefn Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (false)
match Basics.tsize Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  (((Basics.tsize lq_tmp$x##924) + 1))
match Basics.tfreeBTV Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  ((Set_dif (Basics.tfreeBTV lq_tmp$x##924) (Set_sng lq_tmp$x##922)))
match Basics.tfreeBV Basics.TPoly lq_tmp$x##922 lq_tmp$x##923 lq_tmp$x##924  =  ((Basics.tfreeBV lq_tmp$x##924))
match is$Basics.Conj Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Annot Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Let Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.AppT Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.LambdaT Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.App Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Lambda Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.FV Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.BV Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Prim Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Ic Basics.Bc lq_tmp$x##983  =  (false)
match Basics.Bc##lqdc##$select##Basics.Bc##1 Basics.Bc lq_tmp$x##983  =  (lq_tmp$x##983)
match is$Basics.Bc Basics.Bc lq_tmp$x##983  =  (true)
match is$Basics.Conj Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Annot Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Let Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.AppT Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.LambdaT Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.App Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Lambda Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.FV Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.BV Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Prim Basics.Bc lq_tmp$x##983  =  (false)
match is$Basics.Ic Basics.Bc lq_tmp$x##983  =  (false)
match Basics.Bc##lqdc##$select##Basics.Bc##1 Basics.Bc lq_tmp$x##983  =  (lq_tmp$x##983)
match is$Basics.Bc Basics.Bc lq_tmp$x##983  =  (true)
match Basics.esize Basics.Bc lq_tmp$x##983  =  ((if lq_tmp$x##983 then 0 else 1))
match Basics.freeBTV Basics.Bc lq_tmp$x##983  =  ((Set_empty 0))
match Basics.freeBV Basics.Bc lq_tmp$x##983  =  ((Set_empty 0))
match is$Basics.Conj Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Annot Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Let Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.AppT Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.LambdaT Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.App Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Lambda Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.FV Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.BV Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Prim Basics.Ic lq_tmp$x##1128  =  (false)
match Basics.Ic##lqdc##$select##Basics.Ic##1 Basics.Ic lq_tmp$x##1128  =  (lq_tmp$x##1128)
match is$Basics.Ic Basics.Ic lq_tmp$x##1128  =  (true)
match is$Basics.Bc Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Conj Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Annot Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Let Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.AppT Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.LambdaT Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.App Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Lambda Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.FV Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.BV Basics.Ic lq_tmp$x##1128  =  (false)
match is$Basics.Prim Basics.Ic lq_tmp$x##1128  =  (false)
match Basics.Ic##lqdc##$select##Basics.Ic##1 Basics.Ic lq_tmp$x##1128  =  (lq_tmp$x##1128)
match is$Basics.Ic Basics.Ic lq_tmp$x##1128  =  (true)
match is$Basics.Bc Basics.Ic lq_tmp$x##1128  =  (false)
match Basics.esize Basics.Ic lq_tmp$x##1128  =  (1)
match Basics.freeBTV Basics.Ic lq_tmp$x##1128  =  ((Set_empty 0))
match Basics.freeBV Basics.Ic lq_tmp$x##1128  =  ((Set_empty 0))
match is$Basics.Conj Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Annot Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Let Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.AppT Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.LambdaT Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.App Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Lambda Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.FV Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.BV Basics.Prim lq_tmp$x##956  =  (false)
match Basics.Prim##lqdc##$select##Basics.Prim##1 Basics.Prim lq_tmp$x##956  =  (lq_tmp$x##956)
match is$Basics.Prim Basics.Prim lq_tmp$x##956  =  (true)
match is$Basics.Ic Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Bc Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Conj Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Annot Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Let Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.AppT Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.LambdaT Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.App Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Lambda Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.FV Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.BV Basics.Prim lq_tmp$x##956  =  (false)
match Basics.Prim##lqdc##$select##Basics.Prim##1 Basics.Prim lq_tmp$x##956  =  (lq_tmp$x##956)
match is$Basics.Prim Basics.Prim lq_tmp$x##956  =  (true)
match is$Basics.Ic Basics.Prim lq_tmp$x##956  =  (false)
match is$Basics.Bc Basics.Prim lq_tmp$x##956  =  (false)
match Basics.esize Basics.Prim lq_tmp$x##956  =  (1)
match Basics.freeBTV Basics.Prim lq_tmp$x##956  =  ((Set_empty 0))
match Basics.freeBV Basics.Prim lq_tmp$x##956  =  ((Set_empty 0))
match is$Basics.Conj Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Annot Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Let Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.AppT Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.LambdaT Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.App Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Lambda Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.FV Basics.BV lq_tmp$x##933  =  (false)
match Basics.BV##lqdc##$select##Basics.BV##1 Basics.BV lq_tmp$x##933  =  (lq_tmp$x##933)
match is$Basics.BV Basics.BV lq_tmp$x##933  =  (true)
match is$Basics.Prim Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Ic Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Bc Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Conj Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Annot Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Let Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.AppT Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.LambdaT Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.App Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Lambda Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.FV Basics.BV lq_tmp$x##933  =  (false)
match Basics.BV##lqdc##$select##Basics.BV##1 Basics.BV lq_tmp$x##933  =  (lq_tmp$x##933)
match is$Basics.BV Basics.BV lq_tmp$x##933  =  (true)
match is$Basics.Prim Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Ic Basics.BV lq_tmp$x##933  =  (false)
match is$Basics.Bc Basics.BV lq_tmp$x##933  =  (false)
match Basics.esize Basics.BV lq_tmp$x##933  =  (1)
match Basics.freeBTV Basics.BV lq_tmp$x##933  =  ((Set_empty 0))
match Basics.freeBV Basics.BV lq_tmp$x##933  =  ((Set_sng lq_tmp$x##933))
match is$Basics.Conj Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Annot Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Let Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.AppT Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.LambdaT Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.App Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Lambda Basics.FV lq_tmp$x##1025  =  (false)
match Basics.FV##lqdc##$select##Basics.FV##1 Basics.FV lq_tmp$x##1025  =  (lq_tmp$x##1025)
match is$Basics.FV Basics.FV lq_tmp$x##1025  =  (true)
match is$Basics.BV Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Prim Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Ic Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Bc Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Conj Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Annot Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Let Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.AppT Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.LambdaT Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.App Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Lambda Basics.FV lq_tmp$x##1025  =  (false)
match Basics.FV##lqdc##$select##Basics.FV##1 Basics.FV lq_tmp$x##1025  =  (lq_tmp$x##1025)
match is$Basics.FV Basics.FV lq_tmp$x##1025  =  (true)
match is$Basics.BV Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Prim Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Ic Basics.FV lq_tmp$x##1025  =  (false)
match is$Basics.Bc Basics.FV lq_tmp$x##1025  =  (false)
match Basics.esize Basics.FV lq_tmp$x##1025  =  (1)
match Basics.freeBTV Basics.FV lq_tmp$x##1025  =  ((Set_empty 0))
match Basics.freeBV Basics.FV lq_tmp$x##1025  =  ((Set_empty 0))
match is$Basics.Conj Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Annot Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Let Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.AppT Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.LambdaT Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.App Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match Basics.Lambda##lqdc##$select##Basics.Lambda##2 Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (lq_tmp$x##913)
match Basics.Lambda##lqdc##$select##Basics.Lambda##1 Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (lq_tmp$x##912)
match is$Basics.Lambda Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (true)
match is$Basics.FV Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.BV Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Prim Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Ic Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Bc Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Conj Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Annot Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Let Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.AppT Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.LambdaT Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.App Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match Basics.Lambda##lqdc##$select##Basics.Lambda##2 Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (lq_tmp$x##913)
match Basics.Lambda##lqdc##$select##Basics.Lambda##1 Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (lq_tmp$x##912)
match is$Basics.Lambda Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (true)
match is$Basics.FV Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.BV Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Prim Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Ic Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match is$Basics.Bc Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (false)
match Basics.esize Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  (((Basics.esize lq_tmp$x##913) + 1))
match Basics.freeBTV Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  ((Basics.freeBTV lq_tmp$x##913))
match Basics.freeBV Basics.Lambda lq_tmp$x##912 lq_tmp$x##913  =  ((Set_dif (Basics.freeBV lq_tmp$x##913) (Set_sng lq_tmp$x##912)))
match is$Basics.Conj Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Annot Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Let Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.AppT Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.LambdaT Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match Basics.App##lqdc##$select##Basics.App##2 Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (lq_tmp$x##1027)
match Basics.App##lqdc##$select##Basics.App##1 Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (lq_tmp$x##1026)
match is$Basics.App Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (true)
match is$Basics.Lambda Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.FV Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.BV Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Prim Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Ic Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Bc Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Conj Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Annot Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Let Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.AppT Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.LambdaT Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match Basics.App##lqdc##$select##Basics.App##2 Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (lq_tmp$x##1027)
match Basics.App##lqdc##$select##Basics.App##1 Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (lq_tmp$x##1026)
match is$Basics.App Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (true)
match is$Basics.Lambda Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.FV Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.BV Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Prim Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Ic Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match is$Basics.Bc Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  (false)
match Basics.esize Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  ((((Basics.esize lq_tmp$x##1026) + (Basics.esize lq_tmp$x##1027)) + 1))
match Basics.freeBTV Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  ((Set_cup (Basics.freeBTV lq_tmp$x##1026) (Basics.freeBTV lq_tmp$x##1027)))
match Basics.freeBV Basics.App lq_tmp$x##1026 lq_tmp$x##1027  =  ((Set_cup (Basics.freeBV lq_tmp$x##1026) (Basics.freeBV lq_tmp$x##1027)))
match is$Basics.Conj Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Annot Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Let Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.AppT Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (lq_tmp$x##932)
match Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (lq_tmp$x##931)
match Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (lq_tmp$x##930)
match is$Basics.LambdaT Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (true)
match is$Basics.App Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Lambda Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.FV Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.BV Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Prim Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Ic Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Bc Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Conj Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Annot Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Let Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.AppT Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (lq_tmp$x##932)
match Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (lq_tmp$x##931)
match Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (lq_tmp$x##930)
match is$Basics.LambdaT Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (true)
match is$Basics.App Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Lambda Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.FV Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.BV Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Prim Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Ic Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match is$Basics.Bc Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (false)
match Basics.esize Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  (((Basics.esize lq_tmp$x##932) + 1))
match Basics.freeBTV Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  ((Set_dif (Basics.freeBTV lq_tmp$x##932) (Set_sng lq_tmp$x##930)))
match Basics.freeBV Basics.LambdaT lq_tmp$x##930 lq_tmp$x##931 lq_tmp$x##932  =  ((Basics.freeBV lq_tmp$x##932))
match is$Basics.Conj Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Annot Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Let Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match Basics.AppT##lqdc##$select##Basics.AppT##2 Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (lq_tmp$x##1037)
match Basics.AppT##lqdc##$select##Basics.AppT##1 Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (lq_tmp$x##1036)
match is$Basics.AppT Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (true)
match is$Basics.LambdaT Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.App Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Lambda Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.FV Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.BV Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Prim Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Ic Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Bc Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Conj Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Annot Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Let Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match Basics.AppT##lqdc##$select##Basics.AppT##2 Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (lq_tmp$x##1037)
match Basics.AppT##lqdc##$select##Basics.AppT##1 Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (lq_tmp$x##1036)
match is$Basics.AppT Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (true)
match is$Basics.LambdaT Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.App Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Lambda Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.FV Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.BV Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Prim Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Ic Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match is$Basics.Bc Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  (false)
match Basics.esize Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  ((((Basics.esize lq_tmp$x##1036) + (Basics.tsize lq_tmp$x##1037)) + 1))
match Basics.freeBTV Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  ((Set_cup (Basics.freeBTV lq_tmp$x##1036) (Basics.tfreeBTV lq_tmp$x##1037)))
match Basics.freeBV Basics.AppT lq_tmp$x##1036 lq_tmp$x##1037  =  ((Set_cup (Basics.freeBV lq_tmp$x##1036) (Basics.tfreeBV lq_tmp$x##1037)))
match is$Basics.Conj Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Annot Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match Basics.Let##lqdc##$select##Basics.Let##3 Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (lq_tmp$x##1082)
match Basics.Let##lqdc##$select##Basics.Let##2 Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (lq_tmp$x##1081)
match Basics.Let##lqdc##$select##Basics.Let##1 Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (lq_tmp$x##1080)
match is$Basics.Let Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (true)
match is$Basics.AppT Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.LambdaT Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.App Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Lambda Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.FV Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.BV Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Prim Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Ic Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Bc Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Conj Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Annot Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match Basics.Let##lqdc##$select##Basics.Let##3 Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (lq_tmp$x##1082)
match Basics.Let##lqdc##$select##Basics.Let##2 Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (lq_tmp$x##1081)
match Basics.Let##lqdc##$select##Basics.Let##1 Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (lq_tmp$x##1080)
match is$Basics.Let Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (true)
match is$Basics.AppT Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.LambdaT Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.App Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Lambda Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.FV Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.BV Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Prim Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Ic Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match is$Basics.Bc Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  (false)
match Basics.esize Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  ((((Basics.esize lq_tmp$x##1081) + (Basics.esize lq_tmp$x##1082)) + 1))
match Basics.freeBTV Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  ((Set_cup (Basics.freeBTV lq_tmp$x##1081) (Basics.freeBTV lq_tmp$x##1082)))
match Basics.freeBV Basics.Let lq_tmp$x##1080 lq_tmp$x##1081 lq_tmp$x##1082  =  ((Set_cup (Basics.freeBV lq_tmp$x##1081) (Set_dif (Basics.freeBV lq_tmp$x##1082) (Set_sng lq_tmp$x##1080))))
match is$Basics.Conj Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match Basics.Annot##lqdc##$select##Basics.Annot##2 Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (lq_tmp$x##942)
match Basics.Annot##lqdc##$select##Basics.Annot##1 Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (lq_tmp$x##941)
match is$Basics.Annot Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (true)
match is$Basics.Let Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.AppT Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.LambdaT Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.App Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Lambda Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.FV Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.BV Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Prim Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Ic Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Bc Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Conj Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match Basics.Annot##lqdc##$select##Basics.Annot##2 Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (lq_tmp$x##942)
match Basics.Annot##lqdc##$select##Basics.Annot##1 Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (lq_tmp$x##941)
match is$Basics.Annot Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (true)
match is$Basics.Let Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.AppT Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.LambdaT Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.App Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Lambda Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.FV Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.BV Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Prim Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Ic Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match is$Basics.Bc Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  (false)
match Basics.esize Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  ((((Basics.esize lq_tmp$x##941) + (Basics.tsize lq_tmp$x##942)) + 1))
match Basics.freeBTV Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  ((Set_cup (Basics.freeBTV lq_tmp$x##941) (Basics.tfreeBTV lq_tmp$x##942)))
match Basics.freeBV Basics.Annot lq_tmp$x##941 lq_tmp$x##942  =  ((Set_cup (Basics.freeBV lq_tmp$x##941) (Basics.tfreeBV lq_tmp$x##942)))
match Basics.Conj##lqdc##$select##Basics.Conj##2 Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (lq_tmp$x##1079)
match Basics.Conj##lqdc##$select##Basics.Conj##1 Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (lq_tmp$x##1078)
match is$Basics.Conj Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (true)
match is$Basics.Annot Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Let Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.AppT Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.LambdaT Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.App Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Lambda Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.FV Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.BV Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Prim Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Ic Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Bc Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match Basics.Conj##lqdc##$select##Basics.Conj##2 Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (lq_tmp$x##1079)
match Basics.Conj##lqdc##$select##Basics.Conj##1 Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (lq_tmp$x##1078)
match is$Basics.Conj Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (true)
match is$Basics.Annot Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Let Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.AppT Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.LambdaT Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.App Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Lambda Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.FV Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.BV Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Prim Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Ic Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match is$Basics.Bc Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  (false)
match Basics.esize Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  ((((Basics.esize lq_tmp$x##1078) + (Basics.esize lq_tmp$x##1079)) + 1))
match Basics.freeBTV Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  ((Set_cup (Basics.freeBTV lq_tmp$x##1078) (Basics.freeBTV lq_tmp$x##1079)))
match Basics.freeBV Basics.Conj lq_tmp$x##1078 lq_tmp$x##1079  =  ((Set_cup (Basics.freeBV lq_tmp$x##1078) (Basics.freeBV lq_tmp$x##1079)))
match is$Basics.Empty Basics.Empty  =  (true)
match is$Basics.ConsT Basics.Empty  =  (false)
match is$Basics.Cons Basics.Empty  =  (false)
match is$Basics.ConsT Basics.Empty  =  (false)
match is$Basics.Cons Basics.Empty  =  (false)
match is$Basics.Empty Basics.Empty  =  (true)
match Basics.envsize Basics.Empty  =  (0)
match is$Basics.Empty Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (false)
match is$Basics.ConsT Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (false)
match Basics.Cons##g Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (lq_tmp$x##1095)
match Basics.Cons##t Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (lq_tmp$x##1094)
match Basics.Cons##x Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (lq_tmp$x##1093)
match is$Basics.Cons Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (true)
match is$Basics.ConsT Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (false)
match Basics.Cons##g Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (lq_tmp$x##1095)
match Basics.Cons##t Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (lq_tmp$x##1094)
match Basics.Cons##x Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (lq_tmp$x##1093)
match is$Basics.Cons Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (true)
match is$Basics.Empty Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (false)
match Basics.envsize Basics.Cons lq_tmp$x##1093 lq_tmp$x##1094 lq_tmp$x##1095  =  (((Basics.envsize lq_tmp$x##1095) + 1))
match is$Basics.Empty Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (false)
match Basics.ConsT##g Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (lq_tmp$x##969)
match Basics.ConsT##k Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (lq_tmp$x##968)
match Basics.ConsT##a Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (lq_tmp$x##967)
match is$Basics.ConsT Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (true)
match is$Basics.Cons Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (false)
match Basics.ConsT##g Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (lq_tmp$x##969)
match Basics.ConsT##k Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (lq_tmp$x##968)
match Basics.ConsT##a Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (lq_tmp$x##967)
match is$Basics.ConsT Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (true)
match is$Basics.Cons Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (false)
match is$Basics.Empty Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (false)
match Basics.envsize Basics.ConsT lq_tmp$x##967 lq_tmp$x##968 lq_tmp$x##969  =  (((Basics.envsize lq_tmp$x##969) + 1))
match is$Basics.FTPoly Basics.FTBasic lq_tmp$x##1083  =  (false)
match is$Basics.FTFunc Basics.FTBasic lq_tmp$x##1083  =  (false)
match Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 Basics.FTBasic lq_tmp$x##1083  =  (lq_tmp$x##1083)
match is$Basics.FTBasic Basics.FTBasic lq_tmp$x##1083  =  (true)
match is$Basics.FTPoly Basics.FTBasic lq_tmp$x##1083  =  (false)
match is$Basics.FTFunc Basics.FTBasic lq_tmp$x##1083  =  (false)
match Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 Basics.FTBasic lq_tmp$x##1083  =  (lq_tmp$x##1083)
match is$Basics.FTBasic Basics.FTBasic lq_tmp$x##1083  =  (true)
match is$Basics.FTPoly Basics.FTBasic lq_tmp$x##1083  =  (false)
match is$Basics.FTFunc Basics.FTBasic lq_tmp$x##1083  =  (false)
match Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 Basics.FTBasic lq_tmp$x##1083  =  (lq_tmp$x##1083)
match is$Basics.FTBasic Basics.FTBasic lq_tmp$x##1083  =  (true)
match Basics.isBaseF Basics.FTBasic lq_tmp$x##1083  =  (true)
match Basics.ftsize Basics.FTBasic lq_tmp$x##1083  =  (1)
match is$Basics.FTPoly Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (false)
match Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (lq_tmp$x##948)
match Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (lq_tmp$x##947)
match is$Basics.FTFunc Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (true)
match is$Basics.FTBasic Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (false)
match is$Basics.FTPoly Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (false)
match Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (lq_tmp$x##948)
match Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (lq_tmp$x##947)
match is$Basics.FTFunc Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (true)
match is$Basics.FTBasic Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (false)
match is$Basics.FTPoly Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (false)
match Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (lq_tmp$x##948)
match Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (lq_tmp$x##947)
match is$Basics.FTFunc Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (true)
match is$Basics.FTBasic Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (false)
match Basics.isBaseF Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  (false)
match Basics.ftsize Basics.FTFunc lq_tmp$x##947 lq_tmp$x##948  =  ((((Basics.ftsize lq_tmp$x##947) + (Basics.ftsize lq_tmp$x##948)) + 1))
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1127)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1126)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1125)
match is$Basics.FTPoly Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (true)
match is$Basics.FTFunc Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (false)
match is$Basics.FTBasic Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (false)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1127)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1126)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1125)
match is$Basics.FTPoly Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (true)
match is$Basics.FTFunc Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (false)
match is$Basics.FTBasic Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (false)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1127)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1126)
match Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (lq_tmp$x##1125)
match is$Basics.FTPoly Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (true)
match is$Basics.FTFunc Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (false)
match is$Basics.FTBasic Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (false)
match Basics.isBaseF Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (false)
match Basics.ftsize Basics.FTPoly lq_tmp$x##1125 lq_tmp$x##1126 lq_tmp$x##1127  =  (((Basics.ftsize lq_tmp$x##1127) + 1))
match is$Basics.FEmpty Basics.FEmpty  =  (true)
match is$Basics.FConsT Basics.FEmpty  =  (false)
match is$Basics.FCons Basics.FEmpty  =  (false)
match is$Basics.FConsT Basics.FEmpty  =  (false)
match is$Basics.FCons Basics.FEmpty  =  (false)
match is$Basics.FEmpty Basics.FEmpty  =  (true)
match is$Basics.FConsT Basics.FEmpty  =  (false)
match is$Basics.FCons Basics.FEmpty  =  (false)
match is$Basics.FEmpty Basics.FEmpty  =  (true)
match Basics.fenvsize Basics.FEmpty  =  (0)
match is$Basics.FEmpty Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (false)
match is$Basics.FConsT Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (false)
match Basics.FCons##g Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##921)
match Basics.FCons##t Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##920)
match Basics.FCons##x Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##919)
match is$Basics.FCons Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (true)
match is$Basics.FConsT Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (false)
match Basics.FCons##g Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##921)
match Basics.FCons##t Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##920)
match Basics.FCons##x Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##919)
match is$Basics.FCons Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (true)
match is$Basics.FEmpty Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (false)
match is$Basics.FConsT Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (false)
match Basics.FCons##g Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##921)
match Basics.FCons##t Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##920)
match Basics.FCons##x Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (lq_tmp$x##919)
match is$Basics.FCons Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (true)
match is$Basics.FEmpty Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (false)
match Basics.fenvsize Basics.FCons lq_tmp$x##919 lq_tmp$x##920 lq_tmp$x##921  =  (((Basics.fenvsize lq_tmp$x##921) + 1))
match is$Basics.FEmpty Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (false)
match Basics.FConsT##g Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##946)
match Basics.FConsT##k Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##945)
match Basics.FConsT##a Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##944)
match is$Basics.FConsT Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (true)
match is$Basics.FCons Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (false)
match Basics.FConsT##g Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##946)
match Basics.FConsT##k Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##945)
match Basics.FConsT##a Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##944)
match is$Basics.FConsT Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (true)
match is$Basics.FCons Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (false)
match is$Basics.FEmpty Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (false)
match Basics.FConsT##g Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##946)
match Basics.FConsT##k Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##945)
match Basics.FConsT##a Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (lq_tmp$x##944)
match is$Basics.FConsT Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (true)
match is$Basics.FCons Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (false)
match is$Basics.FEmpty Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (false)
match Basics.fenvsize Basics.FConsT lq_tmp$x##944 lq_tmp$x##945 lq_tmp$x##946  =  (((Basics.fenvsize lq_tmp$x##946) + 1))
match SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##3 SystemFWellFormedness.WFFT lq_tmp$x##916 lq_tmp$x##917 lq_tmp$x##918  =  (lq_tmp$x##918)
match SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##2 SystemFWellFormedness.WFFT lq_tmp$x##916 lq_tmp$x##917 lq_tmp$x##918  =  (lq_tmp$x##917)
match SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##1 SystemFWellFormedness.WFFT lq_tmp$x##916 lq_tmp$x##917 lq_tmp$x##918  =  (lq_tmp$x##916)
match is$SystemFWellFormedness.WFFT SystemFWellFormedness.WFFT lq_tmp$x##916 lq_tmp$x##917 lq_tmp$x##918  =  (true)
match is$SystemFWellFormedness.WFFTPoly SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (false)
match is$SystemFWellFormedness.WFFTKind SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (false)
match is$SystemFWellFormedness.WFFTFunc SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (false)
match is$SystemFWellFormedness.WFFTFV3 SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (false)
match is$SystemFWellFormedness.WFFTFV2 SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (false)
match is$SystemFWellFormedness.WFFTFV1 SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (false)
match SystemFWellFormedness.WFFTBasic##b SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (lq_tmp$x##1146)
match SystemFWellFormedness.WFFTBasic##g SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (lq_tmp$x##1145)
match is$SystemFWellFormedness.WFFTBasic SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (true)
match SystemFWellFormedness.wfftypSize SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  (1)
match propOf SystemFWellFormedness.WFFTBasic lq_tmp$x##1145 lq_tmp$x##1146  =  ((SystemFWellFormedness.WFFT lq_tmp$x##1145 (Basics.FTBasic lq_tmp$x##1146) Basics.Base))
match is$SystemFWellFormedness.WFFTPoly SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (false)
match is$SystemFWellFormedness.WFFTKind SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (false)
match is$SystemFWellFormedness.WFFTFunc SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (false)
match is$SystemFWellFormedness.WFFTFV3 SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (false)
match is$SystemFWellFormedness.WFFTFV2 SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (false)
match SystemFWellFormedness.WFFTFV1##k SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (lq_tmp$x##891)
match SystemFWellFormedness.WFFTFV1##a SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (lq_tmp$x##890)
match SystemFWellFormedness.WFFTFV1##g SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (lq_tmp$x##889)
match is$SystemFWellFormedness.WFFTFV1 SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (true)
match is$SystemFWellFormedness.WFFTBasic SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (false)
match SystemFWellFormedness.wfftypSize SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  (1)
match propOf SystemFWellFormedness.WFFTFV1 lq_tmp$x##889 lq_tmp$x##890 lq_tmp$x##891  =  ((SystemFWellFormedness.WFFT (Basics.FConsT lq_tmp$x##890 lq_tmp$x##891 lq_tmp$x##889) (Basics.FTBasic (Basics.FTV lq_tmp$x##890)) lq_tmp$x##891))
match is$SystemFWellFormedness.WFFTPoly SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (false)
match is$SystemFWellFormedness.WFFTKind SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (false)
match is$SystemFWellFormedness.WFFTFunc SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (false)
match is$SystemFWellFormedness.WFFTFV3 SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (false)
match SystemFWellFormedness.WFFTFV2##t SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (lq_tmp$x##982)
match SystemFWellFormedness.WFFTFV2##a' SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (lq_tmp$x##981)
match SystemFWellFormedness.WFFTFV2##lqdc##$select##SystemFWellFormedness.WFFTFV2##3 SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (lq_tmp$x##980)
match SystemFWellFormedness.WFFTFV2##k SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (lq_tmp$x##979)
match SystemFWellFormedness.WFFTFV2##a SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (lq_tmp$x##978)
match SystemFWellFormedness.WFFTFV2##g SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (lq_tmp$x##977)
match is$SystemFWellFormedness.WFFTFV2 SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (true)
match is$SystemFWellFormedness.WFFTFV1 SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (false)
match is$SystemFWellFormedness.WFFTBasic SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (false)
match SystemFWellFormedness.wfftypSize SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  (((SystemFWellFormedness.wfftypSize lq_tmp$x##980) + 1))
match propOf SystemFWellFormedness.WFFTFV2 lq_tmp$x##977 lq_tmp$x##978 lq_tmp$x##979 lq_tmp$x##980 lq_tmp$x##981 lq_tmp$x##982  =  ((SystemFWellFormedness.WFFT (Basics.FCons lq_tmp$x##981 lq_tmp$x##982 lq_tmp$x##977) (Basics.FTBasic (Basics.FTV lq_tmp$x##978)) lq_tmp$x##979))
match is$SystemFWellFormedness.WFFTPoly SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (false)
match is$SystemFWellFormedness.WFFTKind SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (false)
match is$SystemFWellFormedness.WFFTFunc SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (false)
match SystemFWellFormedness.WFFTFV3##k' SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (lq_tmp$x##1069)
match SystemFWellFormedness.WFFTFV3##a' SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (lq_tmp$x##1068)
match SystemFWellFormedness.WFFTFV3##lqdc##$select##SystemFWellFormedness.WFFTFV3##3 SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (lq_tmp$x##1067)
match SystemFWellFormedness.WFFTFV3##k SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (lq_tmp$x##1066)
match SystemFWellFormedness.WFFTFV3##a SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (lq_tmp$x##1065)
match SystemFWellFormedness.WFFTFV3##g SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (lq_tmp$x##1064)
match is$SystemFWellFormedness.WFFTFV3 SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (true)
match is$SystemFWellFormedness.WFFTFV2 SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (false)
match is$SystemFWellFormedness.WFFTFV1 SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (false)
match is$SystemFWellFormedness.WFFTBasic SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (false)
match SystemFWellFormedness.wfftypSize SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  (((SystemFWellFormedness.wfftypSize lq_tmp$x##1067) + 1))
match propOf SystemFWellFormedness.WFFTFV3 lq_tmp$x##1064 lq_tmp$x##1065 lq_tmp$x##1066 lq_tmp$x##1067 lq_tmp$x##1068 lq_tmp$x##1069  =  ((SystemFWellFormedness.WFFT (Basics.FConsT lq_tmp$x##1068 lq_tmp$x##1069 lq_tmp$x##1064) (Basics.FTBasic (Basics.FTV lq_tmp$x##1065)) lq_tmp$x##1066))
match is$SystemFWellFormedness.WFFTPoly SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (false)
match is$SystemFWellFormedness.WFFTKind SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (false)
match SystemFWellFormedness.WFFTFunc##lqdc##$select##SystemFWellFormedness.WFFTFunc##1 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (lq_tmp$x##1009)
match SystemFWellFormedness.WFFTFunc##k2 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (lq_tmp$x##1008)
match SystemFWellFormedness.WFFTFunc##t2 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (lq_tmp$x##1007)
match SystemFWellFormedness.WFFTFunc##lqdc##$select##SystemFWellFormedness.WFFTFunc##4 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (lq_tmp$x##1006)
match SystemFWellFormedness.WFFTFunc##k1 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (lq_tmp$x##1005)
match SystemFWellFormedness.WFFTFunc##t1 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (lq_tmp$x##1004)
match SystemFWellFormedness.WFFTFunc##g SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (lq_tmp$x##1003)
match is$SystemFWellFormedness.WFFTFunc SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (true)
match is$SystemFWellFormedness.WFFTFV3 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (false)
match is$SystemFWellFormedness.WFFTFV2 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (false)
match is$SystemFWellFormedness.WFFTFV1 SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (false)
match is$SystemFWellFormedness.WFFTBasic SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  (false)
match SystemFWellFormedness.wfftypSize SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  ((((SystemFWellFormedness.wfftypSize lq_tmp$x##1006) + (SystemFWellFormedness.wfftypSize lq_tmp$x##1009)) + 1))
match propOf SystemFWellFormedness.WFFTFunc lq_tmp$x##1003 lq_tmp$x##1004 lq_tmp$x##1005 lq_tmp$x##1006 lq_tmp$x##1007 lq_tmp$x##1008 lq_tmp$x##1009  =  ((SystemFWellFormedness.WFFT lq_tmp$x##1003 (Basics.FTFunc lq_tmp$x##1004 lq_tmp$x##1007) Basics.Star))
match SystemFWellFormedness.WFFTPoly##lqdc##$select##SystemFWellFormedness.WFFTPoly##1 SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (lq_tmp$x##1159)
match SystemFWellFormedness.WFFTPoly##a' SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (lq_tmp$x##1158)
match SystemFWellFormedness.WFFTPoly##k_t SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (lq_tmp$x##1157)
match SystemFWellFormedness.WFFTPoly##t SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (lq_tmp$x##1156)
match SystemFWellFormedness.WFFTPoly##k SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (lq_tmp$x##1155)
match SystemFWellFormedness.WFFTPoly##a SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (lq_tmp$x##1154)
match SystemFWellFormedness.WFFTPoly##g SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (lq_tmp$x##1153)
match is$SystemFWellFormedness.WFFTPoly SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (true)
match is$SystemFWellFormedness.WFFTKind SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (false)
match is$SystemFWellFormedness.WFFTFunc SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (false)
match is$SystemFWellFormedness.WFFTFV3 SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (false)
match is$SystemFWellFormedness.WFFTFV2 SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (false)
match is$SystemFWellFormedness.WFFTFV1 SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (false)
match is$SystemFWellFormedness.WFFTBasic SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (false)
match SystemFWellFormedness.wfftypSize SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  (((SystemFWellFormedness.wfftypSize lq_tmp$x##1159) + 1))
match propOf SystemFWellFormedness.WFFTPoly lq_tmp$x##1153 lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156 lq_tmp$x##1157 lq_tmp$x##1158 lq_tmp$x##1159  =  ((SystemFWellFormedness.WFFT lq_tmp$x##1153 (Basics.FTPoly lq_tmp$x##1154 lq_tmp$x##1155 lq_tmp$x##1156) Basics.Star))
match is$SystemFWellFormedness.WFFTPoly SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (false)
match SystemFWellFormedness.WFFTKind##lqdc##$select##SystemFWellFormedness.WFFTKind##1 SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (lq_tmp$x##894)
match SystemFWellFormedness.WFFTKind##t SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (lq_tmp$x##893)
match SystemFWellFormedness.WFFTKind##g SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (lq_tmp$x##892)
match is$SystemFWellFormedness.WFFTKind SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (true)
match is$SystemFWellFormedness.WFFTFunc SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (false)
match is$SystemFWellFormedness.WFFTFV3 SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (false)
match is$SystemFWellFormedness.WFFTFV2 SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (false)
match is$SystemFWellFormedness.WFFTFV1 SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (false)
match is$SystemFWellFormedness.WFFTBasic SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (false)
match SystemFWellFormedness.wfftypSize SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  (((SystemFWellFormedness.wfftypSize lq_tmp$x##894) + 1))
match propOf SystemFWellFormedness.WFFTKind lq_tmp$x##892 lq_tmp$x##893 lq_tmp$x##894  =  ((SystemFWellFormedness.WFFT lq_tmp$x##892 lq_tmp$x##893 Basics.Star))
match SystemFWellFormedness.WFFE##lqdc##$select##SystemFWellFormedness.WFFE##1 SystemFWellFormedness.WFFE lq_tmp$x##879  =  (lq_tmp$x##879)
match is$SystemFWellFormedness.WFFE SystemFWellFormedness.WFFE lq_tmp$x##879  =  (true)
match is$SystemFWellFormedness.WFFEmpty SystemFWellFormedness.WFFEmpty  =  (true)
match is$SystemFWellFormedness.WFFBindT SystemFWellFormedness.WFFEmpty  =  (false)
match is$SystemFWellFormedness.WFFBind SystemFWellFormedness.WFFEmpty  =  (false)
match propOf SystemFWellFormedness.WFFEmpty  =  ((SystemFWellFormedness.WFFE Basics.FEmpty))
match is$SystemFWellFormedness.WFFEmpty SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (false)
match is$SystemFWellFormedness.WFFBindT SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (false)
match SystemFWellFormedness.WFFBind##lqdc##$select##SystemFWellFormedness.WFFBind##1 SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (lq_tmp$x##999)
match SystemFWellFormedness.WFFBind##k SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (lq_tmp$x##998)
match SystemFWellFormedness.WFFBind##t SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (lq_tmp$x##997)
match SystemFWellFormedness.WFFBind##x SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (lq_tmp$x##996)
match SystemFWellFormedness.WFFBind##lqdc##$select##SystemFWellFormedness.WFFBind##5 SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (lq_tmp$x##995)
match SystemFWellFormedness.WFFBind##g SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (lq_tmp$x##994)
match is$SystemFWellFormedness.WFFBind SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  (true)
match propOf SystemFWellFormedness.WFFBind lq_tmp$x##994 lq_tmp$x##995 lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##998 lq_tmp$x##999  =  ((SystemFWellFormedness.WFFE (Basics.FCons lq_tmp$x##996 lq_tmp$x##997 lq_tmp$x##994)))
match is$SystemFWellFormedness.WFFEmpty SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  (false)
match SystemFWellFormedness.WFFBindT##k SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  (lq_tmp$x##1018)
match SystemFWellFormedness.WFFBindT##a SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  (lq_tmp$x##1017)
match SystemFWellFormedness.WFFBindT##lqdc##$select##SystemFWellFormedness.WFFBindT##3 SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  (lq_tmp$x##1016)
match SystemFWellFormedness.WFFBindT##g SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  (lq_tmp$x##1015)
match is$SystemFWellFormedness.WFFBindT SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  (true)
match is$SystemFWellFormedness.WFFBind SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  (false)
match propOf SystemFWellFormedness.WFFBindT lq_tmp$x##1015 lq_tmp$x##1016 lq_tmp$x##1017 lq_tmp$x##1018  =  ((SystemFWellFormedness.WFFE (Basics.FConsT lq_tmp$x##1017 lq_tmp$x##1018 lq_tmp$x##1015)))
match SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##3 SystemFTyping.HasFType lq_tmp$x##1134 lq_tmp$x##1135 lq_tmp$x##1136  =  (lq_tmp$x##1136)
match SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##2 SystemFTyping.HasFType lq_tmp$x##1134 lq_tmp$x##1135 lq_tmp$x##1136  =  (lq_tmp$x##1135)
match SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##1 SystemFTyping.HasFType lq_tmp$x##1134 lq_tmp$x##1135 lq_tmp$x##1136  =  (lq_tmp$x##1134)
match is$SystemFTyping.HasFType SystemFTyping.HasFType lq_tmp$x##1134 lq_tmp$x##1135 lq_tmp$x##1136  =  (true)
match is$SystemFTyping.FTVar3 SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match SystemFTyping.FTBC##b SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (lq_tmp$x##1014)
match SystemFTyping.FTBC##g SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (lq_tmp$x##1013)
match is$SystemFTyping.FTBC SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (true)
match is$SystemFTyping.FTAppT SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  (1)
match propOf SystemFTyping.FTBC lq_tmp$x##1013 lq_tmp$x##1014  =  ((SystemFTyping.HasFType lq_tmp$x##1013 (Basics.Bc lq_tmp$x##1014) (Basics.FTBasic Basics.TBool)))
match is$SystemFTyping.FTVar3 SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match SystemFTyping.FTIC##n SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (lq_tmp$x##915)
match SystemFTyping.FTIC##g SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (lq_tmp$x##914)
match is$SystemFTyping.FTIC SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (true)
match is$SystemFTyping.FTConj SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  (1)
match propOf SystemFTyping.FTIC lq_tmp$x##914 lq_tmp$x##915  =  ((SystemFTyping.HasFType lq_tmp$x##914 (Basics.Ic lq_tmp$x##915) (Basics.FTBasic Basics.TInt)))
match is$SystemFTyping.FTVar3 SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match SystemFTyping.FTVar1##b SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (lq_tmp$x##959)
match SystemFTyping.FTVar1##x SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (lq_tmp$x##958)
match SystemFTyping.FTVar1##g SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (lq_tmp$x##957)
match is$SystemFTyping.FTVar1 SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (true)
match is$SystemFTyping.FTPrm SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  (1)
match propOf SystemFTyping.FTVar1 lq_tmp$x##957 lq_tmp$x##958 lq_tmp$x##959  =  ((SystemFTyping.HasFType (Basics.FCons lq_tmp$x##958 lq_tmp$x##959 lq_tmp$x##957) (Basics.FV lq_tmp$x##958) lq_tmp$x##959))
match is$SystemFTyping.FTVar3 SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match SystemFTyping.FTVar2##b' SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (lq_tmp$x##1024)
match SystemFTyping.FTVar2##y SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (lq_tmp$x##1023)
match SystemFTyping.FTVar2##lqdc##$select##SystemFTyping.FTVar2##3 SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (lq_tmp$x##1022)
match SystemFTyping.FTVar2##b SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (lq_tmp$x##1021)
match SystemFTyping.FTVar2##x SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (lq_tmp$x##1020)
match SystemFTyping.FTVar2##g SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (lq_tmp$x##1019)
match is$SystemFTyping.FTVar2 SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (true)
match is$SystemFTyping.FTVar1 SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  (((SystemFTyping.ftypSize lq_tmp$x##1022) + 1))
match propOf SystemFTyping.FTVar2 lq_tmp$x##1019 lq_tmp$x##1020 lq_tmp$x##1021 lq_tmp$x##1022 lq_tmp$x##1023 lq_tmp$x##1024  =  ((SystemFTyping.HasFType (Basics.FCons lq_tmp$x##1023 lq_tmp$x##1024 lq_tmp$x##1019) (Basics.FV lq_tmp$x##1020) lq_tmp$x##1021))
match SystemFTyping.FTVar3##k SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (lq_tmp$x##1152)
match SystemFTyping.FTVar3##y SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (lq_tmp$x##1151)
match SystemFTyping.FTVar3##lqdc##$select##SystemFTyping.FTVar3##3 SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (lq_tmp$x##1150)
match SystemFTyping.FTVar3##b SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (lq_tmp$x##1149)
match SystemFTyping.FTVar3##x SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (lq_tmp$x##1148)
match SystemFTyping.FTVar3##g SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (lq_tmp$x##1147)
match is$SystemFTyping.FTVar3 SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (true)
match is$SystemFTyping.FTVar2 SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  (((SystemFTyping.ftypSize lq_tmp$x##1150) + 1))
match propOf SystemFTyping.FTVar3 lq_tmp$x##1147 lq_tmp$x##1148 lq_tmp$x##1149 lq_tmp$x##1150 lq_tmp$x##1151 lq_tmp$x##1152  =  ((SystemFTyping.HasFType (Basics.FConsT lq_tmp$x##1151 lq_tmp$x##1152 lq_tmp$x##1147) (Basics.FV lq_tmp$x##1148) lq_tmp$x##1149))
match is$SystemFTyping.FTVar3 SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match SystemFTyping.FTPrm##c SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (lq_tmp$x##878)
match SystemFTyping.FTPrm##g SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (lq_tmp$x##877)
match is$SystemFTyping.FTPrm SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (true)
match is$SystemFTyping.FTLet SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  (1)
match propOf SystemFTyping.FTPrm lq_tmp$x##877 lq_tmp$x##878  =  ((SystemFTyping.HasFType lq_tmp$x##877 (Basics.Prim lq_tmp$x##878) (SystemFTyping.erase_ty lq_tmp$x##878)))
match is$SystemFTyping.FTVar3 SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (false)
match SystemFTyping.FTAbs##lqdc##$select##SystemFTyping.FTAbs##1 SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##876)
match SystemFTyping.FTAbs##y SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##875)
match SystemFTyping.FTAbs##b' SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##874)
match SystemFTyping.FTAbs##e SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##873)
match SystemFTyping.FTAbs##lqdc##$select##SystemFTyping.FTAbs##5 SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##872)
match SystemFTyping.FTAbs##k SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##871)
match SystemFTyping.FTAbs##b SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##870)
match SystemFTyping.FTAbs##x SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##869)
match SystemFTyping.FTAbs##g SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (lq_tmp$x##868)
match is$SystemFTyping.FTAbs SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (true)
match SystemFTyping.ftypSize SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  (((SystemFTyping.ftypSize lq_tmp$x##876) + 1))
match propOf SystemFTyping.FTAbs lq_tmp$x##868 lq_tmp$x##869 lq_tmp$x##870 lq_tmp$x##871 lq_tmp$x##872 lq_tmp$x##873 lq_tmp$x##874 lq_tmp$x##875 lq_tmp$x##876  =  ((SystemFTyping.HasFType lq_tmp$x##868 (Basics.Lambda lq_tmp$x##869 lq_tmp$x##873) (Basics.FTFunc lq_tmp$x##870 lq_tmp$x##874)))
match is$SystemFTyping.FTVar3 SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match SystemFTyping.FTApp##lqdc##$select##SystemFTyping.FTApp##1 SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (lq_tmp$x##976)
match SystemFTyping.FTApp##e' SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (lq_tmp$x##975)
match SystemFTyping.FTApp##lqdc##$select##SystemFTyping.FTApp##3 SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (lq_tmp$x##974)
match SystemFTyping.FTApp##b' SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (lq_tmp$x##973)
match SystemFTyping.FTApp##b SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (lq_tmp$x##972)
match SystemFTyping.FTApp##e SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (lq_tmp$x##971)
match SystemFTyping.FTApp##g SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (lq_tmp$x##970)
match is$SystemFTyping.FTApp SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (true)
match is$SystemFTyping.FTAnn SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  ((((SystemFTyping.ftypSize lq_tmp$x##974) + (SystemFTyping.ftypSize lq_tmp$x##976)) + 1))
match propOf SystemFTyping.FTApp lq_tmp$x##970 lq_tmp$x##971 lq_tmp$x##972 lq_tmp$x##973 lq_tmp$x##974 lq_tmp$x##975 lq_tmp$x##976  =  ((SystemFTyping.HasFType lq_tmp$x##970 (Basics.App lq_tmp$x##971 lq_tmp$x##975) lq_tmp$x##973))
match is$SystemFTyping.FTVar3 SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match SystemFTyping.FTAbsT##lqdc##$select##SystemFTyping.FTAbsT##1 SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (lq_tmp$x##955)
match SystemFTyping.FTAbsT##a' SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (lq_tmp$x##954)
match SystemFTyping.FTAbsT##b SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (lq_tmp$x##953)
match SystemFTyping.FTAbsT##e SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (lq_tmp$x##952)
match SystemFTyping.FTAbsT##k SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (lq_tmp$x##951)
match SystemFTyping.FTAbsT##a SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (lq_tmp$x##950)
match SystemFTyping.FTAbsT##g SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (lq_tmp$x##949)
match is$SystemFTyping.FTAbsT SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (true)
match is$SystemFTyping.FTAbs SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  (((SystemFTyping.ftypSize lq_tmp$x##955) + 1))
match propOf SystemFTyping.FTAbsT lq_tmp$x##949 lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952 lq_tmp$x##953 lq_tmp$x##954 lq_tmp$x##955  =  ((SystemFTyping.HasFType lq_tmp$x##949 (Basics.LambdaT lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##952) (Basics.FTPoly lq_tmp$x##950 lq_tmp$x##951 lq_tmp$x##953)))
match is$SystemFTyping.FTVar3 SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match SystemFTyping.FTAppT##lqdc##$select##SystemFTyping.FTAppT##1 SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1077)
match SystemFTyping.FTAppT##rt SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1076)
match SystemFTyping.FTAppT##lqdc##$select##SystemFTyping.FTAppT##3 SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1075)
match SystemFTyping.FTAppT##t' SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1074)
match SystemFTyping.FTAppT##k SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1073)
match SystemFTyping.FTAppT##a SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1072)
match SystemFTyping.FTAppT##e SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1071)
match SystemFTyping.FTAppT##g SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (lq_tmp$x##1070)
match is$SystemFTyping.FTAppT SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (true)
match is$SystemFTyping.FTApp SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  (((SystemFTyping.ftypSize lq_tmp$x##1075) + 1))
match propOf SystemFTyping.FTAppT lq_tmp$x##1070 lq_tmp$x##1071 lq_tmp$x##1072 lq_tmp$x##1073 lq_tmp$x##1074 lq_tmp$x##1075 lq_tmp$x##1076 lq_tmp$x##1077  =  ((SystemFTyping.HasFType lq_tmp$x##1070 (Basics.AppT lq_tmp$x##1071 lq_tmp$x##1076) (Basics.ftsubBV lq_tmp$x##1072 (Basics.erase lq_tmp$x##1076) lq_tmp$x##1074)))
match is$SystemFTyping.FTVar3 SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match SystemFTyping.FTLet##lqdc##$select##SystemFTyping.FTLet##1 SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1060)
match SystemFTyping.FTLet##y SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1059)
match SystemFTyping.FTLet##b' SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1058)
match SystemFTyping.FTLet##e SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1057)
match SystemFTyping.FTLet##x SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1056)
match SystemFTyping.FTLet##lqdc##$select##SystemFTyping.FTLet##6 SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1055)
match SystemFTyping.FTLet##b SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1054)
match SystemFTyping.FTLet##e_x SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1053)
match SystemFTyping.FTLet##g SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (lq_tmp$x##1052)
match is$SystemFTyping.FTLet SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (true)
match is$SystemFTyping.FTIC SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  ((((SystemFTyping.ftypSize lq_tmp$x##1055) + (SystemFTyping.ftypSize lq_tmp$x##1060)) + 1))
match propOf SystemFTyping.FTLet lq_tmp$x##1052 lq_tmp$x##1053 lq_tmp$x##1054 lq_tmp$x##1055 lq_tmp$x##1056 lq_tmp$x##1057 lq_tmp$x##1058 lq_tmp$x##1059 lq_tmp$x##1060  =  ((SystemFTyping.HasFType lq_tmp$x##1052 (Basics.Let lq_tmp$x##1056 lq_tmp$x##1053 lq_tmp$x##1057) lq_tmp$x##1058))
match is$SystemFTyping.FTVar3 SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTConj SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTBC SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match SystemFTyping.FTAnn##lqdc##$select##SystemFTyping.FTAnn##1 SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (lq_tmp$x##1164)
match SystemFTyping.FTAnn##t1 SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (lq_tmp$x##1163)
match SystemFTyping.FTAnn##b SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (lq_tmp$x##1162)
match SystemFTyping.FTAnn##e SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (lq_tmp$x##1161)
match SystemFTyping.FTAnn##g SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (lq_tmp$x##1160)
match is$SystemFTyping.FTAnn SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (true)
match is$SystemFTyping.FTAbsT SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  (((SystemFTyping.ftypSize lq_tmp$x##1164) + 1))
match propOf SystemFTyping.FTAnn lq_tmp$x##1160 lq_tmp$x##1161 lq_tmp$x##1162 lq_tmp$x##1163 lq_tmp$x##1164  =  ((SystemFTyping.HasFType lq_tmp$x##1160 (Basics.Annot lq_tmp$x##1161 lq_tmp$x##1163) lq_tmp$x##1162))
match is$SystemFTyping.FTVar3 SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTVar2 SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTVar1 SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTPrm SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTLet SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTIC SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match SystemFTyping.FTConj##lqdc##$select##SystemFTyping.FTConj##1 SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (lq_tmp$x##929)
match SystemFTyping.FTConj##e' SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (lq_tmp$x##928)
match SystemFTyping.FTConj##lqdc##$select##SystemFTyping.FTConj##3 SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (lq_tmp$x##927)
match SystemFTyping.FTConj##e SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (lq_tmp$x##926)
match SystemFTyping.FTConj##g SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (lq_tmp$x##925)
match is$SystemFTyping.FTConj SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (true)
match is$SystemFTyping.FTBC SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTAppT SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTApp SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTAnn SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTAbsT SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match is$SystemFTyping.FTAbs SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  (false)
match SystemFTyping.ftypSize SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  ((((SystemFTyping.ftypSize lq_tmp$x##927) + (SystemFTyping.ftypSize lq_tmp$x##929)) + 1))
match propOf SystemFTyping.FTConj lq_tmp$x##925 lq_tmp$x##926 lq_tmp$x##927 lq_tmp$x##928 lq_tmp$x##929  =  ((SystemFTyping.HasFType lq_tmp$x##925 (Basics.Conj lq_tmp$x##926 lq_tmp$x##928) (Basics.FTBasic Basics.TBool)))
match WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##3 WellFormedness.WFType lq_tmp$x##1142 lq_tmp$x##1143 lq_tmp$x##1144  =  (lq_tmp$x##1144)
match WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##2 WellFormedness.WFType lq_tmp$x##1142 lq_tmp$x##1143 lq_tmp$x##1144  =  (lq_tmp$x##1143)
match WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##1 WellFormedness.WFType lq_tmp$x##1142 lq_tmp$x##1143 lq_tmp$x##1144  =  (lq_tmp$x##1142)
match is$WellFormedness.WFType WellFormedness.WFType lq_tmp$x##1142 lq_tmp$x##1143 lq_tmp$x##1144  =  (true)
match is$WellFormedness.WFVar3 WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match is$WellFormedness.WFVar2 WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match is$WellFormedness.WFVar1 WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match is$WellFormedness.WFRefn WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match is$WellFormedness.WFPoly WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match is$WellFormedness.WFKind WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match is$WellFormedness.WFFunc WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match is$WellFormedness.WFExis WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (false)
match WellFormedness.WFBase##tt WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (lq_tmp$x##1063)
match WellFormedness.WFBase##b WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (lq_tmp$x##1062)
match WellFormedness.WFBase##g WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (lq_tmp$x##1061)
match is$WellFormedness.WFBase WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (true)
match WellFormedness.wftypSize WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  (1)
match propOf WellFormedness.WFBase lq_tmp$x##1061 lq_tmp$x##1062 lq_tmp$x##1063  =  ((WellFormedness.WFType lq_tmp$x##1061 (Basics.TRefn lq_tmp$x##1062 Basics.Z lq_tmp$x##1063) Basics.Base))
match is$WellFormedness.WFVar3 WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match is$WellFormedness.WFVar2 WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match is$WellFormedness.WFVar1 WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match WellFormedness.WFRefn##lqdc##$select##WellFormedness.WFRefn##1 WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1035)
match WellFormedness.WFRefn##y WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1034)
match WellFormedness.WFRefn##p WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1033)
match WellFormedness.WFRefn##lqdc##$select##WellFormedness.WFRefn##4 WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1032)
match WellFormedness.WFRefn##tt WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1031)
match WellFormedness.WFRefn##b WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1030)
match WellFormedness.WFRefn##x WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1029)
match WellFormedness.WFRefn##g WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (lq_tmp$x##1028)
match is$WellFormedness.WFRefn WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (true)
match is$WellFormedness.WFPoly WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match is$WellFormedness.WFKind WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match is$WellFormedness.WFFunc WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match is$WellFormedness.WFExis WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match is$WellFormedness.WFBase WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (false)
match WellFormedness.wftypSize WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  (((WellFormedness.wftypSize lq_tmp$x##1032) + 1))
match propOf WellFormedness.WFRefn lq_tmp$x##1028 lq_tmp$x##1029 lq_tmp$x##1030 lq_tmp$x##1031 lq_tmp$x##1032 lq_tmp$x##1033 lq_tmp$x##1034 lq_tmp$x##1035  =  ((WellFormedness.WFType lq_tmp$x##1028 (Basics.TRefn lq_tmp$x##1030 lq_tmp$x##1029 lq_tmp$x##1033) Basics.Base))
match is$WellFormedness.WFVar3 WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match is$WellFormedness.WFVar2 WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match WellFormedness.WFVar1##k WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (lq_tmp$x##1132)
match WellFormedness.WFVar1##tt WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (lq_tmp$x##1131)
match WellFormedness.WFVar1##a WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (lq_tmp$x##1130)
match WellFormedness.WFVar1##g WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (lq_tmp$x##1129)
match is$WellFormedness.WFVar1 WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (true)
match is$WellFormedness.WFRefn WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match is$WellFormedness.WFPoly WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match is$WellFormedness.WFKind WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match is$WellFormedness.WFFunc WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match is$WellFormedness.WFExis WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match is$WellFormedness.WFBase WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (false)
match WellFormedness.wftypSize WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  (1)
match propOf WellFormedness.WFVar1 lq_tmp$x##1129 lq_tmp$x##1130 lq_tmp$x##1131 lq_tmp$x##1132  =  ((WellFormedness.WFType (Basics.ConsT lq_tmp$x##1130 lq_tmp$x##1132 lq_tmp$x##1129) (Basics.TRefn (Basics.FTV lq_tmp$x##1130) Basics.Z lq_tmp$x##1131) lq_tmp$x##1132))
match is$WellFormedness.WFVar3 WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match WellFormedness.WFVar2##t WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (lq_tmp$x##940)
match WellFormedness.WFVar2##y WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (lq_tmp$x##939)
match WellFormedness.WFVar2##lqdc##$select##WellFormedness.WFVar2##3 WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (lq_tmp$x##938)
match WellFormedness.WFVar2##k WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (lq_tmp$x##937)
match WellFormedness.WFVar2##tt WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (lq_tmp$x##936)
match WellFormedness.WFVar2##a WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (lq_tmp$x##935)
match WellFormedness.WFVar2##g WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (lq_tmp$x##934)
match is$WellFormedness.WFVar2 WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (true)
match is$WellFormedness.WFVar1 WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match is$WellFormedness.WFRefn WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match is$WellFormedness.WFPoly WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match is$WellFormedness.WFKind WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match is$WellFormedness.WFFunc WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match is$WellFormedness.WFExis WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match is$WellFormedness.WFBase WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (false)
match WellFormedness.wftypSize WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  (((WellFormedness.wftypSize lq_tmp$x##938) + 1))
match propOf WellFormedness.WFVar2 lq_tmp$x##934 lq_tmp$x##935 lq_tmp$x##936 lq_tmp$x##937 lq_tmp$x##938 lq_tmp$x##939 lq_tmp$x##940  =  ((WellFormedness.WFType (Basics.Cons lq_tmp$x##939 lq_tmp$x##940 lq_tmp$x##934) (Basics.TRefn (Basics.FTV lq_tmp$x##935) Basics.Z lq_tmp$x##936) lq_tmp$x##937))
match WellFormedness.WFVar3##k' WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (lq_tmp$x##901)
match WellFormedness.WFVar3##a' WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (lq_tmp$x##900)
match WellFormedness.WFVar3##lqdc##$select##WellFormedness.WFVar3##3 WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (lq_tmp$x##899)
match WellFormedness.WFVar3##k WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (lq_tmp$x##898)
match WellFormedness.WFVar3##tt WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (lq_tmp$x##897)
match WellFormedness.WFVar3##a WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (lq_tmp$x##896)
match WellFormedness.WFVar3##g WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (lq_tmp$x##895)
match is$WellFormedness.WFVar3 WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (true)
match is$WellFormedness.WFVar2 WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match is$WellFormedness.WFVar1 WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match is$WellFormedness.WFRefn WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match is$WellFormedness.WFPoly WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match is$WellFormedness.WFKind WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match is$WellFormedness.WFFunc WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match is$WellFormedness.WFExis WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match is$WellFormedness.WFBase WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (false)
match WellFormedness.wftypSize WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  (((WellFormedness.wftypSize lq_tmp$x##899) + 1))
match propOf WellFormedness.WFVar3 lq_tmp$x##895 lq_tmp$x##896 lq_tmp$x##897 lq_tmp$x##898 lq_tmp$x##899 lq_tmp$x##900 lq_tmp$x##901  =  ((WellFormedness.WFType (Basics.ConsT lq_tmp$x##900 lq_tmp$x##901 lq_tmp$x##895) (Basics.TRefn (Basics.FTV lq_tmp$x##896) Basics.Z lq_tmp$x##897) lq_tmp$x##898))
match is$WellFormedness.WFVar3 WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match is$WellFormedness.WFVar2 WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match is$WellFormedness.WFVar1 WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match is$WellFormedness.WFRefn WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match is$WellFormedness.WFPoly WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match is$WellFormedness.WFKind WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match WellFormedness.WFFunc##lqdc##$select##WellFormedness.WFFunc##1 WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##910)
match WellFormedness.WFFunc##y WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##909)
match WellFormedness.WFFunc##k WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##908)
match WellFormedness.WFFunc##t WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##907)
match WellFormedness.WFFunc##lqdc##$select##WellFormedness.WFFunc##5 WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##906)
match WellFormedness.WFFunc##k_x WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##905)
match WellFormedness.WFFunc##t_x WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##904)
match WellFormedness.WFFunc##x WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##903)
match WellFormedness.WFFunc##g WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (lq_tmp$x##902)
match is$WellFormedness.WFFunc WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (true)
match is$WellFormedness.WFExis WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match is$WellFormedness.WFBase WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  (false)
match WellFormedness.wftypSize WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  ((((WellFormedness.wftypSize lq_tmp$x##906) + (WellFormedness.wftypSize lq_tmp$x##910)) + 1))
match propOf WellFormedness.WFFunc lq_tmp$x##902 lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##905 lq_tmp$x##906 lq_tmp$x##907 lq_tmp$x##908 lq_tmp$x##909 lq_tmp$x##910  =  ((WellFormedness.WFType lq_tmp$x##902 (Basics.TFunc lq_tmp$x##903 lq_tmp$x##904 lq_tmp$x##907) Basics.Star))
match is$WellFormedness.WFVar3 WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match is$WellFormedness.WFVar2 WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match is$WellFormedness.WFVar1 WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match is$WellFormedness.WFRefn WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match is$WellFormedness.WFPoly WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match is$WellFormedness.WFKind WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match is$WellFormedness.WFFunc WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match WellFormedness.WFExis##lqdc##$select##WellFormedness.WFExis##1 WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##888)
match WellFormedness.WFExis##y WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##887)
match WellFormedness.WFExis##k WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##886)
match WellFormedness.WFExis##t WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##885)
match WellFormedness.WFExis##lqdc##$select##WellFormedness.WFExis##5 WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##884)
match WellFormedness.WFExis##k_x WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##883)
match WellFormedness.WFExis##t_x WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##882)
match WellFormedness.WFExis##x WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##881)
match WellFormedness.WFExis##g WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (lq_tmp$x##880)
match is$WellFormedness.WFExis WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (true)
match is$WellFormedness.WFBase WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  (false)
match WellFormedness.wftypSize WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  ((((WellFormedness.wftypSize lq_tmp$x##884) + (WellFormedness.wftypSize lq_tmp$x##888)) + 1))
match propOf WellFormedness.WFExis lq_tmp$x##880 lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##883 lq_tmp$x##884 lq_tmp$x##885 lq_tmp$x##886 lq_tmp$x##887 lq_tmp$x##888  =  ((WellFormedness.WFType lq_tmp$x##880 (Basics.TExists lq_tmp$x##881 lq_tmp$x##882 lq_tmp$x##885) lq_tmp$x##886))
match is$WellFormedness.WFVar3 WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match is$WellFormedness.WFVar2 WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match is$WellFormedness.WFVar1 WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match is$WellFormedness.WFRefn WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match WellFormedness.WFPoly##lqdc##$select##WellFormedness.WFPoly##1 WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (lq_tmp$x##990)
match WellFormedness.WFPoly##a' WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (lq_tmp$x##989)
match WellFormedness.WFPoly##k_t WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (lq_tmp$x##988)
match WellFormedness.WFPoly##t WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (lq_tmp$x##987)
match WellFormedness.WFPoly##k WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (lq_tmp$x##986)
match WellFormedness.WFPoly##a WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (lq_tmp$x##985)
match WellFormedness.WFPoly##g WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (lq_tmp$x##984)
match is$WellFormedness.WFPoly WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (true)
match is$WellFormedness.WFKind WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match is$WellFormedness.WFFunc WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match is$WellFormedness.WFExis WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match is$WellFormedness.WFBase WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (false)
match WellFormedness.wftypSize WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  (((WellFormedness.wftypSize lq_tmp$x##990) + 1))
match propOf WellFormedness.WFPoly lq_tmp$x##984 lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987 lq_tmp$x##988 lq_tmp$x##989 lq_tmp$x##990  =  ((WellFormedness.WFType lq_tmp$x##984 (Basics.TPoly lq_tmp$x##985 lq_tmp$x##986 lq_tmp$x##987) Basics.Star))
match is$WellFormedness.WFVar3 WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match is$WellFormedness.WFVar2 WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match is$WellFormedness.WFVar1 WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match is$WellFormedness.WFRefn WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match is$WellFormedness.WFPoly WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match WellFormedness.WFKind##lqdc##$select##WellFormedness.WFKind##1 WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (lq_tmp$x##1002)
match WellFormedness.WFKind##t WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (lq_tmp$x##1001)
match WellFormedness.WFKind##g WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (lq_tmp$x##1000)
match is$WellFormedness.WFKind WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (true)
match is$WellFormedness.WFFunc WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match is$WellFormedness.WFExis WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match is$WellFormedness.WFBase WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (false)
match WellFormedness.wftypSize WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  (((WellFormedness.wftypSize lq_tmp$x##1002) + 1))
match propOf WellFormedness.WFKind lq_tmp$x##1000 lq_tmp$x##1001 lq_tmp$x##1002  =  ((WellFormedness.WFType lq_tmp$x##1000 lq_tmp$x##1001 Basics.Star))
match WellFormedness.WFEnv##lqdc##$select##WellFormedness.WFEnv##1 WellFormedness.WFEnv lq_tmp$x##943  =  (lq_tmp$x##943)
match is$WellFormedness.WFEnv WellFormedness.WFEnv lq_tmp$x##943  =  (true)
match is$WellFormedness.WFEEmpty WellFormedness.WFEEmpty  =  (true)
match is$WellFormedness.WFEBindT WellFormedness.WFEEmpty  =  (false)
match is$WellFormedness.WFEBind WellFormedness.WFEEmpty  =  (false)
match propOf WellFormedness.WFEEmpty  =  ((WellFormedness.WFEnv Basics.Empty))
match is$WellFormedness.WFEEmpty WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (false)
match is$WellFormedness.WFEBindT WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (false)
match WellFormedness.WFEBind##lqdc##$select##WellFormedness.WFEBind##1 WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (lq_tmp$x##1051)
match WellFormedness.WFEBind##k WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (lq_tmp$x##1050)
match WellFormedness.WFEBind##t WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (lq_tmp$x##1049)
match WellFormedness.WFEBind##x WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (lq_tmp$x##1048)
match WellFormedness.WFEBind##lqdc##$select##WellFormedness.WFEBind##5 WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (lq_tmp$x##1047)
match WellFormedness.WFEBind##g WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (lq_tmp$x##1046)
match is$WellFormedness.WFEBind WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  (true)
match propOf WellFormedness.WFEBind lq_tmp$x##1046 lq_tmp$x##1047 lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1050 lq_tmp$x##1051  =  ((WellFormedness.WFEnv (Basics.Cons lq_tmp$x##1048 lq_tmp$x##1049 lq_tmp$x##1046)))
match is$WellFormedness.WFEEmpty WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  (false)
match WellFormedness.WFEBindT##k WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  (lq_tmp$x##1140)
match WellFormedness.WFEBindT##a WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  (lq_tmp$x##1139)
match WellFormedness.WFEBindT##lqdc##$select##WellFormedness.WFEBindT##3 WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  (lq_tmp$x##1138)
match WellFormedness.WFEBindT##g WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  (lq_tmp$x##1137)
match is$WellFormedness.WFEBindT WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  (true)
match is$WellFormedness.WFEBind WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  (false)
match propOf WellFormedness.WFEBindT lq_tmp$x##1137 lq_tmp$x##1138 lq_tmp$x##1139 lq_tmp$x##1140  =  ((WellFormedness.WFEnv (Basics.ConsT lq_tmp$x##1139 lq_tmp$x##1140 lq_tmp$x##1137)))
expand [1 : True; 2 : True]
rewrite  []




cut $k_##1486


constant WellFormedness.WFPoly##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant is$Basics.Or : (func(0 , [Basics.Prim; bool]))
constant SystemFWellFormedness.WFFTFunc##k1 : (func(0 , [SystemFWellFormedness.WFFT;
                                                         Basics.Kind]))
constant Basics.TRefn : (func(0 , [Basics.Basic;
                                   Basics.RVname;
                                   Basics.Expr;
                                   Basics.Type]))
constant GHC.Base.id : (func(1 , [@(0); @(0)]))
constant Basics.TExists##lqdc##$select##Basics.TExists##2 : (func(0 , [Basics.Type;
                                                                       Basics.Type]))
constant Basics.TFunc##lqdc##$select##Basics.TFunc##2 : (func(0 , [Basics.Type;
                                                                   Basics.Type]))
constant WellFormedness.WFVar3##k : (func(0 , [WellFormedness.WFType;
                                               Basics.Kind]))
constant SystemFTyping.refn_pred_freeBV : (func(0 , [Basics.Prim;
                                                     (Set_Set int)]))
constant Basics.And : (Basics.Prim)
constant SystemFWellFormedness.WFFTFV3##g : (func(0 , [SystemFWellFormedness.WFFT;
                                                       Basics.FEnv]))
constant Basics.in_envF : (func(0 , [int; Basics.FEnv; bool]))
constant SystemFTyping.tybc : (func(0 , [bool; Basics.Type]))
constant Basics.FConsT : (func(0 , [int;
                                    Basics.Kind;
                                    Basics.FEnv;
                                    Basics.FEnv]))
constant listElts : (func(1 , [[@(0)]; (Set_Set @(0))]))
constant SystemFTyping.FTVar2##y : (func(0 , [SystemFTyping.HasFType;
                                              int]))
constant GHC.List.init : (func(1 , [[@(0)]; [@(0)]]))
constant WellFormedness.WFBase : (func(0 , [Basics.Env;
                                            Basics.Basic;
                                            Basics.Expr;
                                            WellFormedness.WFType]))
constant Basics.unbind_tvT : (func(0 , [int;
                                        int;
                                        Basics.Type;
                                        Basics.Type]))
constant Basics.Annot##lqdc##$select##Basics.Annot##2 : (func(0 , [Basics.Expr;
                                                                   Basics.Type]))
constant addrLen : (func(0 , [Str; int]))
constant is$Basics.Empty : (func(0 , [Basics.Env; bool]))
constant is$SystemFWellFormedness.WFFTFV2 : (func(0 , [SystemFWellFormedness.WFFT;
                                                       bool]))
constant SystemFTyping.FTAbsT##b : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FType]))
constant Basics.TPoly##lqdc##$select##Basics.TPoly##2 : (func(0 , [Basics.Type;
                                                                   Basics.Kind]))
constant SystemFWellFormedness.WFFTFV2##a' : (func(0 , [SystemFWellFormedness.WFFT;
                                                        int]))
constant SystemFTyping.HasFType : (func(0 , [Basics.FEnv;
                                             Basics.Expr;
                                             Basics.FType;
                                             SystemFTyping.HasFTypeP]))
constant papp5 : (func(10 , [(Pred @(0) @(1) @(2) @(3) @(4));
                             @(5);
                             @(6);
                             @(7);
                             @(8);
                             @(9);
                             bool]))
constant Language.Haskell.Liquid.ProofCombinators.Admit : (Language.Haskell.Liquid.ProofCombinators.QED)
constant GHC.List.iterate : (func(1 , [func(0 , [@(0); @(0)]);
                                       @(0);
                                       [@(0)]]))
constant SystemFTyping.FTVar1##b : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FType]))
constant x_Tuple21 : (func(2 , [(Tuple @(0) @(1)); @(0)]))
constant Basics.lem_maxp_list1 : (func(0 , [Basics.Env;
                                            int;
                                            bool]))
constant is$Basics.Not : (func(0 , [Basics.Prim; bool]))
constant WellFormedness.isWFRefn : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant GHC.Classes.$61$$61$ : (func(1 , [@(0); @(0); bool]))
constant is$SystemFWellFormedness.WFFEmpty : (func(0 , [SystemFWellFormedness.WFFE;
                                                        bool]))
constant Basics.BV##lqdc##$select##Basics.BV##1 : (func(0 , [Basics.Expr;
                                                             int]))
constant SystemFTyping.FTAbs##lqdc##$select##SystemFTyping.FTAbs##1 : (func(0 , [SystemFTyping.HasFType;
                                                                                 SystemFTyping.HasFType]))
constant GHC.Types.C# : (func(0 , [Char; Char]))
constant GHC.List.drop : (func(1 , [int; [@(0)]; [@(0)]]))
constant Basics.Prim##lqdc##$select##Basics.Prim##1 : (func(0 , [Basics.Expr;
                                                                 Basics.Prim]))
constant SystemFTyping.FTAbsT##lqdc##$select##SystemFTyping.FTAbsT##1 : (func(0 , [SystemFTyping.HasFType;
                                                                                   SystemFTyping.HasFType]))
constant SystemFWellFormedness.WFFTKind##g : (func(0 , [SystemFWellFormedness.WFFT;
                                                        Basics.FEnv]))
constant WellFormedness.WFRefn##lqdc##$select##WellFormedness.WFRefn##1 : (func(0 , [WellFormedness.WFType;
                                                                                     SystemFTyping.HasFType]))
constant WellFormedness.WFFunc##x : (func(0 , [WellFormedness.WFType;
                                               int]))
constant Basics.Let##lqdc##$select##Basics.Let##1 : (func(0 , [Basics.Expr;
                                                               int]))
constant SystemFWellFormedness.WFFTFunc##lqdc##$select##SystemFWellFormedness.WFFTFunc##1 : (func(0 , [SystemFWellFormedness.WFFT;
                                                                                                       SystemFWellFormedness.WFFT]))
constant SystemFWellFormedness.WFFTPoly##lqdc##$select##SystemFWellFormedness.WFFTPoly##1 : (func(0 , [SystemFWellFormedness.WFFT;
                                                                                                       SystemFWellFormedness.WFFT]))
constant Basics.Lambda##lqdc##$select##Basics.Lambda##1 : (func(0 , [Basics.Expr;
                                                                     int]))
constant WellFormedness.WFFunc##lqdc##$select##WellFormedness.WFFunc##1 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant SystemFWellFormedness.WFFTFV3##k' : (func(0 , [SystemFWellFormedness.WFFT;
                                                        Basics.Kind]))
constant is$SystemFWellFormedness.WFFBindT : (func(0 , [SystemFWellFormedness.WFFE;
                                                        bool]))
constant is$Basics.Prim : (func(0 , [Basics.Expr; bool]))
constant Basics.AppT##lqdc##$select##Basics.AppT##1 : (func(0 , [Basics.Expr;
                                                                 Basics.Expr]))
constant WellFormedness.WFVar2##y : (func(0 , [WellFormedness.WFType;
                                               int]))
constant Basics.chgFTV : (func(0 , [int;
                                    int;
                                    Basics.Expr;
                                    Basics.Expr]))
constant SystemFTyping.FTLet##lqdc##$select##SystemFTyping.FTLet##1 : (func(0 , [SystemFTyping.HasFType;
                                                                                 SystemFTyping.HasFType]))
constant Set_cap : (func(1 , [(Set_Set @(0));
                              (Set_Set @(0));
                              (Set_Set @(0))]))
constant Basics.maxpListF : (func(0 , [Basics.FEnv; int]))
constant WellFormedness.WFEnv##lqdc##$select##WellFormedness.WFEnv##1 : (func(0 , [WellFormedness.WFEnvP;
                                                                                   Basics.Env]))
constant Basics.FV##lqdc##$select##Basics.FV##1 : (func(0 , [Basics.Expr;
                                                             int]))
constant SystemFTyping.FTConj##lqdc##$select##SystemFTyping.FTConj##1 : (func(0 , [SystemFTyping.HasFType;
                                                                                   SystemFTyping.HasFType]))
constant Basics.Eql : (Basics.Prim)
constant SystemFTyping.FTApp##lqdc##$select##SystemFTyping.FTApp##1 : (func(0 , [SystemFTyping.HasFType;
                                                                                 SystemFTyping.HasFType]))
constant Basics.Leq : (Basics.Prim)
constant is$36$GHC.Types.$91$$93$ : (func(1 , [[@(0)]; bool]))
constant Basics.tfreeBTV : (func(0 , [Basics.Type; (Set_Set int)]))
constant Basics.FTFunc##lqdc##$select##Basics.FTFunc##1 : (func(0 , [Basics.FType;
                                                                     Basics.FType]))
constant is$Basics.Leqn : (func(0 , [Basics.Prim; bool]))
constant Basics.tsubFV : (func(0 , [int;
                                    Basics.Expr;
                                    Basics.Type;
                                    Basics.Type]))
constant Data.Foldable.length : (func(2 , [(@(1) @(0)); int]))
constant Basics.LambdaT##lqdc##$select##Basics.LambdaT##1 : (func(0 , [Basics.Expr;
                                                                       int]))
constant x_Tuple33 : (func(3 , [(Tuple @(0) @(1) @(2)); @(2)]))
constant Basics.Ic##lqdc##$select##Basics.Ic##1 : (func(0 , [Basics.Expr;
                                                             int]))
constant GHC.Maybe.Just##lqdc##$select##GHC.Maybe.Just##1 : (func(1 , [(GHC.Maybe.Maybe @(0));
                                                                       @(0)]))
constant is$36$GHC.Tuple.$40$$44$$41$ : (func(2 , [(Tuple @(0) @(1));
                                                   bool]))
constant SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##1 : (func(0 , [SystemFWellFormedness.WFFTP;
                                                                                               Basics.FEnv]))
constant is$WellFormedness.WFEEmpty : (func(0 , [WellFormedness.WFEnv;
                                                 bool]))
constant GHC.Types.LT : (GHC.Types.Ordering)
constant WellFormedness.WFExis##lqdc##$select##WellFormedness.WFExis##1 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant SystemFTyping.FTVar2##b : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FType]))
constant Set_sng : (func(1 , [@(0); (Set_Set @(0))]))
constant SystemFTyping.FTAnn##lqdc##$select##SystemFTyping.FTAnn##1 : (func(0 , [SystemFTyping.HasFType;
                                                                                 SystemFTyping.HasFType]))
constant WellFormedness.WFVar3 : (func(0 , [Basics.Env;
                                            int;
                                            Basics.Expr;
                                            Basics.Kind;
                                            WellFormedness.WFType;
                                            int;
                                            Basics.Kind;
                                            WellFormedness.WFType]))
constant WellFormedness.isWFVar1 : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant Basics.subFTV : (func(0 , [int;
                                    Basics.Type;
                                    Basics.Expr;
                                    Basics.Expr]))
constant WellFormedness.WFKind##lqdc##$select##WellFormedness.WFKind##1 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant WellFormedness.WFExis##y : (func(0 , [WellFormedness.WFType;
                                               int]))
constant is$WellFormedness.WFEBindT : (func(0 , [WellFormedness.WFEnv;
                                                 bool]))
constant SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##1 : (func(0 , [SystemFTyping.HasFTypeP;
                                                                                       Basics.FEnv]))
constant WellFormedness.WFPoly##lqdc##$select##WellFormedness.WFPoly##1 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant Basics.App##lqdc##$select##Basics.App##1 : (func(0 , [Basics.Expr;
                                                               Basics.Expr]))
constant is$WellFormedness.WFKind : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant GHC.List.replicate : (func(1 , [int; @(0); [@(0)]]))
constant SystemFTyping.FTVar3##k : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Kind]))
constant GHC.List.zipWith : (func(3 , [func(0 , [@(0);
                                                 @(1);
                                                 @(2)]);
                                       [@(0)];
                                       [@(1)];
                                       [@(2)]]))
constant SystemFWellFormedness.WFFTKind##lqdc##$select##SystemFWellFormedness.WFFTKind##1 : (func(0 , [SystemFWellFormedness.WFFT;
                                                                                                       SystemFWellFormedness.WFFT]))
constant Basics.FTPoly : (func(0 , [int;
                                    Basics.Kind;
                                    Basics.FType;
                                    Basics.FType]))
constant Basics.FCons##g : (func(0 , [Basics.FEnv; Basics.FEnv]))
constant Basics.freeBV : (func(0 , [Basics.Expr; (Set_Set int)]))
constant SystemFTyping.FTLet : (func(0 , [Basics.FEnv;
                                          Basics.Expr;
                                          Basics.FType;
                                          SystemFTyping.HasFType;
                                          int;
                                          Basics.Expr;
                                          Basics.FType;
                                          int;
                                          SystemFTyping.HasFType;
                                          SystemFTyping.HasFType]))
constant Basics.envsize : (func(0 , [Basics.Env; int]))
constant SystemFWellFormedness.WFFBind##lqdc##$select##SystemFWellFormedness.WFFBind##1 : (func(0 , [SystemFWellFormedness.WFFE;
                                                                                                     SystemFWellFormedness.WFFT]))
constant Basics.Conj##lqdc##$select##Basics.Conj##1 : (func(0 , [Basics.Expr;
                                                                 Basics.Expr]))
constant Basics.Bc##lqdc##$select##Basics.Bc##1 : (func(0 , [Basics.Expr;
                                                             bool]))
constant WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##1 : (func(0 , [WellFormedness.WFTypeP;
                                                                                     Basics.Env]))
constant Basics.Leqn##lqdc##$select##Basics.Leqn##1 : (func(0 , [Basics.Prim;
                                                                 int]))
constant Basics.BTV : (func(0 , [int; Basics.Basic]))
constant GHC.Classes.$62$$61$ : (func(1 , [@(0); @(0); bool]))
constant Basics.FTPoly##lqdc##$select##Basics.FTPoly##1 : (func(0 , [Basics.FType;
                                                                     int]))
constant SystemFTyping.inType : (func(0 , [Basics.Prim;
                                           Basics.Type]))
constant WellFormedness.simpleWFVar : (func(0 , [Basics.Env;
                                                 int;
                                                 Basics.Expr;
                                                 Basics.Kind;
                                                 WellFormedness.WFType]))
constant WellFormedness.WFEBind##g : (func(0 , [WellFormedness.WFEnv;
                                                Basics.Env]))
constant SystemFTyping.erase_ty : (func(0 , [Basics.Prim;
                                             Basics.FType]))
constant Basics.Cons##t : (func(0 , [Basics.Env; Basics.Type]))
constant GHC.Num.fromInteger : (func(1 , [int; @(0)]))
constant SystemFWellFormedness.WFFBindT##k : (func(0 , [SystemFWellFormedness.WFFE;
                                                        Basics.Kind]))
constant papp3 : (func(6 , [(Pred @(0) @(1) @(2));
                            @(3);
                            @(4);
                            @(5);
                            bool]))
constant SystemFTyping.FTAppT##e : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Expr]))
constant SystemFWellFormedness.isWFFT : (func(0 , [Basics.FEnv;
                                                   Basics.FType;
                                                   Basics.Kind;
                                                   bool]))
constant SystemFTyping.foo04 : (func(1 , [@(0);
                                          (GHC.Maybe.Maybe @(0))]))
constant is$Basics.TRefn : (func(0 , [Basics.Type; bool]))
constant SystemFTyping.FTLet##b' : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FType]))
constant WellFormedness.WFEBindT##k : (func(0 , [WellFormedness.WFEnv;
                                                 Basics.Kind]))
constant Basics.Empty : (Basics.Env)
constant GHC.List.span : (func(1 , [func(0 , [@(0); bool]);
                                    [@(0)];
                                    (Tuple [@(0)] [@(0)])]))
constant WellFormedness.WFVar2##t : (func(0 , [WellFormedness.WFType;
                                               Basics.Type]))
constant Basics.Or : (Basics.Prim)
constant PrimitivesWFTypeEql.foo18 : (func(0 , [int;
                                                (GHC.Maybe.Maybe int)]))
constant lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 : (func(3 , [(Tuple @(0) @(1) @(2));
                                                                                        @(0)]))
constant WellFormedness.WFPoly##a : (func(0 , [WellFormedness.WFType;
                                               int]))
constant is$Basics.FConsT : (func(0 , [Basics.FEnv; bool]))
constant SystemFWellFormedness.WFFTFV2 : (func(0 , [Basics.FEnv;
                                                    int;
                                                    Basics.Kind;
                                                    SystemFWellFormedness.WFFT;
                                                    int;
                                                    Basics.FType;
                                                    SystemFWellFormedness.WFFT]))
constant GHC.Classes.$62$ : (func(1 , [@(0); @(0); bool]))
constant SystemFWellFormedness.makeWFFT : (func(0 , [Basics.FEnv;
                                                     Basics.FType;
                                                     Basics.Kind;
                                                     SystemFWellFormedness.WFFT]))
constant is$SystemFTyping.HasFType : (func(0 , [SystemFTyping.HasFTypeP;
                                                bool]))
constant Basics.Not : (Basics.Prim)
constant is$WellFormedness.WFBase : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant GHC.Types.False : (bool)
constant Basics.lem_binds_invariants : (func(0 , [Basics.Env;
                                                  Tuple]))
constant GHC.List.scanr1 : (func(1 , [func(0 , [@(0); @(0); @(0)]);
                                      [@(0)];
                                      [@(0)]]))
constant SystemFWellFormedness.WFFTFV3##a : (func(0 , [SystemFWellFormedness.WFFT;
                                                       int]))
constant WellFormedness.WFExis##t : (func(0 , [WellFormedness.WFType;
                                               Basics.Type]))
constant Basics.in_env : (func(0 , [int; Basics.Env; bool]))
constant lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 : (func(1 , [[@(0)];
                                                                            @(0)]))
constant SystemFTyping.FTPrm##g : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FEnv]))
constant Basics.lem_lookup_boundinF : (func(0 , [int;
                                                 Basics.FType;
                                                 Basics.FEnv;
                                                 Tuple]))
constant is$Basics.And : (func(0 , [Basics.Prim; bool]))
constant SystemFWellFormedness.WFFBind##g : (func(0 , [SystemFWellFormedness.WFFE;
                                                       Basics.FEnv]))
constant WellFormedness.WFExis##k_x : (func(0 , [WellFormedness.WFType;
                                                 Basics.Kind]))
constant SystemFWellFormedness.WFFTBasic##g : (func(0 , [SystemFWellFormedness.WFFT;
                                                         Basics.FEnv]))
constant SystemFTyping.FTAbs##g : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FEnv]))
constant SystemFTyping.FTVar2##x : (func(0 , [SystemFTyping.HasFType;
                                              int]))
constant GHC.Types.$58$ : (func(1 , [@(0); [@(0)]; [@(0)]]))
constant SystemFTyping.isFTAppT : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant Basics.Ic : (func(0 , [int; Basics.Expr]))
constant GHC.List.scanl : (func(2 , [func(0 , [@(0); @(1); @(0)]);
                                     @(0);
                                     [@(1)];
                                     [@(0)]]))
constant Basics.unbind : (func(0 , [int;
                                    int;
                                    Basics.Expr;
                                    Basics.Expr]))
constant is$SystemFWellFormedness.WFFTFV3 : (func(0 , [SystemFWellFormedness.WFFT;
                                                       bool]))
constant is$Basics.BV : (func(0 , [Basics.Expr; bool]))
constant Basics.TPoly##lqdc##$select##Basics.TPoly##3 : (func(0 , [Basics.Type;
                                                                   int]))
constant Basics.Z : (Basics.RVname)
constant Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ : (func(1 , [@(0);
                                                                            @(0);
                                                                            @(0)]))
constant WellFormedness.isWFFunc : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant SystemFWellFormedness.WFFBind : (func(0 , [Basics.FEnv;
                                                    SystemFWellFormedness.WFFE;
                                                    int;
                                                    Basics.FType;
                                                    Basics.Kind;
                                                    SystemFWellFormedness.WFFT;
                                                    SystemFWellFormedness.WFFE]))
constant SystemFTyping.ty : (func(0 , [Basics.Prim; Basics.Type]))
constant SystemFTyping.FTAppT##lqdc##$select##SystemFTyping.FTAppT##3 : (func(0 , [SystemFTyping.HasFType;
                                                                                   SystemFTyping.HasFType]))
constant Set_emp : (func(1 , [(Set_Set @(0)); bool]))
constant GHC.Tuple.$40$$44$$44$$41$ : (func(3 , [@(0);
                                                 @(1);
                                                 @(2);
                                                 (Tuple @(0) @(1) @(2))]))
constant SystemFWellFormedness.WFFTFV3##a' : (func(0 , [SystemFWellFormedness.WFFT;
                                                        int]))
constant papp4 : (func(8 , [(Pred @(0) @(1) @(2) @(3));
                            @(4);
                            @(5);
                            @(6);
                            @(7);
                            bool]))
constant GHC.Types.Module : (func(0 , [GHC.Types.TrName;
                                       GHC.Types.TrName;
                                       GHC.Types.Module]))
constant Basics.vbindsF : (func(0 , [Basics.FEnv; (Set_Set int)]))
constant SystemFTyping.FTVar2##lqdc##$select##SystemFTyping.FTVar2##3 : (func(0 , [SystemFTyping.HasFType;
                                                                                   SystemFTyping.HasFType]))
constant WellFormedness.WFEBind : (func(0 , [Basics.Env;
                                             WellFormedness.WFEnv;
                                             int;
                                             Basics.Type;
                                             Basics.Kind;
                                             WellFormedness.WFType;
                                             WellFormedness.WFEnv]))
constant SystemFTyping.FTPrm : (func(0 , [Basics.FEnv;
                                          Basics.Prim;
                                          SystemFTyping.HasFType]))
constant Basics.ftsubBV : (func(0 , [int;
                                     Basics.FType;
                                     Basics.FType;
                                     Basics.FType]))
constant SystemFWellFormedness.WFFBindT##lqdc##$select##SystemFWellFormedness.WFFBindT##3 : (func(0 , [SystemFWellFormedness.WFFE;
                                                                                                       SystemFWellFormedness.WFFE]))
constant GHC.List.zip : (func(2 , [[@(0)];
                                   [@(1)];
                                   [(Tuple @(0) @(1))]]))
constant SystemFWellFormedness.WFFTPoly##g : (func(0 , [SystemFWellFormedness.WFFT;
                                                        Basics.FEnv]))
constant is$WellFormedness.WFPoly : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant WellFormedness.WFPoly##a' : (func(0 , [WellFormedness.WFType;
                                                int]))
constant Basics.TFunc : (func(0 , [int;
                                   Basics.Type;
                                   Basics.Type;
                                   Basics.Type]))
constant is$Basics.Star : (func(0 , [Basics.Kind; bool]))
constant SystemFTyping.FTConj##g : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FEnv]))
constant GHC.Tuple.$40$$41$ : (Tuple)
constant GHC.Types.I# : (func(0 , [int; int]))
constant WellFormedness.WFVar1##tt : (func(0 , [WellFormedness.WFType;
                                                Basics.Expr]))
constant Basics.Eqv : (Basics.Prim)
constant Basics.TExists##lqdc##$select##Basics.TExists##3 : (func(0 , [Basics.Type;
                                                                       int]))
constant Basics.TFunc##lqdc##$select##Basics.TFunc##3 : (func(0 , [Basics.Type;
                                                                   int]))
constant Basics.ConsT##g : (func(0 , [Basics.Env; Basics.Env]))
constant Basics.binds : (func(0 , [Basics.Env; (Set_Set int)]))
constant SystemFTyping.FTLet##e_x : (func(0 , [SystemFTyping.HasFType;
                                               Basics.Expr]))
constant SystemFTyping.isFTVar : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant SystemFTyping.FTAbsT##a' : (func(0 , [SystemFTyping.HasFType;
                                               int]))
constant SystemFTyping.isFTConj : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant WellFormedness.WFVar3##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant is$GHC.Maybe.Just : (func(1 , [(GHC.Maybe.Maybe @(0));
                                        bool]))
constant SystemFWellFormedness.WFFTFV3##k : (func(0 , [SystemFWellFormedness.WFFT;
                                                       Basics.Kind]))
constant is$Basics.App : (func(0 , [Basics.Expr; bool]))
constant is$SystemFTyping.FTAbsT : (func(0 , [SystemFTyping.HasFType;
                                              bool]))
constant GHC.List.dropWhile : (func(1 , [func(0 , [@(0); bool]);
                                         [@(0)];
                                         [@(0)]]))
constant Set_empty : (func(1 , [int; (Set_Set @(0))]))
constant Data.Maybe.maybe : (func(2 , [@(0);
                                       func(0 , [@(1); @(0)]);
                                       (GHC.Maybe.Maybe @(1));
                                       @(0)]))
constant Basics.Lambda : (func(0 , [int;
                                    Basics.Expr;
                                    Basics.Expr]))
constant Basics.isTrivial : (func(0 , [Basics.Expr; bool]))
constant Basics.tv_bound_in : (func(0 , [int;
                                         Basics.Kind;
                                         Basics.Env;
                                         bool]))
constant GHC.Real.C$58$Fractional : (func(1 , [func(0 , [@(0);
                                                         @(0);
                                                         @(0)]);
                                               func(0 , [@(0); @(0)]);
                                               func(0 , [(GHC.Real.Ratio int); @(0)]);
                                               (GHC.Real.Fractional @(0))]))
constant is$SystemFWellFormedness.WFFTFunc : (func(0 , [SystemFWellFormedness.WFFT;
                                                        bool]))
constant is$WellFormedness.WFExis : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant autolen : (func(1 , [@(0); int]))
constant Set_mem : (func(1 , [@(0); (Set_Set @(0)); bool]))
constant SystemFWellFormedness.isWFFTPoly : (func(0 , [SystemFWellFormedness.WFFT;
                                                       bool]))
constant SystemFWellFormedness.WFFBindT##a : (func(0 , [SystemFWellFormedness.WFFE;
                                                        int]))
constant Data.Foldable.null : (func(2 , [(@(1) @(0)); bool]))
constant is$SystemFTyping.FTVar1 : (func(0 , [SystemFTyping.HasFType;
                                              bool]))
constant SystemFTyping.isFTAbs : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant GHC.Integer.Type.$WJn# : (func(0 , [GHC.Integer.Type.BigNat;
                                             int]))
constant GHC.Real.$94$ : (func(2 , [@(0); @(1); @(0)]))
constant Basics.lem_tvboundin_inenvF : (func(0 , [int;
                                                  Basics.Kind;
                                                  Basics.FEnv;
                                                  Tuple]))
constant WellFormedness.WFEBindT##a : (func(0 , [WellFormedness.WFEnv;
                                                 int]))
constant head : (func(1 , [[@(0)]; @(0)]))
constant is$WellFormedness.WFVar2 : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant SystemFTyping.FTLet##lqdc##$select##SystemFTyping.FTLet##6 : (func(0 , [SystemFTyping.HasFType;
                                                                                 SystemFTyping.HasFType]))
constant SystemFTyping.FTLet##g : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FEnv]))
constant Basics.ftsize : (func(0 , [Basics.FType; int]))
constant WellFormedness.WFPoly##k : (func(0 , [WellFormedness.WFType;
                                               Basics.Kind]))
constant SystemFTyping.FTIC : (func(0 , [Basics.FEnv;
                                         int;
                                         SystemFTyping.HasFType]))
constant SystemFTyping.FTConj##e' : (func(0 , [SystemFTyping.HasFType;
                                               Basics.Expr]))
constant is$Basics.Cons : (func(0 , [Basics.Env; bool]))
constant WellFormedness.WFEBind##lqdc##$select##WellFormedness.WFEBind##5 : (func(0 , [WellFormedness.WFEnv;
                                                                                       WellFormedness.WFEnv]))
constant SystemFWellFormedness.WFFTFV3 : (func(0 , [Basics.FEnv;
                                                    int;
                                                    Basics.Kind;
                                                    SystemFWellFormedness.WFFT;
                                                    int;
                                                    Basics.Kind;
                                                    SystemFWellFormedness.WFFT]))
constant is$Basics.Z : (func(0 , [Basics.RVname; bool]))
constant Basics.max : (func(0 , [int; int; int]))
constant WellFormedness.WFVar3##k' : (func(0 , [WellFormedness.WFType;
                                                Basics.Kind]))
constant is$Basics.Eqv : (func(0 , [Basics.Prim; bool]))
constant Basics.BV : (func(0 , [int; Basics.Expr]))
constant is$36$GHC.Tuple.$40$$44$$44$$41$ : (func(3 , [(Tuple @(0) @(1) @(2));
                                                       bool]))
constant Basics.isTPoly : (func(0 , [Basics.Type; bool]))
constant WellFormedness.WFFunc##k_x : (func(0 , [WellFormedness.WFType;
                                                 Basics.Kind]))
constant Basics.bound_inF : (func(0 , [int;
                                       Basics.FType;
                                       Basics.FEnv;
                                       bool]))
constant Basics.ConsT##a : (func(0 , [Basics.Env; int]))
constant Basics.Star : (Basics.Kind)
constant Basics.lem_trivial_nobv : (func(0 , [Basics.Expr; Tuple]))
constant GHC.Integer.Type.Jn# : (func(0 , [GHC.Prim.ByteArray#;
                                           int]))
constant SystemFTyping.FTVar3##g : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FEnv]))
constant is$Basics.Ic : (func(0 , [Basics.Expr; bool]))
constant Basics.subFV : (func(0 , [int;
                                   Basics.Expr;
                                   Basics.Expr;
                                   Basics.Expr]))
constant GHC.Classes.compare : (func(1 , [@(0);
                                          @(0);
                                          GHC.Types.Ordering]))
constant is$WellFormedness.WFEBind : (func(0 , [WellFormedness.WFEnv;
                                                bool]))
constant SystemFWellFormedness.WFFTFunc##t1 : (func(0 , [SystemFWellFormedness.WFFT;
                                                         Basics.FType]))
constant Basics.lem_maxp_listF : (func(0 , [Basics.FEnv;
                                            int;
                                            bool]))
constant Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ : (func(1 , [@(0);
                                                                            Language.Haskell.Liquid.ProofCombinators.QED;
                                                                            Tuple]))
constant Basics.fresh_var_excluding : (func(0 , [Basics.Env;
                                                 int;
                                                 int]))
constant Basics.lem_value_pred : (func(0 , [Basics.Expr; Tuple]))
constant Basics.tfreeBV : (func(0 , [Basics.Type; (Set_Set int)]))
constant SystemFTyping.FTAbsT##e : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Expr]))
constant is$36$GHC.Types.$58$ : (func(1 , [[@(0)]; bool]))
constant is$SystemFTyping.FTPrm : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant WellFormedness.WFFunc##t : (func(0 , [WellFormedness.WFType;
                                               Basics.Type]))
constant papp2 : (func(4 , [(Pred @(0) @(1)); @(2); @(3); bool]))
constant Basics.tchgFTV : (func(0 , [int;
                                     int;
                                     Basics.Type;
                                     Basics.Type]))
constant Basics.tsubFTV : (func(0 , [int;
                                     Basics.Type;
                                     Basics.Type;
                                     Basics.Type]))
constant is$Basics.TFunc : (func(0 , [Basics.Type; bool]))
constant SystemFTyping.noDefnsBaseAppT : (func(0 , [Basics.Expr;
                                                    bool]))
constant SystemFWellFormedness.WFFTPoly##a : (func(0 , [SystemFWellFormedness.WFFT;
                                                        int]))
constant Basics.freeBTV : (func(0 , [Basics.Expr; (Set_Set int)]))
constant is$SystemFWellFormedness.WFFBind : (func(0 , [SystemFWellFormedness.WFFE;
                                                       bool]))
constant WellFormedness.makeWFType : (func(0 , [Basics.Env;
                                                Basics.Type;
                                                Basics.Kind;
                                                WellFormedness.WFType]))
constant WellFormedness.WFPoly : (func(0 , [Basics.Env;
                                            int;
                                            Basics.Kind;
                                            Basics.Type;
                                            Basics.Kind;
                                            int;
                                            WellFormedness.WFType;
                                            WellFormedness.WFType]))
constant SystemFWellFormedness.WFFTFV1##g : (func(0 , [SystemFWellFormedness.WFFT;
                                                       Basics.FEnv]))
constant Basics.isValue : (func(0 , [Basics.Expr; bool]))
constant Set_dif : (func(1 , [(Set_Set @(0));
                              (Set_Set @(0));
                              (Set_Set @(0))]))
constant GHC.Stack.Types.EmptyCallStack : (GHC.Stack.Types.CallStack)
constant Basics.lem_value_term : (func(0 , [Basics.Expr; Tuple]))
constant SystemFTyping.ftypSize : (func(0 , [SystemFTyping.HasFType;
                                             int]))
constant SystemFTyping.FTAnn##t1 : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Type]))
constant Basics.Bc : (func(0 , [bool; Basics.Expr]))
constant Basics.kind_for_tv : (func(0 , [int;
                                         Basics.Env;
                                         Basics.Kind]))
constant SystemFWellFormedness.WFFTPoly##t : (func(0 , [SystemFWellFormedness.WFFT;
                                                        Basics.FType]))
constant WellFormedness.WFVar2##tt : (func(0 , [WellFormedness.WFType;
                                                Basics.Expr]))
constant SystemFTyping.FTApp##b' : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FType]))
constant GHC.List.reverse : (func(1 , [[@(0)]; [@(0)]]))
constant GHC.Integer.Type.$WJp# : (func(0 , [GHC.Integer.Type.BigNat;
                                             int]))
constant Basics.noExists : (func(0 , [Basics.Type; bool]))
constant WellFormedness.WFRefn : (func(0 , [Basics.Env;
                                            Basics.RVname;
                                            Basics.Basic;
                                            Basics.Expr;
                                            WellFormedness.WFType;
                                            Basics.Expr;
                                            int;
                                            SystemFTyping.HasFType;
                                            WellFormedness.WFType]))
constant lit$main : (Str)
constant Basics.tsize : (func(0 , [Basics.Type; int]))
constant Basics.isTRefn : (func(0 , [Basics.Type; bool]))
constant is$SystemFWellFormedness.WFFTKind : (func(0 , [SystemFWellFormedness.WFFT;
                                                        bool]))
constant GHC.List.filter : (func(1 , [func(0 , [@(0); bool]);
                                      [@(0)];
                                      [@(0)]]))
constant SystemFTyping.FTPrm##c : (func(0 , [SystemFTyping.HasFType;
                                             Basics.Prim]))
constant Language.Haskell.Liquid.ProofCombinators.$63$ : (func(2 , [@(0);
                                                                    @(1);
                                                                    @(0)]))
constant SystemFTyping.FTVar3##b : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FType]))
constant is$SystemFWellFormedness.WFFT : (func(0 , [SystemFWellFormedness.WFFTP;
                                                    bool]))
constant fromJust : (func(1 , [(GHC.Maybe.Maybe @(0)); @(0)]))
constant is$Basics.FCons : (func(0 , [Basics.FEnv; bool]))
constant is$Basics.TInt : (func(0 , [Basics.Basic; bool]))
constant WellFormedness.WFVar1##k : (func(0 , [WellFormedness.WFType;
                                               Basics.Kind]))
constant GHC.List.cycle : (func(1 , [[@(0)]; [@(0)]]))
constant WellFormedness.WFRefn##x : (func(0 , [WellFormedness.WFType;
                                               Basics.RVname]))
constant SystemFTyping.firstBV : (func(0 , [Basics.Prim; int]))
constant SystemFTyping.makeHasFType : (func(0 , [Basics.FEnv;
                                                 Basics.Expr;
                                                 Basics.FType;
                                                 SystemFTyping.HasFType]))
constant GHC.List.$33$$33$ : (func(1 , [[@(0)]; int; @(0)]))
constant Data.Set.Internal.Bin : (func(1 , [int;
                                            @(0);
                                            (Set_Set @(0));
                                            (Set_Set @(0));
                                            (Set_Set @(0))]))
constant GHC.List.tail : (func(1 , [[@(0)]; [@(0)]]))
constant SystemFTyping.FTLet##y : (func(0 , [SystemFTyping.HasFType;
                                             int]))
constant SystemFTyping.FTAppT##a : (func(0 , [SystemFTyping.HasFType;
                                              int]))
constant papp7 : (func(14 , [(Pred @(0) @(1) @(2) @(3) @(4) @(5) @(6));
                             @(7);
                             @(8);
                             @(9);
                             @(10);
                             @(11);
                             @(12);
                             @(13);
                             bool]))
constant WellFormedness.isWFBase : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant GHC.Classes.$47$$61$ : (func(1 , [@(0); @(0); bool]))
constant is$Basics.Leq : (func(0 , [Basics.Prim; bool]))
constant is$Basics.FTPoly : (func(0 , [Basics.FType; bool]))
constant WellFormedness.WFEEmpty : (WellFormedness.WFEnv)
constant Basics.Prim : (func(0 , [Basics.Prim; Basics.Expr]))
constant SystemFTyping.simpleFTVar : (func(0 , [Basics.FEnv;
                                                int;
                                                Basics.FType;
                                                SystemFTyping.HasFType]))
constant Set_sub : (func(1 , [(Set_Set @(0));
                              (Set_Set @(0));
                              bool]))
constant SystemFTyping.FTAppT##rt : (func(0 , [SystemFTyping.HasFType;
                                               Basics.Type]))
constant Basics.strengthen : (func(0 , [Basics.Expr;
                                        Basics.Expr;
                                        Basics.Expr]))
constant Basics.withProof : (func(2 , [@(0); @(1); @(0)]))
constant SystemFTyping.FTAnn##b : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FType]))
constant SystemFWellFormedness.WFFBindT : (func(0 , [Basics.FEnv;
                                                     SystemFWellFormedness.WFFE;
                                                     int;
                                                     Basics.Kind;
                                                     SystemFWellFormedness.WFFE]))
constant GHC.List.break : (func(1 , [func(0 , [@(0); bool]);
                                     [@(0)];
                                     (Tuple [@(0)] [@(0)])]))
constant GHC.Types.True : (bool)
constant is$Basics.Eql : (func(0 , [Basics.Prim; bool]))
constant SystemFWellFormedness.WFFTPoly##k : (func(0 , [SystemFWellFormedness.WFFT;
                                                        Basics.Kind]))
constant is$WellFormedness.WFVar3 : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant WellFormedness.wftypSize : (func(0 , [WellFormedness.WFType;
                                               int]))
constant GHC.Types.$91$$93$ : (func(1 , [[@(0)]]))
constant Basics.ksize : (func(0 , [Basics.Kind; int]))
constant GHC.List.splitAt : (func(1 , [int;
                                       [@(0)];
                                       (Tuple [@(0)] [@(0)])]))
constant Basics.isTExists : (func(0 , [Basics.Type; bool]))
constant Basics.unbindT : (func(0 , [int;
                                     int;
                                     Basics.Type;
                                     Basics.Type]))
constant is$SystemFTyping.FTLet : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant is$Basics.BTV : (func(0 , [Basics.Basic; bool]))
constant Basics.freeTV : (func(0 , [Basics.Type; (Set_Set int)]))
constant Basics.ConsT##k : (func(0 , [Basics.Env; Basics.Kind]))
constant GHC.Base.$43$$43$ : (func(1 , [[@(0)]; [@(0)]; [@(0)]]))
constant Basics.fresh_varF : (func(0 , [Basics.FEnv; int]))
constant SystemFTyping.FTApp##b : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FType]))
constant GHC.Real.$58$$37$ : (func(1 , [@(0);
                                        @(0);
                                        (GHC.Real.Ratio @(0))]))
constant WellFormedness.WFKind : (func(0 , [Basics.Env;
                                            Basics.Type;
                                            WellFormedness.WFType;
                                            WellFormedness.WFType]))
constant SystemFWellFormedness.WFFEmpty : (SystemFWellFormedness.WFFE)
constant Basics.tvbindsF : (func(0 , [Basics.FEnv; (Set_Set int)]))
constant SystemFTyping.FTApp##e' : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Expr]))
constant WellFormedness.WFRefn##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant GHC.Tuple.$40$$44$$41$ : (func(2 , [@(0);
                                             @(1);
                                             (Tuple @(0) @(1))]))
constant Basics.Leqn : (func(0 , [int; Basics.Prim]))
constant SystemFTyping.FTAbs##k : (func(0 , [SystemFTyping.HasFType;
                                             Basics.Kind]))
constant WellFormedness.WFVar3##a' : (func(0 , [WellFormedness.WFType;
                                                int]))
constant SystemFTyping.isFTApp : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant SystemFTyping.FTBC##b : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant WellFormedness.WFEBindT : (func(0 , [Basics.Env;
                                              WellFormedness.WFEnv;
                                              int;
                                              Basics.Kind;
                                              WellFormedness.WFEnv]))
constant SystemFTyping.isFTAnn : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ : (func(1 , [@(0);
                                                                            @(0);
                                                                            @(0)]))
constant Basics.unerase : (func(0 , [Basics.FType; Basics.Type]))
constant Basics.Conj##lqdc##$select##Basics.Conj##2 : (func(0 , [Basics.Expr;
                                                                 Basics.Expr]))
constant SystemFTyping.FTAppT##t' : (func(0 , [SystemFTyping.HasFType;
                                               Basics.FType]))
constant SystemFTyping.FTBC##g : (func(0 , [SystemFTyping.HasFType;
                                            Basics.FEnv]))
constant GHC.Classes.$38$$38$ : (func(0 , [bool; bool; bool]))
constant SystemFWellFormedness.isWFFTFunc : (func(0 , [SystemFWellFormedness.WFFT;
                                                       bool]))
constant WellFormedness.WFVar1##a : (func(0 , [WellFormedness.WFType;
                                               int]))
constant SystemFTyping.FTVar3 : (func(0 , [Basics.FEnv;
                                           int;
                                           Basics.FType;
                                           SystemFTyping.HasFType;
                                           int;
                                           Basics.Kind;
                                           SystemFTyping.HasFType]))
constant WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##2 : (func(0 , [WellFormedness.WFTypeP;
                                                                                     Basics.Type]))
constant SystemFWellFormedness.WFFTKind##t : (func(0 , [SystemFWellFormedness.WFFT;
                                                        Basics.FType]))
constant is$Basics.Let : (func(0 , [Basics.Expr; bool]))
constant WellFormedness.isWFExis : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant Basics.LambdaT : (func(0 , [int;
                                     Basics.Kind;
                                     Basics.Expr;
                                     Basics.Expr]))
constant WellFormedness.WFFunc##t_x : (func(0 , [WellFormedness.WFType;
                                                 Basics.Type]))
constant SystemFTyping.FTVar3##x : (func(0 , [SystemFTyping.HasFType;
                                              int]))
constant WellFormedness.WFBase##tt : (func(0 , [WellFormedness.WFType;
                                                Basics.Expr]))
constant Basics.FTPoly##lqdc##$select##Basics.FTPoly##2 : (func(0 , [Basics.FType;
                                                                     Basics.Kind]))
constant is$SystemFWellFormedness.WFFTBasic : (func(0 , [SystemFWellFormedness.WFFT;
                                                         bool]))
constant SystemFTyping.FTAppT##k : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Kind]))
constant Basics.Let##lqdc##$select##Basics.Let##2 : (func(0 , [Basics.Expr;
                                                               Basics.Expr]))
constant is$Basics.ConsT : (func(0 , [Basics.Env; bool]))
constant SystemFTyping.FTAnn##g : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FEnv]))
constant Basics.AppT##lqdc##$select##Basics.AppT##2 : (func(0 , [Basics.Expr;
                                                                 Basics.Type]))
constant WellFormedness.WFEnv : (func(0 , [Basics.Env;
                                           WellFormedness.WFEnvP]))
constant Basics.Lambda##lqdc##$select##Basics.Lambda##2 : (func(0 , [Basics.Expr;
                                                                     Basics.Expr]))
constant is$Basics.AppT : (func(0 , [Basics.Expr; bool]))
constant SystemFWellFormedness.WFFTPoly##a' : (func(0 , [SystemFWellFormedness.WFFT;
                                                         int]))
constant is$SystemFTyping.FTConj : (func(0 , [SystemFTyping.HasFType;
                                              bool]))
constant WellFormedness.WFFunc##k : (func(0 , [WellFormedness.WFType;
                                               Basics.Kind]))
constant Basics.TRefn##p : (func(0 , [Basics.Type; Basics.Expr]))
constant GHC.Types.GT : (GHC.Types.Ordering)
constant Basics.FEmpty : (Basics.FEnv)
constant is$Basics.Base : (func(0 , [Basics.Kind; bool]))
constant GHC.Classes.C$58$IP : (func(2 , [@(1); @(1)]))
constant GHC.Classes.$124$$124$ : (func(0 , [bool; bool; bool]))
constant is$SystemFTyping.FTAbs : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant is$SystemFWellFormedness.WFFTPoly : (func(0 , [SystemFWellFormedness.WFFT;
                                                        bool]))
constant Basics.TRefn##lqdc##$select##Basics.TRefn##2 : (func(0 , [Basics.Type;
                                                                   Basics.RVname]))
constant Basics.LambdaT##lqdc##$select##Basics.LambdaT##2 : (func(0 , [Basics.Expr;
                                                                       Basics.Kind]))
constant Basics.FTFunc##lqdc##$select##Basics.FTFunc##2 : (func(0 , [Basics.FType;
                                                                     Basics.FType]))
constant SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##2 : (func(0 , [SystemFWellFormedness.WFFTP;
                                                                                               Basics.FType]))
constant Data.Either.Left : (func(2 , [@(0);
                                       (Data.Either.Either @(0) @(1))]))
constant GHC.List.last : (func(1 , [[@(0)]; @(0)]))
constant WellFormedness.isWFVar2 : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant propOf : (func(2 , [@(0); @(1)]))
constant SystemFWellFormedness.wfftypSize : (func(0 , [SystemFWellFormedness.WFFT;
                                                       int]))
constant Basics.FCons##t : (func(0 , [Basics.FEnv; Basics.FType]))
constant SystemFTyping.isFTAbsT : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##2 : (func(0 , [SystemFTyping.HasFTypeP;
                                                                                       Basics.Expr]))
constant Basics.App##lqdc##$select##Basics.App##2 : (func(0 , [Basics.Expr;
                                                               Basics.Expr]))
constant SystemFTyping.FTApp##g : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FEnv]))
constant WellFormedness.WFRefn##b : (func(0 , [WellFormedness.WFType;
                                               Basics.Basic]))
constant GHC.Integer.Type.S# : (func(0 , [int; int]))
constant GHC.List.scanl1 : (func(1 , [func(0 , [@(0); @(0); @(0)]);
                                      [@(0)];
                                      [@(0)]]))
constant Basics.unbindFT : (func(0 , [int;
                                      int;
                                      Basics.FType;
                                      Basics.FType]))
constant Data.Either.Right : (func(2 , [@(1);
                                        (Data.Either.Either @(0) @(1))]))
constant Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ : (func(1 , [@(0);
                                                                            @(0);
                                                                            @(0)]))
constant Basics.BTV##lqdc##$select##Basics.BTV##1 : (func(0 , [Basics.Basic;
                                                               int]))
constant Basics.FConsT##k : (func(0 , [Basics.FEnv; Basics.Kind]))
constant SystemFTyping.FTAbs##e : (func(0 , [SystemFTyping.HasFType;
                                             Basics.Expr]))
constant SystemFTyping.FTAbs##b' : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FType]))
constant Basics.lem_trivial_nofv : (func(0 , [Basics.Expr; Tuple]))
constant Basics.FV : (func(0 , [int; Basics.Expr]))
constant Basics.fv : (func(0 , [Basics.Expr; (Set_Set int)]))
constant Basics.Annot##lqdc##$select##Basics.Annot##1 : (func(0 , [Basics.Expr;
                                                                   Basics.Expr]))
constant Basics.isTFunc : (func(0 , [Basics.Type; bool]))
constant WellFormedness.WFRefn##y : (func(0 , [WellFormedness.WFType;
                                               int]))
constant is$Basics.TPoly : (func(0 , [Basics.Type; bool]))
constant Basics.Conj : (func(0 , [Basics.Expr;
                                  Basics.Expr;
                                  Basics.Expr]))
constant is$SystemFWellFormedness.WFFTFV1 : (func(0 , [SystemFWellFormedness.WFFT;
                                                       bool]))
constant SystemFTyping.FTAbsT##a : (func(0 , [SystemFTyping.HasFType;
                                              int]))
constant Basics.TPoly##lqdc##$select##Basics.TPoly##1 : (func(0 , [Basics.Type;
                                                                   Basics.Type]))
constant GHC.Num.$45$ : (func(1 , [@(0); @(0); @(0)]))
constant len : (func(2 , [(@(0) @(1)); int]))
constant papp6 : (func(12 , [(Pred @(0) @(1) @(2) @(3) @(4) @(5));
                             @(6);
                             @(7);
                             @(8);
                             @(9);
                             @(10);
                             @(11);
                             bool]))
constant SystemFTyping.FTLet##x : (func(0 , [SystemFTyping.HasFType;
                                             int]))
constant WellFormedness.WFFunc : (func(0 , [Basics.Env;
                                            int;
                                            Basics.Type;
                                            Basics.Kind;
                                            WellFormedness.WFType;
                                            Basics.Type;
                                            Basics.Kind;
                                            int;
                                            WellFormedness.WFType;
                                            WellFormedness.WFType]))
constant Basics.subBV : (func(0 , [int;
                                   Basics.Expr;
                                   Basics.Expr;
                                   Basics.Expr]))
constant Basics.tsubBTV : (func(0 , [int;
                                     Basics.Type;
                                     Basics.Type;
                                     Basics.Type]))
constant SystemFTyping.FTAppT##lqdc##$select##SystemFTyping.FTAppT##1 : (func(0 , [SystemFTyping.HasFType;
                                                                                   SystemFWellFormedness.WFFT]))
constant Basics.tv_in_env : (func(0 , [int; Basics.Env; bool]))
constant GHC.Base.. : (func(3 , [func(0 , [@(0); @(1)]);
                                 func(0 , [@(2); @(0)]);
                                 @(2);
                                 @(1)]))
constant WellFormedness.isWellFormed : (func(0 , [Basics.Env;
                                                  Basics.Type;
                                                  Basics.Kind;
                                                  bool]))
constant x_Tuple22 : (func(2 , [(Tuple @(0) @(1)); @(1)]))
constant SystemFTyping.tyic : (func(0 , [int; Basics.Type]))
constant WellFormedness.WFVar3##tt : (func(0 , [WellFormedness.WFType;
                                                Basics.Expr]))
constant Basics.erase : (func(0 , [Basics.Type; Basics.FType]))
constant Basics.FTV##lqdc##$select##Basics.FTV##1 : (func(0 , [Basics.Basic;
                                                               int]))
constant Basics.tvbinds : (func(0 , [Basics.Env; (Set_Set int)]))
constant SystemFTyping.FTIC##g : (func(0 , [SystemFTyping.HasFType;
                                            Basics.FEnv]))
constant Basics.fresh_var : (func(0 , [Basics.Env; int]))
constant WellFormedness.WFEBind##lqdc##$select##WellFormedness.WFEBind##1 : (func(0 , [WellFormedness.WFEnv;
                                                                                       WellFormedness.WFType]))
constant SystemFWellFormedness.WFFTFunc##k2 : (func(0 , [SystemFWellFormedness.WFFT;
                                                         Basics.Kind]))
constant SystemFTyping.FTAppT : (func(0 , [Basics.FEnv;
                                           Basics.Expr;
                                           int;
                                           Basics.Kind;
                                           Basics.FType;
                                           SystemFTyping.HasFType;
                                           Basics.Type;
                                           SystemFWellFormedness.WFFT;
                                           SystemFTyping.HasFType]))
constant is$WellFormedness.WFType : (func(0 , [WellFormedness.WFTypeP;
                                               bool]))
constant WellFormedness.WFVar2##a : (func(0 , [WellFormedness.WFType;
                                               int]))
constant SystemFTyping.FTConj##e : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Expr]))
constant Basics.ffreeTV : (func(0 , [Basics.FType; (Set_Set int)]))
constant WellFormedness.WFPoly##t : (func(0 , [WellFormedness.WFType;
                                               Basics.Type]))
constant SystemFWellFormedness.WFFE##lqdc##$select##SystemFWellFormedness.WFFE##1 : (func(0 , [SystemFWellFormedness.WFFEP;
                                                                                               Basics.FEnv]))
constant isAdmit : (func(0 , [Language.Haskell.Liquid.ProofCombinators.QED;
                              bool]))
constant Basics.TExists##lqdc##$select##Basics.TExists##1 : (func(0 , [Basics.Type;
                                                                       Basics.Type]))
constant Basics.TFunc##lqdc##$select##Basics.TFunc##1 : (func(0 , [Basics.Type;
                                                                   Basics.Type]))
constant Basics.FTBasic##lqdc##$select##Basics.FTBasic##1 : (func(0 , [Basics.FType;
                                                                       Basics.Basic]))
constant Basics.esize : (func(0 , [Basics.Expr; int]))
constant Basics.Eqn##lqdc##$select##Basics.Eqn##1 : (func(0 , [Basics.Prim;
                                                               int]))
constant Basics.FTBasic : (func(0 , [Basics.Basic; Basics.FType]))
constant is$SystemFWellFormedness.WFFE : (func(0 , [SystemFWellFormedness.WFFEP;
                                                    bool]))
constant strLen : (func(0 , [[Char]; int]))
constant SystemFWellFormedness.WFFTBasic : (func(0 , [Basics.FEnv;
                                                      Basics.Basic;
                                                      SystemFWellFormedness.WFFT]))
constant SystemFTyping.FTAbs : (func(0 , [Basics.FEnv;
                                          int;
                                          Basics.FType;
                                          Basics.Kind;
                                          SystemFWellFormedness.WFFT;
                                          Basics.Expr;
                                          Basics.FType;
                                          int;
                                          SystemFTyping.HasFType;
                                          SystemFTyping.HasFType]))
constant Basics.Let : (func(0 , [int;
                                 Basics.Expr;
                                 Basics.Expr;
                                 Basics.Expr]))
constant Basics.Base : (Basics.Kind)
constant is$Basics.LambdaT : (func(0 , [Basics.Expr; bool]))
constant GHC.Real.$36$W$58$$37$ : (func(1 , [@(0);
                                             @(0);
                                             (GHC.Real.Ratio @(0))]))
constant SystemFWellFormedness.WFFTPoly##k_t : (func(0 , [SystemFWellFormedness.WFFT;
                                                          Basics.Kind]))
constant Basics.AppT : (func(0 , [Basics.Expr;
                                  Basics.Type;
                                  Basics.Expr]))
constant SystemFTyping.FTVar2##g : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FEnv]))
constant Basics.ConsT : (func(0 , [int;
                                   Basics.Kind;
                                   Basics.Env;
                                   Basics.Env]))
constant SystemFTyping.FTAbs##x : (func(0 , [SystemFTyping.HasFType;
                                             int]))
constant is$WellFormedness.WFEnv : (func(0 , [WellFormedness.WFEnvP;
                                              bool]))
constant is$Basics.FEmpty : (func(0 , [Basics.FEnv; bool]))
constant isJust : (func(1 , [(GHC.Maybe.Maybe @(0)); bool]))
constant SystemFTyping.ty' : (func(0 , [Basics.Prim; Basics.Type]))
constant WellFormedness.WFVar1##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant SystemFTyping.FTConj : (func(0 , [Basics.FEnv;
                                           Basics.Expr;
                                           SystemFTyping.HasFType;
                                           Basics.Expr;
                                           SystemFTyping.HasFType;
                                           SystemFTyping.HasFType]))
constant SystemFWellFormedness.WFFTFunc##lqdc##$select##SystemFWellFormedness.WFFTFunc##4 : (func(0 , [SystemFWellFormedness.WFFT;
                                                                                                       SystemFWellFormedness.WFFT]))
constant WellFormedness.WFRefn##lqdc##$select##WellFormedness.WFRefn##4 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant is$SystemFTyping.FTVar3 : (func(0 , [SystemFTyping.HasFType;
                                              bool]))
constant GHC.List.takeWhile : (func(1 , [func(0 , [@(0); bool]);
                                         [@(0)];
                                         [@(0)]]))
constant GHC.Types.TrNameD : (func(0 , [[Char]; GHC.Types.TrName]))
constant Basics.lem_refn_is_pred : (func(0 , [Basics.Type;
                                              Basics.Basic;
                                              Basics.RVname;
                                              Basics.Expr;
                                              Tuple]))
constant SystemFWellFormedness.WFFTFV1##k : (func(0 , [SystemFWellFormedness.WFFT;
                                                       Basics.Kind]))
constant SystemFTyping.lem_check_synth : (func(0 , [Basics.FEnv;
                                                    Basics.Expr;
                                                    Basics.FType;
                                                    Tuple]))
constant SystemFWellFormedness.WFFTPoly : (func(0 , [Basics.FEnv;
                                                     int;
                                                     Basics.Kind;
                                                     Basics.FType;
                                                     Basics.Kind;
                                                     int;
                                                     SystemFWellFormedness.WFFT;
                                                     SystemFWellFormedness.WFFT]))
constant Basics.lem_boundin_inenvF : (func(0 , [int;
                                                Basics.FType;
                                                Basics.FEnv;
                                                Tuple]))
constant SystemFTyping.FTLet##e : (func(0 , [SystemFTyping.HasFType;
                                             Basics.Expr]))
constant Basics.bound_in : (func(0 , [int;
                                      Basics.Type;
                                      Basics.Env;
                                      bool]))
constant is$Basics.TExists : (func(0 , [Basics.Type; bool]))
constant SystemFTyping.FTLet##b : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FType]))
constant WellFormedness.WFVar3##lqdc##$select##WellFormedness.WFVar3##3 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant WellFormedness.WFKind##t : (func(0 , [WellFormedness.WFType;
                                               Basics.Type]))
constant is$GHC.Maybe.Nothing : (func(1 , [(GHC.Maybe.Maybe @(0));
                                           bool]))
constant SystemFTyping.FTConj##lqdc##$select##SystemFTyping.FTConj##3 : (func(0 , [SystemFTyping.HasFType;
                                                                                   SystemFTyping.HasFType]))
constant SystemFTyping.FTVar3##lqdc##$select##SystemFTyping.FTVar3##3 : (func(0 , [SystemFTyping.HasFType;
                                                                                   SystemFTyping.HasFType]))
constant Basics.Eqn : (func(0 , [int; Basics.Prim]))
constant Basics.TRefn##lqdc##$select##Basics.TRefn##3 : (func(0 , [Basics.Type;
                                                                   Basics.Basic]))
constant Basics.TBool : (Basics.Basic)
constant WellFormedness.WFVar2##k : (func(0 , [WellFormedness.WFType;
                                               Basics.Kind]))
constant WellFormedness.WFVar2##lqdc##$select##WellFormedness.WFVar2##3 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant SystemFTyping.FTApp##lqdc##$select##SystemFTyping.FTApp##3 : (func(0 , [SystemFTyping.HasFType;
                                                                                 SystemFTyping.HasFType]))
constant Basics.LambdaT##lqdc##$select##Basics.LambdaT##3 : (func(0 , [Basics.Expr;
                                                                       Basics.Expr]))
constant x_Tuple31 : (func(3 , [(Tuple @(0) @(1) @(2)); @(0)]))
constant WellFormedness.WFExis##k : (func(0 , [WellFormedness.WFType;
                                               Basics.Kind]))
constant WellFormedness.WFExis##t_x : (func(0 , [WellFormedness.WFType;
                                                 Basics.Type]))
constant GHC.Integer.Type.Jp# : (func(0 , [GHC.Prim.ByteArray#;
                                           int]))
constant Basics.isBTV : (func(0 , [Basics.Basic; bool]))
constant SystemFWellFormedness.WFFT##lqdc##$select##SystemFWellFormedness.WFFT##3 : (func(0 , [SystemFWellFormedness.WFFTP;
                                                                                               Basics.Kind]))
constant is$SystemFTyping.FTApp : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant Basics.Annot : (func(0 , [Basics.Expr;
                                   Basics.Type;
                                   Basics.Expr]))
constant WellFormedness.WFVar1 : (func(0 , [Basics.Env;
                                            int;
                                            Basics.Expr;
                                            Basics.Kind;
                                            WellFormedness.WFType]))
constant SystemFWellFormedness.WFFTFV2##lqdc##$select##SystemFWellFormedness.WFFTFV2##3 : (func(0 , [SystemFWellFormedness.WFFT;
                                                                                                     SystemFWellFormedness.WFFT]))
constant WellFormedness.isWFVar3 : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant SystemFTyping.HasFType##lqdc##$select##SystemFTyping.HasFType##3 : (func(0 , [SystemFTyping.HasFTypeP;
                                                                                       Basics.FType]))
constant Basics.FConsT##a : (func(0 , [Basics.FEnv; int]))
constant SystemFTyping.isFTLet : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant WellFormedness.WFEBind##x : (func(0 , [WellFormedness.WFEnv;
                                                int]))
constant GHC.IO.Exception.IOError : (func(0 , [(GHC.Maybe.Maybe GHC.IO.Handle.Types.Handle);
                                               GHC.IO.Exception.IOErrorType;
                                               [Char];
                                               [Char];
                                               (GHC.Maybe.Maybe GHC.Int.Int32);
                                               (GHC.Maybe.Maybe [Char]);
                                               GHC.IO.Exception.IOException]))
constant is$SystemFTyping.FTAnn : (func(0 , [SystemFTyping.HasFType;
                                             bool]))
constant SystemFWellFormedness.WFFTFV3##lqdc##$select##SystemFWellFormedness.WFFTFV3##3 : (func(0 , [SystemFWellFormedness.WFFT;
                                                                                                     SystemFWellFormedness.WFFT]))
constant WellFormedness.WFEBindT##lqdc##$select##WellFormedness.WFEBindT##3 : (func(0 , [WellFormedness.WFEnv;
                                                                                         WellFormedness.WFEnv]))
constant GHC.List.take : (func(1 , [int; [@(0)]; [@(0)]]))
constant GHC.Stack.Types.PushCallStack : (func(0 , [[Char];
                                                    GHC.Stack.Types.SrcLoc;
                                                    GHC.Stack.Types.CallStack;
                                                    GHC.Stack.Types.CallStack]))
constant prop : (func(2 , [@(0); @(1)]))
constant SystemFTyping.FTVar2 : (func(0 , [Basics.FEnv;
                                           int;
                                           Basics.FType;
                                           SystemFTyping.HasFType;
                                           int;
                                           Basics.FType;
                                           SystemFTyping.HasFType]))
constant WellFormedness.WFType##lqdc##$select##WellFormedness.WFType##3 : (func(0 , [WellFormedness.WFTypeP;
                                                                                     Basics.Kind]))
constant GHC.Classes.$60$$61$ : (func(1 , [@(0); @(0); bool]))
constant SystemFTyping.FTVar3##y : (func(0 , [SystemFTyping.HasFType;
                                              int]))
constant GHC.Types.TrNameS : (func(0 , [Str; GHC.Types.TrName]))
constant Basics.lem_erase_freeTV : (func(0 , [Basics.Type; Tuple]))
constant Basics.FTPoly##lqdc##$select##Basics.FTPoly##3 : (func(0 , [Basics.FType;
                                                                     Basics.FType]))
constant SystemFTyping.FTAbsT##k : (func(0 , [SystemFTyping.HasFType;
                                              Basics.Kind]))
constant SystemFWellFormedness.WFFBind##x : (func(0 , [SystemFWellFormedness.WFFE;
                                                       int]))
constant GHC.Enum.C$58$Bounded : (func(1 , [@(0);
                                            @(0);
                                            (GHC.Enum.Bounded @(0))]))
constant is$Basics.Eq : (func(0 , [Basics.Prim; bool]))
constant is$Basics.FTV : (func(0 , [Basics.Basic; bool]))
constant is$SystemFTyping.FTBC : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant Basics.erase_env : (func(0 , [Basics.Env; Basics.FEnv]))
constant GHC.Base.map : (func(2 , [func(0 , [@(0); @(1)]);
                                   [@(0)];
                                   [@(1)]]))
constant Basics.Let##lqdc##$select##Basics.Let##3 : (func(0 , [Basics.Expr;
                                                               Basics.Expr]))
constant lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 : (func(2 , [(Tuple @(0) @(1));
                                                                                    @(1)]))
constant SystemFWellFormedness.WFFTFV2##g : (func(0 , [SystemFWellFormedness.WFFT;
                                                       Basics.FEnv]))
constant GHC.Show.C$58$Show : (func(1 , [func(0 , [int;
                                                   @(0);
                                                   [Char];
                                                   [Char]]);
                                         func(0 , [@(0); [Char]]);
                                         func(0 , [[@(0)]; [Char]; [Char]]);
                                         (GHC.Show.Show @(0))]))
constant Basics.fresh_var_excludingF : (func(0 , [Basics.FEnv;
                                                  int;
                                                  int]))
constant Data.Set.Internal.$WBin : (func(1 , [int;
                                              @(0);
                                              (Set_Set @(0));
                                              (Set_Set @(0));
                                              (Set_Set @(0))]))
constant is$Basics.FTFunc : (func(0 , [Basics.FType; bool]))
constant GHC.Base.$ : (func(3 , [func(0 , [@(1); @(2)]);
                                 @(1);
                                 @(2)]))
constant papp1 : (func(2 , [(Pred @(0)); @(1); bool]))
constant SystemFTyping.FTAppT##g : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FEnv]))
constant is$WellFormedness.WFRefn : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant is$Basics.Bc : (func(0 , [Basics.Expr; bool]))
constant SystemFWellFormedness.WFFTFV1##a : (func(0 , [SystemFWellFormedness.WFFT;
                                                       int]))
constant WellFormedness.WFFunc##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 : (func(3 , [(Tuple @(0) @(1) @(2));
                                                                                        @(2)]))
constant Language.Haskell.Liquid.ProofCombinators.impossible : (func(2 , [@(0);
                                                                          @(1)]))
constant Basics.TInt : (Basics.Basic)
constant Basics.unbind_tv : (func(0 , [int;
                                       int;
                                       Basics.Expr;
                                       Basics.Expr]))
constant SystemFTyping.FTVar2##b' : (func(0 , [SystemFTyping.HasFType;
                                               Basics.FType]))
constant SystemFTyping.synthType : (func(0 , [Basics.FEnv;
                                              Basics.Expr;
                                              (GHC.Maybe.Maybe Basics.FType)]))
constant GHC.Classes.$60$ : (func(1 , [@(0); @(0); bool]))
constant tail : (func(1 , [[@(0)]; [@(0)]]))
constant Basics.FCons##x : (func(0 , [Basics.FEnv; int]))
constant Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ : (func(1 , [@(0);
                                                                            @(0);
                                                                            @(0)]))
constant SystemFWellFormedness.WFFTKind : (func(0 , [Basics.FEnv;
                                                     Basics.FType;
                                                     SystemFWellFormedness.WFFT;
                                                     SystemFWellFormedness.WFFT]))
constant SystemFWellFormedness.WFFTBasic##b : (func(0 , [SystemFWellFormedness.WFFT;
                                                         Basics.Basic]))
constant SystemFTyping.FTAbs##b : (func(0 , [SystemFTyping.HasFType;
                                             Basics.FType]))
constant SystemFWellFormedness.WFFTFunc##t2 : (func(0 , [SystemFWellFormedness.WFFT;
                                                         Basics.FType]))
constant GHC.Stack.Types.FreezeCallStack : (func(0 , [GHC.Stack.Types.CallStack;
                                                      GHC.Stack.Types.CallStack]))
constant WellFormedness.noDefnsInRefns : (func(0 , [Basics.Env;
                                                    Basics.Type;
                                                    bool]))
constant Basics.FCons : (func(0 , [int;
                                   Basics.FType;
                                   Basics.FEnv;
                                   Basics.FEnv]))
constant Basics.kind_for_tvF : (func(0 , [int;
                                          Basics.FEnv;
                                          Basics.Kind]))
constant SystemFWellFormedness.WFFT : (func(0 , [Basics.FEnv;
                                                 Basics.FType;
                                                 Basics.Kind;
                                                 SystemFWellFormedness.WFFTP]))
constant GHC.Num.$42$ : (func(1 , [@(0); @(0); @(0)]))
constant is$Basics.TBool : (func(0 , [Basics.Basic; bool]))
constant SystemFWellFormedness.WFFBind##lqdc##$select##SystemFWellFormedness.WFFBind##5 : (func(0 , [SystemFWellFormedness.WFFE;
                                                                                                     SystemFWellFormedness.WFFE]))
constant Basics.lem_erase_freeBV : (func(0 , [Basics.Type; Tuple]))
constant Basics.v_in_env : (func(0 , [int; Basics.Env; bool]))
constant WellFormedness.foo05 : (func(1 , [@(0);
                                           (GHC.Maybe.Maybe @(0))]))
constant Basics.ftv : (func(0 , [Basics.Expr; (Set_Set int)]))
constant SystemFTyping.FTAbs##lqdc##$select##SystemFTyping.FTAbs##5 : (func(0 , [SystemFTyping.HasFType;
                                                                                 SystemFWellFormedness.WFFT]))
constant SystemFTyping.FTAnn : (func(0 , [Basics.FEnv;
                                          Basics.Expr;
                                          Basics.FType;
                                          Basics.Type;
                                          SystemFTyping.HasFType;
                                          SystemFTyping.HasFType]))
constant SystemFWellFormedness.WFFTFV2##a : (func(0 , [SystemFWellFormedness.WFFT;
                                                       int]))
constant Basics.Eq : (Basics.Prim)
constant SystemFTyping.refn_pred : (func(0 , [Basics.Prim;
                                              Basics.Expr]))
constant Basics.lookupF : (func(0 , [int;
                                     Basics.FEnv;
                                     (GHC.Maybe.Maybe Basics.FType)]))
constant Set_cup : (func(1 , [(Set_Set @(0));
                              (Set_Set @(0));
                              (Set_Set @(0))]))
constant is$SystemFTyping.FTVar2 : (func(0 , [SystemFTyping.HasFType;
                                              bool]))
constant WellFormedness.WFFunc##lqdc##$select##WellFormedness.WFFunc##5 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant Basics.subBTV : (func(0 , [int;
                                    Basics.Type;
                                    Basics.Expr;
                                    Basics.Expr]))
constant is$Basics.Eqn : (func(0 , [Basics.Prim; bool]))
constant Basics.free : (func(0 , [Basics.Type; (Set_Set int)]))
constant is$WellFormedness.WFVar1 : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant Basics.isTerm : (func(0 , [Basics.Expr; bool]))
constant Basics.TExists : (func(0 , [int;
                                     Basics.Type;
                                     Basics.Type;
                                     Basics.Type]))
constant WellFormedness.isWFKind : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant Basics.FTV : (func(0 , [int; Basics.Basic]))
constant GHC.Maybe.Nothing : (func(1 , [(GHC.Maybe.Maybe @(0))]))
constant Basics.bindsF : (func(0 , [Basics.FEnv; (Set_Set int)]))
constant WellFormedness.WFPoly##k_t : (func(0 , [WellFormedness.WFType;
                                                 Basics.Kind]))
constant WellFormedness.WFExis##lqdc##$select##WellFormedness.WFExis##5 : (func(0 , [WellFormedness.WFType;
                                                                                     WellFormedness.WFType]))
constant Basics.vbinds : (func(0 , [Basics.Env; (Set_Set int)]))
constant SystemFTyping.FTBC : (func(0 , [Basics.FEnv;
                                         bool;
                                         SystemFTyping.HasFType]))
constant Basics.tsubBV : (func(0 , [int;
                                    Basics.Expr;
                                    Basics.Type;
                                    Basics.Type]))
constant SystemFTyping.FTApp : (func(0 , [Basics.FEnv;
                                          Basics.Expr;
                                          Basics.FType;
                                          Basics.FType;
                                          SystemFTyping.HasFType;
                                          Basics.Expr;
                                          SystemFTyping.HasFType;
                                          SystemFTyping.HasFType]))
constant SystemFTyping.FTAbs##y : (func(0 , [SystemFTyping.HasFType;
                                             int]))
constant is$Basics.Annot : (func(0 , [Basics.Expr; bool]))
constant GHC.Types.EQ : (GHC.Types.Ordering)
constant Basics.FConsT##g : (func(0 , [Basics.FEnv; Basics.FEnv]))
constant WellFormedness.WFBase##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant Basics.FTFunc : (func(0 , [Basics.FType;
                                    Basics.FType;
                                    Basics.FType]))
constant GHC.List.scanr : (func(2 , [func(0 , [@(0); @(1); @(1)]);
                                     @(1);
                                     [@(0)];
                                     [@(1)]]))
constant SystemFTyping.FTApp##e : (func(0 , [SystemFTyping.HasFType;
                                             Basics.Expr]))
constant WellFormedness.WFExis##x : (func(0 , [WellFormedness.WFType;
                                               int]))
constant SystemFTyping.checkType : (func(0 , [Basics.FEnv;
                                              Basics.Expr;
                                              Basics.FType;
                                              bool]))
constant lit$PrimitivesWFTypeEql : (Str)
constant totalityError : (func(1 , [@(0); bool]))
constant GHC.Num.negate : (func(1 , [@(0); @(0)]))
constant SystemFWellFormedness.WFFTFunc : (func(0 , [Basics.FEnv;
                                                     Basics.FType;
                                                     Basics.Kind;
                                                     SystemFWellFormedness.WFFT;
                                                     Basics.FType;
                                                     Basics.Kind;
                                                     SystemFWellFormedness.WFFT;
                                                     SystemFWellFormedness.WFFT]))
constant WellFormedness.WFBase##b : (func(0 , [WellFormedness.WFType;
                                               Basics.Basic]))
constant Basics.tv_bound_inF : (func(0 , [int;
                                          Basics.Kind;
                                          Basics.FEnv;
                                          bool]))
constant Basics.Cons : (func(0 , [int;
                                  Basics.Type;
                                  Basics.Env;
                                  Basics.Env]))
constant SystemFTyping.FTVar1 : (func(0 , [Basics.FEnv;
                                           int;
                                           Basics.FType;
                                           SystemFTyping.HasFType]))
constant GHC.Real.fromIntegral : (func(2 , [@(0); @(1)]))
constant SystemFWellFormedness.WFFBind##k : (func(0 , [SystemFWellFormedness.WFFE;
                                                       Basics.Kind]))
constant Basics.App : (func(0 , [Basics.Expr;
                                 Basics.Expr;
                                 Basics.Expr]))
constant WellFormedness.WFRefn##p : (func(0 , [WellFormedness.WFType;
                                               Basics.Expr]))
constant GHC.Maybe.Just : (func(1 , [@(0);
                                     (GHC.Maybe.Maybe @(0))]))
constant WellFormedness.WFEBind##k : (func(0 , [WellFormedness.WFEnv;
                                                Basics.Kind]))
constant Basics.lem_term_pred : (func(0 , [Basics.Expr; Tuple]))
constant Basics.isPred : (func(0 , [Basics.Expr; bool]))
constant SystemFWellFormedness.simpleWFFTFV : (func(0 , [Basics.FEnv;
                                                         int;
                                                         Basics.Kind;
                                                         SystemFWellFormedness.WFFT]))
constant WellFormedness.WFExis : (func(0 , [Basics.Env;
                                            int;
                                            Basics.Type;
                                            Basics.Kind;
                                            WellFormedness.WFType;
                                            Basics.Type;
                                            Basics.Kind;
                                            int;
                                            WellFormedness.WFType;
                                            WellFormedness.WFType]))
constant Basics.Cons##x : (func(0 , [Basics.Env; int]))
constant SystemFTyping.FTAbsT : (func(0 , [Basics.FEnv;
                                           int;
                                           Basics.Kind;
                                           Basics.Expr;
                                           Basics.FType;
                                           int;
                                           SystemFTyping.HasFType;
                                           SystemFTyping.HasFType]))
constant SystemFTyping.FTVar1##x : (func(0 , [SystemFTyping.HasFType;
                                              int]))
constant WellFormedness.isWFVar : (func(0 , [WellFormedness.WFType;
                                             bool]))
constant SystemFWellFormedness.WFFBindT##g : (func(0 , [SystemFWellFormedness.WFFE;
                                                        Basics.FEnv]))
constant GHC.Classes.min : (func(1 , [@(0); @(0); @(0)]))
constant WellFormedness.WFFunc##y : (func(0 , [WellFormedness.WFType;
                                               int]))
constant SystemFWellFormedness.foo03 : (func(1 , [@(0);
                                                  (GHC.Maybe.Maybe @(0))]))
constant Basics.isBaseF : (func(0 , [Basics.FType; bool]))
constant GHC.List.head : (func(1 , [[@(0)]; @(0)]))
constant lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 : (func(2 , [(Tuple @(0) @(1));
                                                                                    @(0)]))
constant SystemFTyping.FTAnn##e : (func(0 , [SystemFTyping.HasFType;
                                             Basics.Expr]))
constant WellFormedness.WFEBindT##g : (func(0 , [WellFormedness.WFEnv;
                                                 Basics.Env]))
constant SystemFWellFormedness.WFFTFV2##t : (func(0 , [SystemFWellFormedness.WFFT;
                                                       Basics.FType]))
constant SystemFTyping.FTIC##n : (func(0 , [SystemFTyping.HasFType;
                                            int]))
constant is$Basics.Lambda : (func(0 , [Basics.Expr; bool]))
constant x_Tuple32 : (func(3 , [(Tuple @(0) @(1) @(2)); @(1)]))
constant is$SystemFTyping.FTIC : (func(0 , [SystemFTyping.HasFType;
                                            bool]))
constant Data.Set.Internal.Tip : (func(1 , [(Set_Set @(0))]))
constant WellFormedness.WFKind##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant WellFormedness.WFVar3##a : (func(0 , [WellFormedness.WFType;
                                               int]))
constant WellFormedness.WFRefn##tt : (func(0 , [WellFormedness.WFType;
                                                Basics.Expr]))
constant WellFormedness.WFVar2 : (func(0 , [Basics.Env;
                                            int;
                                            Basics.Expr;
                                            Basics.Kind;
                                            WellFormedness.WFType;
                                            int;
                                            Basics.Type;
                                            WellFormedness.WFType]))
constant is$SystemFTyping.FTAppT : (func(0 , [SystemFTyping.HasFType;
                                              bool]))
constant GHC.Classes.C$58$Eq : (func(1 , [func(0 , [@(0);
                                                    @(0);
                                                    bool]);
                                          func(0 , [@(0); @(0); bool]);
                                          (GHC.Classes.Eq @(0))]))
constant GHC.List.repeat : (func(1 , [@(0); [@(0)]]))
constant WellFormedness.isWFPoly : (func(0 , [WellFormedness.WFType;
                                              bool]))
constant is$Basics.FV : (func(0 , [Basics.Expr; bool]))
constant WellFormedness.WFEBind##t : (func(0 , [WellFormedness.WFEnv;
                                                Basics.Type]))
constant Basics.push : (func(0 , [Basics.Expr;
                                  Basics.Type;
                                  Basics.Type]))
constant lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 : (func(1 , [[@(0)];
                                                                            [@(0)]]))
constant is$WellFormedness.WFFunc : (func(0 , [WellFormedness.WFType;
                                               bool]))
constant SystemFWellFormedness.WFFE : (func(0 , [Basics.FEnv;
                                                 SystemFWellFormedness.WFFEP]))
constant GHC.Classes.not : (func(0 , [bool; bool]))
constant WellFormedness.WFType : (func(0 , [Basics.Env;
                                            Basics.Type;
                                            Basics.Kind;
                                            WellFormedness.WFTypeP]))
constant GHC.Num.$43$ : (func(1 , [@(0); @(0); @(0)]))
constant Data.Tuple.fst : (func(2 , [(Tuple @(0) @(1)); @(0)]))
constant Basics.maxpList : (func(0 , [Basics.Env; int]))
constant SystemFTyping.FTAbsT##g : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FEnv]))
constant SystemFWellFormedness.WFFBind##t : (func(0 , [SystemFWellFormedness.WFFE;
                                                       Basics.FType]))
constant SystemFWellFormedness.WFFTFV2##k : (func(0 , [SystemFWellFormedness.WFFT;
                                                       Basics.Kind]))
constant GHC.Real.C$58$Integral : (func(1 , [func(0 , [@(0);
                                                       @(0);
                                                       @(0)]);
                                             func(0 , [@(0); @(0); @(0)]);
                                             func(0 , [@(0); @(0); @(0)]);
                                             func(0 , [@(0); @(0); @(0)]);
                                             func(0 , [@(0); @(0); (Tuple @(0) @(0))]);
                                             func(0 , [@(0); @(0); (Tuple @(0) @(0))]);
                                             func(0 , [@(0); int]);
                                             (GHC.Real.Integral @(0))]))
constant Basics.Cons##g : (func(0 , [Basics.Env; Basics.Env]))
constant SystemFTyping.FTVar1##g : (func(0 , [SystemFTyping.HasFType;
                                              Basics.FEnv]))
constant GHC.Err.error : (func(2 , [[Char]; @(1)]))
constant is$Basics.Conj : (func(0 , [Basics.Expr; bool]))
constant snd : (func(2 , [(Tuple @(0) @(1)); @(1)]))
constant fst : (func(2 , [(Tuple @(0) @(1)); @(0)]))
constant Language.Haskell.Liquid.ProofCombinators.QED : (Language.Haskell.Liquid.ProofCombinators.QED)
constant SystemFWellFormedness.WFFTFunc##g : (func(0 , [SystemFWellFormedness.WFFT;
                                                        Basics.FEnv]))
constant Basics.isConjunction : (func(0 , [Basics.Expr; bool]))
constant lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 : (func(3 , [(Tuple @(0) @(1) @(2));
                                                                                        @(1)]))
constant Basics.ftsubFV : (func(0 , [int;
                                     Basics.FType;
                                     Basics.FType;
                                     Basics.FType]))
constant SystemFWellFormedness.WFFTFV1 : (func(0 , [Basics.FEnv;
                                                    int;
                                                    Basics.Kind;
                                                    SystemFWellFormedness.WFFT]))
constant Basics.fenvsize : (func(0 , [Basics.FEnv; int]))
constant WellFormedness.WFVar2##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant Basics.ffreeBV : (func(0 , [Basics.FType; (Set_Set int)]))
constant Data.Tuple.snd : (func(2 , [(Tuple @(0) @(1)); @(1)]))
constant WellFormedness.WFExis##g : (func(0 , [WellFormedness.WFType;
                                               Basics.Env]))
constant Basics.TPoly : (func(0 , [int;
                                   Basics.Kind;
                                   Basics.Type;
                                   Basics.Type]))
constant is$Basics.FTBasic : (func(0 , [Basics.FType; bool]))


distinct Basics.And : (Basics.Prim)
distinct Language.Haskell.Liquid.ProofCombinators.Admit : (Language.Haskell.Liquid.ProofCombinators.QED)
distinct Basics.Eql : (Basics.Prim)
distinct Basics.Leq : (Basics.Prim)
distinct GHC.Types.LT : (GHC.Types.Ordering)
distinct Basics.Empty : (Basics.Env)
distinct Basics.Or : (Basics.Prim)
distinct Basics.Not : (Basics.Prim)
distinct GHC.Types.False : (bool)
distinct Basics.Z : (Basics.RVname)
distinct GHC.Types.Module : (func(0 , [GHC.Types.TrName;
                                       GHC.Types.TrName;
                                       GHC.Types.Module]))
distinct GHC.Tuple.$40$$41$ : (Tuple)
distinct Basics.Eqv : (Basics.Prim)
distinct Basics.Star : (Basics.Kind)
distinct GHC.Stack.Types.EmptyCallStack : (GHC.Stack.Types.CallStack)
distinct lit$main : (Str)
distinct GHC.Types.True : (bool)
distinct GHC.Types.GT : (GHC.Types.Ordering)
distinct Basics.FEmpty : (Basics.FEnv)
distinct Basics.Base : (Basics.Kind)
distinct Basics.TBool : (Basics.Basic)
distinct GHC.Types.TrNameS : (func(0 , [Str; GHC.Types.TrName]))
distinct GHC.Show.C$58$Show : (func(1 , [func(0 , [int;
                                                   @(0);
                                                   [Char];
                                                   [Char]]);
                                         func(0 , [@(0); [Char]]);
                                         func(0 , [[@(0)]; [Char]; [Char]]);
                                         (GHC.Show.Show @(0))]))
distinct Basics.TInt : (Basics.Basic)
distinct Basics.Eq : (Basics.Prim)
distinct GHC.Types.EQ : (GHC.Types.Ordering)
distinct lit$PrimitivesWFTypeEql : (Str)
distinct GHC.Maybe.Just : (func(1 , [@(0);
                                     (GHC.Maybe.Maybe @(0))]))
distinct GHC.Classes.C$58$Eq : (func(1 , [func(0 , [@(0);
                                                    @(0);
                                                    bool]);
                                          func(0 , [@(0); @(0); bool]);
                                          (GHC.Classes.Eq @(0))]))
distinct Language.Haskell.Liquid.ProofCombinators.QED : (Language.Haskell.Liquid.ProofCombinators.QED)


bind 0 PrimitivesWFTypeEql.foo18 : {VV : func(0 , [int;
                                                   (GHC.Maybe.Maybe int)]) | []}
bind 1 GHC.Maybe.Just : {VV : func(1 , [@(0);
                                        (GHC.Maybe.Maybe @(0))]) | []}
bind 2 GHC.Tuple.$40$$41$ : {VV##1169 : Tuple | []}
bind 3 GHC.Types.Module : {VV : func(0 , [GHC.Types.TrName;
                                          GHC.Types.TrName;
                                          GHC.Types.Module]) | []}
bind 4 GHC.Types.TrNameS : {VV : func(0 , [Str;
                                           GHC.Types.TrName]) | []}
bind 5 GHC.Show.C$58$Show : {VV : func(1 , [func(0 , [int;
                                                      @(0);
                                                      [Char];
                                                      [Char]]);
                                            func(0 , [@(0); [Char]]);
                                            func(0 , [[@(0)]; [Char]; [Char]]);
                                            (GHC.Show.Show @(0))]) | []}
bind 6 GHC.Show.C$58$Show : {VV : func(1 , [func(0 , [int;
                                                      @(0);
                                                      [Char];
                                                      [Char]]);
                                            func(0 , [@(0); [Char]]);
                                            func(0 , [[@(0)]; [Char]; [Char]]);
                                            (GHC.Show.Show @(0))]) | []}
bind 7 GHC.Show.C$58$Show : {VV : func(1 , [func(0 , [int;
                                                      @(0);
                                                      [Char];
                                                      [Char]]);
                                            func(0 , [@(0); [Char]]);
                                            func(0 , [[@(0)]; [Char]; [Char]]);
                                            (GHC.Show.Show @(0))]) | []}
bind 8 GHC.Show.C$58$Show : {VV : func(1 , [func(0 , [int;
                                                      @(0);
                                                      [Char];
                                                      [Char]]);
                                            func(0 , [@(0); [Char]]);
                                            func(0 , [[@(0)]; [Char]; [Char]]);
                                            (GHC.Show.Show @(0))]) | []}
bind 9 GHC.Show.C$58$Show : {VV : func(1 , [func(0 , [int;
                                                      @(0);
                                                      [Char];
                                                      [Char]]);
                                            func(0 , [@(0); [Char]]);
                                            func(0 , [[@(0)]; [Char]; [Char]]);
                                            (GHC.Show.Show @(0))]) | []}
bind 10 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 11 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 12 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 13 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 14 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 15 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 16 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 17 GHC.Types.Module : {VV : func(0 , [GHC.Types.TrName;
                                           GHC.Types.TrName;
                                           GHC.Types.Module]) | []}
bind 18 GHC.Tuple.$40$$41$ : {VV##1185 : Tuple | [(VV##1185 = GHC.Tuple.$40$$41$)]}
bind 19 GHC.Types.TrNameS : {VV : func(0 , [Str;
                                            GHC.Types.TrName]) | []}
bind 20 GHC.Show.C$58$Show : {VV : func(1 , [func(0 , [int;
                                                       @(0);
                                                       [Char];
                                                       [Char]]);
                                             func(0 , [@(0); [Char]]);
                                             func(0 , [[@(0)]; [Char]; [Char]]);
                                             (GHC.Show.Show @(0))]) | []}
bind 21 GHC.Maybe.Just : {VV : func(1 , [@(0);
                                         (GHC.Maybe.Maybe @(0))]) | []}
bind 22 GHC.Classes.C$58$Eq : {VV : func(1 , [func(0 , [@(0);
                                                        @(0);
                                                        bool]);
                                              func(0 , [@(0); @(0); bool]);
                                              (GHC.Classes.Eq @(0))]) | []}
bind 23 GHC.Base.. : {VV : func(3 , [func(0 , [@(0); @(1)]);
                                     func(0 , [@(2); @(0)]);
                                     @(2);
                                     @(1)]) | []}
bind 24 GHC.List.reverse : {VV : func(1 , [[@(0)]; [@(0)]]) | []}
bind 25 Data.Maybe.maybe : {VV : func(2 , [@(0);
                                           func(0 , [@(1); @(0)]);
                                           (GHC.Maybe.Maybe @(1));
                                           @(0)]) | []}
bind 26 WellFormedness.isWFBase : {VV : func(0 , [WellFormedness.WFType;
                                                  bool]) | []}
bind 27 Basics.ffreeTV : {VV : func(0 , [Basics.FType;
                                         (Set_Set int)]) | []}
bind 28 Basics.lem_boundin_inenvF : {VV : func(0 , [int;
                                                    Basics.FType;
                                                    Basics.FEnv;
                                                    Tuple]) | []}
bind 29 SystemFTyping.refn_pred_freeBV : {VV : func(0 , [Basics.Prim;
                                                         (Set_Set int)]) | []}
bind 30 GHC.Classes.$47$$61$ : {VV : func(1 , [@(0);
                                               @(0);
                                               bool]) | []}
bind 31 Basics.freeTV : {VV : func(0 , [Basics.Type;
                                        (Set_Set int)]) | []}
bind 32 Basics.maxpList : {VV : func(0 , [Basics.Env; int]) | []}
bind 33 Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ : {VV : func(1 , [@(0);
                                                                                @(0);
                                                                                @(0)]) | []}
bind 34 Basics.isTerm : {VV : func(0 , [Basics.Expr; bool]) | []}
bind 35 Basics.unbind : {VV : func(0 , [int;
                                        int;
                                        Basics.Expr;
                                        Basics.Expr]) | []}
bind 36 GHC.List.scanl : {VV : func(2 , [func(0 , [@(0);
                                                   @(1);
                                                   @(0)]);
                                         @(0);
                                         [@(1)];
                                         [@(0)]]) | []}
bind 37 GHC.Types.False : {v : bool | [(~ (v))]}
bind 38 SystemFWellFormedness.foo03 : {VV : func(1 , [@(0);
                                                      (GHC.Maybe.Maybe @(0))]) | []}
bind 39 WellFormedness.isWFRefn : {VV : func(0 , [WellFormedness.WFType;
                                                  bool]) | []}
bind 40 Basics.ffreeBV : {VV : func(0 , [Basics.FType;
                                         (Set_Set int)]) | []}
bind 41 Basics.lem_tvboundin_inenvF : {VV : func(0 , [int;
                                                      Basics.Kind;
                                                      Basics.FEnv;
                                                      Tuple]) | []}
bind 42 SystemFTyping.refn_pred : {VV : func(0 , [Basics.Prim;
                                                  Basics.Expr]) | []}
bind 43 GHC.Classes.$60$ : {VV : func(1 , [@(0); @(0); bool]) | []}
bind 44 Basics.tfreeBV : {VV : func(0 , [Basics.Type;
                                         (Set_Set int)]) | []}
bind 45 Basics.lem_maxp_list1 : {VV : func(0 , [Basics.Env;
                                                int;
                                                bool]) | []}
bind 46 Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ : {VV : func(1 , [@(0);
                                                                                @(0);
                                                                                @(0)]) | []}
bind 47 Basics.isPred : {VV : func(0 , [Basics.Expr; bool]) | []}
bind 48 Basics.unbind_tv : {VV : func(0 , [int;
                                           int;
                                           Basics.Expr;
                                           Basics.Expr]) | []}
bind 49 GHC.List.scanl1 : {VV : func(1 , [func(0 , [@(0);
                                                    @(0);
                                                    @(0)]);
                                          [@(0)];
                                          [@(0)]]) | []}
bind 50 GHC.Types.True : {v : bool | [v]}
bind 51 GHC.Real.$94$ : {VV : func(2 , [@(0); @(1); @(0)]) | []}
bind 52 SystemFWellFormedness.wfftypSize : {VV : func(0 , [SystemFWellFormedness.WFFT;
                                                           int]) | []}
bind 53 WellFormedness.isWFVar : {VV : func(0 , [WellFormedness.WFType;
                                                 bool]) | []}
bind 54 Basics.ftsubFV : {VV : func(0 , [int;
                                         Basics.FType;
                                         Basics.FType;
                                         Basics.FType]) | []}
bind 55 Basics.bindsF : {VV : func(0 , [Basics.FEnv;
                                        (Set_Set int)]) | []}
bind 56 SystemFTyping.ty : {VV : func(0 , [Basics.Prim;
                                           Basics.Type]) | []}
bind 57 GHC.Classes.$60$$61$ : {VV : func(1 , [@(0);
                                               @(0);
                                               bool]) | []}
bind 58 GHC.Real.fromIntegral : {VV : func(2 , [@(0); @(1)]) | []}
bind 59 Basics.tfreeBTV : {VV : func(0 , [Basics.Type;
                                          (Set_Set int)]) | []}
bind 60 Basics.in_env : {VV : func(0 , [int;
                                        Basics.Env;
                                        bool]) | []}
bind 61 Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ : {VV : func(1 , [@(0);
                                                                                @(0);
                                                                                @(0)]) | []}
bind 62 Basics.lem_term_pred : {VV : func(0 , [Basics.Expr;
                                               Tuple]) | []}
bind 63 Basics.strengthen : {VV : func(0 , [Basics.Expr;
                                            Basics.Expr;
                                            Basics.Expr]) | []}
bind 64 GHC.List.scanr : {VV : func(2 , [func(0 , [@(0);
                                                   @(1);
                                                   @(1)]);
                                         @(1);
                                         [@(0)];
                                         [@(1)]]) | []}
bind 65 SystemFTyping.foo04 : {VV : func(1 , [@(0);
                                              (GHC.Maybe.Maybe @(0))]) | []}
bind 66 SystemFWellFormedness.isWFFTFunc : {VV : func(0 , [SystemFWellFormedness.WFFT;
                                                           bool]) | []}
bind 67 WellFormedness.isWFVar1 : {VV : func(0 , [WellFormedness.WFType;
                                                  bool]) | []}
bind 68 Basics.ftsubBV : {VV : func(0 , [int;
                                         Basics.FType;
                                         Basics.FType;
                                         Basics.FType]) | []}
bind 69 Basics.vbindsF : {VV : func(0 , [Basics.FEnv;
                                         (Set_Set int)]) | []}
bind 70 SystemFTyping.erase_ty : {VV : func(0 , [Basics.Prim;
                                                 Basics.FType]) | []}
bind 71 Data.Foldable.length : {VV : func(2 , [(@(1) @(0));
                                               int]) | []}
bind 72 GHC.Classes.$62$ : {VV : func(1 , [@(0); @(0); bool]) | []}
bind 73 Basics.push : {VV : func(0 , [Basics.Expr;
                                      Basics.Type;
                                      Basics.Type]) | []}
bind 74 Basics.bound_in : {VV : func(0 , [int;
                                          Basics.Type;
                                          Basics.Env;
                                          bool]) | []}
bind 75 Language.Haskell.Liquid.ProofCombinators.$63$ : {VV : func(2 , [@(0);
                                                                        @(1);
                                                                        @(0)]) | []}
bind 76 Basics.isValue : {VV : func(0 , [Basics.Expr; bool]) | []}
bind 77 Basics.isTrivial : {VV : func(0 , [Basics.Expr;
                                           bool]) | []}
bind 78 GHC.List.last : {VV : func(1 , [[@(0)]; @(0)]) | []}
bind 79 Basics.ftsize : {VV : func(0 , [Basics.FType; int]) | []}
bind 80 WellFormedness.isWellFormed : {VV : func(0 , [Basics.Env;
                                                      Basics.Type;
                                                      Basics.Kind;
                                                      bool]) | []}
bind 81 Basics.bound_inF : {VV : func(0 , [int;
                                           Basics.FType;
                                           Basics.FEnv;
                                           bool]) | []}
bind 82 SystemFTyping.isFTConj : {VV : func(0 , [SystemFTyping.HasFType;
                                                 bool]) | []}
bind 83 GHC.Classes.$124$$124$ : {VV : func(0 , [bool;
                                                 bool;
                                                 bool]) | []}
bind 84 GHC.Classes.$62$$61$ : {VV : func(1 , [@(0);
                                               @(0);
                                               bool]) | []}
bind 85 Basics.isTFunc : {VV : func(0 , [Basics.Type; bool]) | []}
bind 86 Basics.max : {VV : func(0 , [int; int; int]) | []}
bind 87 Basics.subFTV : {VV : func(0 , [int;
                                        Basics.Type;
                                        Basics.Expr;
                                        Basics.Expr]) | []}
bind 88 Data.Tuple.fst : {VV : func(2 , [(Tuple @(0) @(1));
                                         @(0)]) | []}
bind 89 GHC.List.zipWith : {VV : func(3 , [func(0 , [@(0);
                                                     @(1);
                                                     @(2)]);
                                           [@(0)];
                                           [@(1)];
                                           [@(2)]]) | []}
bind 90 Basics.isBaseF : {VV : func(0 , [Basics.FType; bool]) | []}
bind 91 GHC.Base.id : {VV : func(1 , [@(0); @(0)]) | []}
bind 92 WellFormedness.makeWFType : {VV : func(0 , [Basics.Env;
                                                    Basics.Type;
                                                    Basics.Kind;
                                                    WellFormedness.WFType]) | []}
bind 93 Basics.tv_bound_inF : {VV : func(0 , [int;
                                              Basics.Kind;
                                              Basics.FEnv;
                                              bool]) | []}
bind 94 GHC.Base.map : {VV : func(2 , [func(0 , [@(0); @(1)]);
                                       [@(0)];
                                       [@(1)]]) | []}
bind 95 SystemFTyping.simpleFTVar : {VV : func(0 , [Basics.FEnv;
                                                    int;
                                                    Basics.FType;
                                                    SystemFTyping.HasFType]) | []}
bind 96 GHC.Num.negate : {VV : func(1 , [@(0); @(0)]) | []}
bind 97 Basics.isTExists : {VV : func(0 , [Basics.Type;
                                           bool]) | []}
bind 98 Basics.envsize : {VV : func(0 , [Basics.Env; int]) | []}
bind 99 Basics.chgFTV : {VV : func(0 , [int;
                                        int;
                                        Basics.Expr;
                                        Basics.Expr]) | []}
bind 100 GHC.List.repeat : {VV : func(1 , [@(0); [@(0)]]) | []}
bind 101 Data.Tuple.snd : {VV : func(2 , [(Tuple @(0) @(1));
                                          @(1)]) | []}
bind 102 WellFormedness.foo05 : {VV : func(1 , [@(0);
                                                (GHC.Maybe.Maybe @(0))]) | []}
bind 103 Basics.erase : {VV : func(0 , [Basics.Type;
                                        Basics.FType]) | []}
bind 104 Basics.kind_for_tvF : {VV : func(0 , [int;
                                               Basics.FEnv;
                                               Basics.Kind]) | []}
bind 105 SystemFTyping.tybc : {VV : func(0 , [bool;
                                              Basics.Type]) | []}
bind 106 Basics.isTPoly : {VV : func(0 , [Basics.Type; bool]) | []}
bind 107 Basics.fresh_var : {VV : func(0 , [Basics.Env; int]) | []}
bind 108 Basics.subBV : {VV : func(0 , [int;
                                        Basics.Expr;
                                        Basics.Expr;
                                        Basics.Expr]) | []}
bind 109 GHC.List.replicate : {VV : func(1 , [int;
                                              @(0);
                                              [@(0)]]) | []}
bind 110 WellFormedness.wftypSize : {VV : func(0 , [WellFormedness.WFType;
                                                    int]) | []}
bind 111 Basics.unerase : {VV : func(0 , [Basics.FType;
                                          Basics.Type]) | []}
bind 112 GHC.Err.error : {VV : func(2 , [[Char]; @(1)]) | []}
bind 113 Basics.lem_lookup_boundinF : {VV : func(0 , [int;
                                                      Basics.FType;
                                                      Basics.FEnv;
                                                      Tuple]) | []}
bind 114 GHC.Base.$ : {VV : func(3 , [func(0 , [@(1); @(2)]);
                                      @(1);
                                      @(2)]) | []}
bind 115 SystemFTyping.tyic : {VV : func(0 , [int;
                                              Basics.Type]) | []}
bind 116 Basics.free : {VV : func(0 , [Basics.Type;
                                       (Set_Set int)]) | []}
bind 117 Basics.fresh_var_excluding : {VV : func(0 , [Basics.Env;
                                                      int;
                                                      int]) | []}
bind 118 Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ : {VV : func(1 , [@(0);
                                                                                 Language.Haskell.Liquid.ProofCombinators.QED;
                                                                                 Tuple]) | []}
bind 119 Basics.esize : {VV : func(0 , [Basics.Expr; int]) | []}
bind 120 Basics.subBTV : {VV : func(0 , [int;
                                         Basics.Type;
                                         Basics.Expr;
                                         Basics.Expr]) | []}
bind 121 GHC.List.dropWhile : {VV : func(1 , [func(0 , [@(0);
                                                        bool]);
                                              [@(0)];
                                              [@(0)]]) | []}
bind 122 GHC.List.take : {VV : func(1 , [int;
                                         [@(0)];
                                         [@(0)]]) | []}
bind 123 GHC.Types.C# : {VV : func(0 , [Char; Char]) | []}
bind 124 Basics.vbinds : {VV : func(0 , [Basics.Env;
                                         (Set_Set int)]) | []}
bind 125 WellFormedness.isWFPoly : {VV : func(0 , [WellFormedness.WFType;
                                                   bool]) | []}
bind 126 Basics.maxpListF : {VV : func(0 , [Basics.FEnv;
                                            int]) | []}
bind 127 SystemFTyping.isFTAbsT : {VV : func(0 , [SystemFTyping.HasFType;
                                                  bool]) | []}
bind 128 SystemFTyping.checkType : {VV : func(0 , [Basics.FEnv;
                                                   Basics.Expr;
                                                   Basics.FType;
                                                   bool]) | []}
bind 129 GHC.Num.$42$ : {VV : func(1 , [@(0); @(0); @(0)]) | []}
bind 130 Basics.lem_refn_is_pred : {VV : func(0 , [Basics.Type;
                                                   Basics.Basic;
                                                   Basics.RVname;
                                                   Basics.Expr;
                                                   Tuple]) | []}
bind 131 Basics.tsubBTV : {VV : func(0 , [int;
                                          Basics.Type;
                                          Basics.Type;
                                          Basics.Type]) | []}
bind 132 Language.Haskell.Liquid.ProofCombinators.impossible : {VV : func(2 , [@(0);
                                                                               @(1)]) | []}
bind 133 Basics.freeBTV : {VV : func(0 , [Basics.Expr;
                                          (Set_Set int)]) | []}
bind 134 GHC.List.head : {VV : func(1 , [[@(0)]; @(0)]) | []}
bind 135 GHC.List.takeWhile : {VV : func(1 , [func(0 , [@(0);
                                                        bool]);
                                              [@(0)];
                                              [@(0)]]) | []}
bind 136 Basics.tv_in_env : {VV : func(0 , [int;
                                            Basics.Env;
                                            bool]) | []}
bind 137 WellFormedness.isWFKind : {VV : func(0 , [WellFormedness.WFType;
                                                   bool]) | []}
bind 138 Basics.lem_maxp_listF : {VV : func(0 , [Basics.FEnv;
                                                 int;
                                                 bool]) | []}
bind 139 SystemFTyping.isFTAppT : {VV : func(0 , [SystemFTyping.HasFType;
                                                  bool]) | []}
bind 140 SystemFTyping.synthType : {VV : func(0 , [Basics.FEnv;
                                                   Basics.Expr;
                                                   (GHC.Maybe.Maybe Basics.FType)]) | []}
bind 141 GHC.Num.$43$ : {VV : func(1 , [@(0); @(0); @(0)]) | []}
bind 142 Basics.noExists : {VV : func(0 , [Basics.Type;
                                           bool]) | []}
bind 143 Basics.unbindT : {VV : func(0 , [int;
                                          int;
                                          Basics.Type;
                                          Basics.Type]) | []}
bind 144 Basics.fv : {VV : func(0 , [Basics.Expr;
                                     (Set_Set int)]) | []}
bind 145 GHC.List.init : {VV : func(1 , [[@(0)]; [@(0)]]) | []}
bind 146 Basics.tvbinds : {VV : func(0 , [Basics.Env;
                                          (Set_Set int)]) | []}
bind 147 WellFormedness.simpleWFVar : {VV : func(0 , [Basics.Env;
                                                      int;
                                                      Basics.Expr;
                                                      Basics.Kind;
                                                      WellFormedness.WFType]) | []}
bind 148 Basics.in_envF : {VV : func(0 , [int;
                                          Basics.FEnv;
                                          bool]) | []}
bind 149 SystemFTyping.isFTLet : {VV : func(0 , [SystemFTyping.HasFType;
                                                 bool]) | []}
bind 150 GHC.Classes.$38$$38$ : {VV : func(0 , [bool;
                                                bool;
                                                bool]) | []}
bind 151 SystemFTyping.lem_check_synth : {VV : func(0 , [Basics.FEnv;
                                                         Basics.Expr;
                                                         Basics.FType;
                                                         Tuple]) | []}
bind 152 Language.Haskell.Liquid.ProofCombinators.Admit : {v : Language.Haskell.Liquid.ProofCombinators.QED | [(isAdmit v)]}
bind 153 Basics.tsize : {VV : func(0 , [Basics.Type; int]) | []}
bind 154 Basics.unbind_tvT : {VV : func(0 , [int;
                                             int;
                                             Basics.Type;
                                             Basics.Type]) | []}
bind 155 Basics.ftv : {VV : func(0 , [Basics.Expr;
                                      (Set_Set int)]) | []}
bind 156 GHC.List.iterate : {VV : func(1 , [func(0 , [@(0); @(0)]);
                                            @(0);
                                            [@(0)]]) | []}
bind 157 Basics.lem_binds_invariants : {VV : func(0 , [Basics.Env;
                                                       Tuple]) | []}
bind 158 WellFormedness.noDefnsInRefns : {VV : func(0 , [Basics.Env;
                                                         Basics.Type;
                                                         bool]) | []}
bind 159 Basics.lookupF : {VV : func(0 , [int;
                                          Basics.FEnv;
                                          (GHC.Maybe.Maybe Basics.FType)]) | []}
bind 160 SystemFTyping.isFTAnn : {VV : func(0 , [SystemFTyping.HasFType;
                                                 bool]) | []}
bind 161 GHC.Classes.not : {VV : func(0 , [bool; bool]) | []}
bind 162 SystemFTyping.makeHasFType : {VV : func(0 , [Basics.FEnv;
                                                      Basics.Expr;
                                                      Basics.FType;
                                                      SystemFTyping.HasFType]) | []}
bind 163 GHC.Classes.$61$$61$ : {VV : func(1 , [@(0);
                                                @(0);
                                                bool]) | []}
bind 164 Basics.isTRefn : {VV : func(0 , [Basics.Type; bool]) | []}
bind 165 Basics.withProof : {VV : func(2 , [@(0);
                                            @(1);
                                            @(0)]) | []}
bind 166 Basics.subFV : {VV : func(0 , [int;
                                        Basics.Expr;
                                        Basics.Expr;
                                        Basics.Expr]) | []}
bind 167 GHC.List.$33$$33$ : {VV : func(1 , [[@(0)];
                                             int;
                                             @(0)]) | []}
bind 168 GHC.List.filter : {VV : func(1 , [func(0 , [@(0); bool]);
                                           [@(0)];
                                           [@(0)]]) | []}
bind 169 Basics.tvbindsF : {VV : func(0 , [Basics.FEnv;
                                           (Set_Set int)]) | []}
bind 170 GHC.List.scanr1 : {VV : func(1 , [func(0 , [@(0);
                                                     @(0);
                                                     @(0)]);
                                           [@(0)];
                                           [@(0)]]) | []}
bind 171 Basics.tv_bound_in : {VV : func(0 , [int;
                                              Basics.Kind;
                                              Basics.Env;
                                              bool]) | []}
bind 172 SystemFWellFormedness.isWFFTPoly : {VV : func(0 , [SystemFWellFormedness.WFFT;
                                                            bool]) | []}
bind 173 WellFormedness.isWFVar2 : {VV : func(0 , [WellFormedness.WFType;
                                                   bool]) | []}
bind 174 Basics.unbindFT : {VV : func(0 , [int;
                                           int;
                                           Basics.FType;
                                           Basics.FType]) | []}
bind 175 SystemFTyping.ftypSize : {VV : func(0 , [SystemFTyping.HasFType;
                                                  int]) | []}
bind 176 SystemFTyping.firstBV : {VV : func(0 , [Basics.Prim;
                                                 int]) | []}
bind 177 GHC.Num.fromInteger : {VV : func(1 , [int; @(0)]) | []}
bind 178 GHC.Classes.compare : {VV : func(1 , [@(0);
                                               @(0);
                                               GHC.Types.Ordering]) | []}
bind 179 Basics.lem_trivial_nofv : {VV : func(0 , [Basics.Expr;
                                                   Tuple]) | []}
bind 180 Basics.tsubFV : {VV : func(0 , [int;
                                         Basics.Expr;
                                         Basics.Type;
                                         Basics.Type]) | []}
bind 181 Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ : {VV : func(1 , [@(0);
                                                                                 @(0);
                                                                                 @(0)]) | []}
bind 182 Basics.lem_value_term : {VV : func(0 , [Basics.Expr;
                                                 Tuple]) | []}
bind 183 GHC.List.break : {VV : func(1 , [func(0 , [@(0); bool]);
                                          [@(0)];
                                          (Tuple [@(0)] [@(0)])]) | []}
bind 184 GHC.List.zip : {VV : func(2 , [[@(0)];
                                        [@(1)];
                                        [(Tuple @(0) @(1))]]) | []}
bind 185 Basics.erase_env : {VV : func(0 , [Basics.Env;
                                            Basics.FEnv]) | []}
bind 186 GHC.List.span : {VV : func(1 , [func(0 , [@(0); bool]);
                                         [@(0)];
                                         (Tuple [@(0)] [@(0)])]) | []}
bind 187 Basics.kind_for_tv : {VV : func(0 , [int;
                                              Basics.Env;
                                              Basics.Kind]) | []}
bind 188 SystemFWellFormedness.simpleWFFTFV : {VV : func(0 , [Basics.FEnv;
                                                              int;
                                                              Basics.Kind;
                                                              SystemFWellFormedness.WFFT]) | []}
bind 189 WellFormedness.isWFVar3 : {VV : func(0 , [WellFormedness.WFType;
                                                   bool]) | []}
bind 190 Basics.fenvsize : {VV : func(0 , [Basics.FEnv; int]) | []}
bind 191 SystemFTyping.isFTVar : {VV : func(0 , [SystemFTyping.HasFType;
                                                 bool]) | []}
bind 192 SystemFTyping.inType : {VV : func(0 , [Basics.Prim;
                                                Basics.Type]) | []}
bind 193 GHC.Num.$45$ : {VV : func(1 , [@(0); @(0); @(0)]) | []}
bind 194 Basics.lem_trivial_nobv : {VV : func(0 , [Basics.Expr;
                                                   Tuple]) | []}
bind 195 Basics.tsubFTV : {VV : func(0 , [int;
                                          Basics.Type;
                                          Basics.Type;
                                          Basics.Type]) | []}
bind 196 Basics.lem_value_pred : {VV : func(0 , [Basics.Expr;
                                                 Tuple]) | []}
bind 197 GHC.List.cycle : {VV : func(1 , [[@(0)]; [@(0)]]) | []}
bind 198 Basics.lem_erase_freeTV : {VV : func(0 , [Basics.Type;
                                                   Tuple]) | []}
bind 199 GHC.List.splitAt : {VV : func(1 , [int;
                                            [@(0)];
                                            (Tuple [@(0)] [@(0)])]) | []}
bind 200 Basics.binds : {VV : func(0 , [Basics.Env;
                                        (Set_Set int)]) | []}
bind 201 SystemFWellFormedness.isWFFT : {VV : func(0 , [Basics.FEnv;
                                                        Basics.FType;
                                                        Basics.Kind;
                                                        bool]) | []}
bind 202 WellFormedness.isWFFunc : {VV : func(0 , [WellFormedness.WFType;
                                                   bool]) | []}
bind 203 Basics.fresh_varF : {VV : func(0 , [Basics.FEnv;
                                             int]) | []}
bind 204 Data.Foldable.null : {VV : func(2 , [(@(1) @(0));
                                              bool]) | []}
bind 205 SystemFTyping.isFTAbs : {VV : func(0 , [SystemFTyping.HasFType;
                                                 bool]) | []}
bind 206 SystemFTyping.ty' : {VV : func(0 , [Basics.Prim;
                                             Basics.Type]) | []}
bind 207 GHC.Classes.min : {VV : func(1 , [@(0); @(0); @(0)]) | []}
bind 208 Basics.isBTV : {VV : func(0 , [Basics.Basic; bool]) | []}
bind 209 Basics.tchgFTV : {VV : func(0 , [int;
                                          int;
                                          Basics.Type;
                                          Basics.Type]) | []}
bind 210 Basics.isConjunction : {VV : func(0 , [Basics.Expr;
                                                bool]) | []}
bind 211 GHC.List.drop : {VV : func(1 , [int;
                                         [@(0)];
                                         [@(0)]]) | []}
bind 212 Basics.lem_erase_freeBV : {VV : func(0 , [Basics.Type;
                                                   Tuple]) | []}
bind 213 GHC.List.tail : {VV : func(1 , [[@(0)]; [@(0)]]) | []}
bind 214 GHC.Base.$43$$43$ : {VV : func(1 , [[@(0)];
                                             [@(0)];
                                             [@(0)]]) | []}
bind 215 Basics.v_in_env : {VV : func(0 , [int;
                                           Basics.Env;
                                           bool]) | []}
bind 216 GHC.Types.I# : {VV : func(0 , [int; int]) | []}
bind 217 SystemFWellFormedness.makeWFFT : {VV : func(0 , [Basics.FEnv;
                                                          Basics.FType;
                                                          Basics.Kind;
                                                          SystemFWellFormedness.WFFT]) | []}
bind 218 WellFormedness.isWFExis : {VV : func(0 , [WellFormedness.WFType;
                                                   bool]) | []}
bind 219 Basics.fresh_var_excludingF : {VV : func(0 , [Basics.FEnv;
                                                       int;
                                                       int]) | []}
bind 220 SystemFTyping.isFTApp : {VV : func(0 , [SystemFTyping.HasFType;
                                                 bool]) | []}
bind 221 SystemFTyping.noDefnsBaseAppT : {VV : func(0 , [Basics.Expr;
                                                         bool]) | []}
bind 222 Basics.ksize : {VV : func(0 , [Basics.Kind; int]) | []}
bind 223 Basics.tsubBV : {VV : func(0 , [int;
                                         Basics.Expr;
                                         Basics.Type;
                                         Basics.Type]) | []}
bind 224 Basics.freeBV : {VV : func(0 , [Basics.Expr;
                                         (Set_Set int)]) | []}
bind 225 GHC.Types.$58$ : {VV : func(1 , [@(0);
                                          [@(0)];
                                          [@(0)]]) | []}
bind 226 GHC.Maybe.Nothing : {VV : func(1 , [(GHC.Maybe.Maybe @(0))]) | []}
bind 227 GHC.Maybe.Just : {VV : func(1 , [@(0);
                                          (GHC.Maybe.Maybe @(0))]) | []}
bind 228 GHC.Types.$91$$93$ : {VV : func(1 , [[@(0)]]) | []}
bind 229 GHC.Tuple.$40$$44$$41$ : {VV : func(2 , [@(0);
                                                  @(1);
                                                  (Tuple @(0) @(1))]) | []}
bind 230 GHC.Tuple.$40$$44$$44$$41$ : {VV : func(3 , [@(0);
                                                      @(1);
                                                      @(2);
                                                      (Tuple @(0) @(1) @(2))]) | []}
bind 231 Basics.And : {VV##1398 : Basics.Prim | [((is$Basics.Eql VV##1398) <=> false);
                                                 ((is$Basics.Eqn VV##1398) <=> false);
                                                 ((is$Basics.Eq VV##1398) <=> false);
                                                 ((is$Basics.Leqn VV##1398) <=> false);
                                                 ((is$Basics.Leq VV##1398) <=> false);
                                                 ((is$Basics.Eqv VV##1398) <=> false);
                                                 ((is$Basics.Not VV##1398) <=> false);
                                                 ((is$Basics.Or VV##1398) <=> false);
                                                 ((is$Basics.And VV##1398) <=> true);
                                                 ((is$Basics.Eql VV##1398) <=> false);
                                                 ((is$Basics.Eqn VV##1398) <=> false);
                                                 ((is$Basics.Eq VV##1398) <=> false);
                                                 ((is$Basics.Leqn VV##1398) <=> false);
                                                 ((is$Basics.Leq VV##1398) <=> false);
                                                 ((is$Basics.Eqv VV##1398) <=> false);
                                                 ((is$Basics.Not VV##1398) <=> false);
                                                 ((is$Basics.Or VV##1398) <=> false);
                                                 ((is$Basics.And VV##1398) <=> true);
                                                 (VV##1398 = Basics.And)]}
bind 232 Basics.Or : {VV##1399 : Basics.Prim | [((is$Basics.Eql VV##1399) <=> false);
                                                ((is$Basics.Eqn VV##1399) <=> false);
                                                ((is$Basics.Eq VV##1399) <=> false);
                                                ((is$Basics.Leqn VV##1399) <=> false);
                                                ((is$Basics.Leq VV##1399) <=> false);
                                                ((is$Basics.Eqv VV##1399) <=> false);
                                                ((is$Basics.Not VV##1399) <=> false);
                                                ((is$Basics.Or VV##1399) <=> true);
                                                ((is$Basics.And VV##1399) <=> false);
                                                ((is$Basics.Eql VV##1399) <=> false);
                                                ((is$Basics.Eqn VV##1399) <=> false);
                                                ((is$Basics.Eq VV##1399) <=> false);
                                                ((is$Basics.Leqn VV##1399) <=> false);
                                                ((is$Basics.Leq VV##1399) <=> false);
                                                ((is$Basics.Eqv VV##1399) <=> false);
                                                ((is$Basics.Not VV##1399) <=> false);
                                                ((is$Basics.Or VV##1399) <=> true);
                                                ((is$Basics.And VV##1399) <=> false);
                                                (VV##1399 = Basics.Or)]}
bind 233 Basics.Not : {VV##1400 : Basics.Prim | [((is$Basics.Eql VV##1400) <=> false);
                                                 ((is$Basics.Eqn VV##1400) <=> false);
                                                 ((is$Basics.Eq VV##1400) <=> false);
                                                 ((is$Basics.Leqn VV##1400) <=> false);
                                                 ((is$Basics.Leq VV##1400) <=> false);
                                                 ((is$Basics.Eqv VV##1400) <=> false);
                                                 ((is$Basics.Not VV##1400) <=> true);
                                                 ((is$Basics.Or VV##1400) <=> false);
                                                 ((is$Basics.And VV##1400) <=> false);
                                                 ((is$Basics.Eql VV##1400) <=> false);
                                                 ((is$Basics.Eqn VV##1400) <=> false);
                                                 ((is$Basics.Eq VV##1400) <=> false);
                                                 ((is$Basics.Leqn VV##1400) <=> false);
                                                 ((is$Basics.Leq VV##1400) <=> false);
                                                 ((is$Basics.Eqv VV##1400) <=> false);
                                                 ((is$Basics.Not VV##1400) <=> true);
                                                 ((is$Basics.Or VV##1400) <=> false);
                                                 ((is$Basics.And VV##1400) <=> false);
                                                 (VV##1400 = Basics.Not)]}
bind 234 Basics.Eqv : {VV##1401 : Basics.Prim | [((is$Basics.Eql VV##1401) <=> false);
                                                 ((is$Basics.Eqn VV##1401) <=> false);
                                                 ((is$Basics.Eq VV##1401) <=> false);
                                                 ((is$Basics.Leqn VV##1401) <=> false);
                                                 ((is$Basics.Leq VV##1401) <=> false);
                                                 ((is$Basics.Eqv VV##1401) <=> true);
                                                 ((is$Basics.Not VV##1401) <=> false);
                                                 ((is$Basics.Or VV##1401) <=> false);
                                                 ((is$Basics.And VV##1401) <=> false);
                                                 ((is$Basics.Eql VV##1401) <=> false);
                                                 ((is$Basics.Eqn VV##1401) <=> false);
                                                 ((is$Basics.Eq VV##1401) <=> false);
                                                 ((is$Basics.Leqn VV##1401) <=> false);
                                                 ((is$Basics.Leq VV##1401) <=> false);
                                                 ((is$Basics.Eqv VV##1401) <=> true);
                                                 ((is$Basics.Not VV##1401) <=> false);
                                                 ((is$Basics.Or VV##1401) <=> false);
                                                 ((is$Basics.And VV##1401) <=> false);
                                                 (VV##1401 = Basics.Eqv)]}
bind 235 Basics.Leq : {VV##1402 : Basics.Prim | [((is$Basics.Eql VV##1402) <=> false);
                                                 ((is$Basics.Eqn VV##1402) <=> false);
                                                 ((is$Basics.Eq VV##1402) <=> false);
                                                 ((is$Basics.Leqn VV##1402) <=> false);
                                                 ((is$Basics.Leq VV##1402) <=> true);
                                                 ((is$Basics.Eqv VV##1402) <=> false);
                                                 ((is$Basics.Not VV##1402) <=> false);
                                                 ((is$Basics.Or VV##1402) <=> false);
                                                 ((is$Basics.And VV##1402) <=> false);
                                                 ((is$Basics.Eql VV##1402) <=> false);
                                                 ((is$Basics.Eqn VV##1402) <=> false);
                                                 ((is$Basics.Eq VV##1402) <=> false);
                                                 ((is$Basics.Leqn VV##1402) <=> false);
                                                 ((is$Basics.Leq VV##1402) <=> true);
                                                 ((is$Basics.Eqv VV##1402) <=> false);
                                                 ((is$Basics.Not VV##1402) <=> false);
                                                 ((is$Basics.Or VV##1402) <=> false);
                                                 ((is$Basics.And VV##1402) <=> false);
                                                 (VV##1402 = Basics.Leq)]}
bind 236 Basics.Leqn : {VV : func(0 , [int; Basics.Prim]) | []}
bind 237 Basics.Eq : {VV##1404 : Basics.Prim | [((is$Basics.Eql VV##1404) <=> false);
                                                ((is$Basics.Eqn VV##1404) <=> false);
                                                ((is$Basics.Eq VV##1404) <=> true);
                                                ((is$Basics.Leqn VV##1404) <=> false);
                                                ((is$Basics.Leq VV##1404) <=> false);
                                                ((is$Basics.Eqv VV##1404) <=> false);
                                                ((is$Basics.Not VV##1404) <=> false);
                                                ((is$Basics.Or VV##1404) <=> false);
                                                ((is$Basics.And VV##1404) <=> false);
                                                ((is$Basics.Eql VV##1404) <=> false);
                                                ((is$Basics.Eqn VV##1404) <=> false);
                                                ((is$Basics.Eq VV##1404) <=> true);
                                                ((is$Basics.Leqn VV##1404) <=> false);
                                                ((is$Basics.Leq VV##1404) <=> false);
                                                ((is$Basics.Eqv VV##1404) <=> false);
                                                ((is$Basics.Not VV##1404) <=> false);
                                                ((is$Basics.Or VV##1404) <=> false);
                                                ((is$Basics.And VV##1404) <=> false);
                                                (VV##1404 = Basics.Eq)]}
bind 238 Basics.Eqn : {VV : func(0 , [int; Basics.Prim]) | []}
bind 239 Basics.Eql : {VV##1406 : Basics.Prim | [((is$Basics.Eql VV##1406) <=> true);
                                                 ((is$Basics.Eqn VV##1406) <=> false);
                                                 ((is$Basics.Eq VV##1406) <=> false);
                                                 ((is$Basics.Leqn VV##1406) <=> false);
                                                 ((is$Basics.Leq VV##1406) <=> false);
                                                 ((is$Basics.Eqv VV##1406) <=> false);
                                                 ((is$Basics.Not VV##1406) <=> false);
                                                 ((is$Basics.Or VV##1406) <=> false);
                                                 ((is$Basics.And VV##1406) <=> false);
                                                 ((is$Basics.Eql VV##1406) <=> true);
                                                 ((is$Basics.Eqn VV##1406) <=> false);
                                                 ((is$Basics.Eq VV##1406) <=> false);
                                                 ((is$Basics.Leqn VV##1406) <=> false);
                                                 ((is$Basics.Leq VV##1406) <=> false);
                                                 ((is$Basics.Eqv VV##1406) <=> false);
                                                 ((is$Basics.Not VV##1406) <=> false);
                                                 ((is$Basics.Or VV##1406) <=> false);
                                                 ((is$Basics.And VV##1406) <=> false);
                                                 (VV##1406 = Basics.Eql)]}
bind 240 Basics.TBool : {VV##1407 : Basics.Basic | [((is$Basics.FTV VV##1407) <=> false);
                                                    ((is$Basics.BTV VV##1407) <=> false);
                                                    ((is$Basics.TInt VV##1407) <=> false);
                                                    ((is$Basics.TBool VV##1407) <=> true);
                                                    (VV##1407 = Basics.TBool)]}
bind 241 Basics.TInt : {VV##1408 : Basics.Basic | [((is$Basics.FTV VV##1408) <=> false);
                                                   ((is$Basics.BTV VV##1408) <=> false);
                                                   ((is$Basics.TInt VV##1408) <=> true);
                                                   ((is$Basics.TBool VV##1408) <=> false);
                                                   (VV##1408 = Basics.TInt)]}
bind 242 Basics.BTV : {VV : func(0 , [int; Basics.Basic]) | []}
bind 243 Basics.FTV : {VV : func(0 , [int; Basics.Basic]) | []}
bind 244 Basics.Base : {VV##1411 : Basics.Kind | [((is$Basics.Star VV##1411) <=> false);
                                                  ((is$Basics.Base VV##1411) <=> true);
                                                  ((is$Basics.Star VV##1411) <=> false);
                                                  ((is$Basics.Base VV##1411) <=> true);
                                                  ((is$Basics.Star VV##1411) <=> false);
                                                  ((is$Basics.Base VV##1411) <=> true);
                                                  ((Basics.ksize VV##1411) = 0);
                                                  (VV##1411 = Basics.Base)]}
bind 245 Basics.Star : {VV##1412 : Basics.Kind | [((is$Basics.Star VV##1412) <=> true);
                                                  ((is$Basics.Base VV##1412) <=> false);
                                                  ((is$Basics.Star VV##1412) <=> true);
                                                  ((is$Basics.Base VV##1412) <=> false);
                                                  ((is$Basics.Star VV##1412) <=> true);
                                                  ((is$Basics.Base VV##1412) <=> false);
                                                  ((Basics.ksize VV##1412) = 1);
                                                  (VV##1412 = Basics.Star)]}
bind 246 Basics.Z : {VV##1413 : Basics.RVname | [((is$Basics.Z VV##1413) <=> true);
                                                 (VV##1413 = Basics.Z)]}
bind 247 Basics.TRefn : {VV : func(0 , [Basics.Basic;
                                        Basics.RVname;
                                        Basics.Expr;
                                        Basics.Type]) | []}
bind 248 Basics.TFunc : {VV : func(0 , [int;
                                        Basics.Type;
                                        Basics.Type;
                                        Basics.Type]) | []}
bind 249 Basics.TExists : {VV : func(0 , [int;
                                          Basics.Type;
                                          Basics.Type;
                                          Basics.Type]) | []}
bind 250 Basics.TPoly : {VV : func(0 , [int;
                                        Basics.Kind;
                                        Basics.Type;
                                        Basics.Type]) | []}
bind 251 Basics.Bc : {VV : func(0 , [bool; Basics.Expr]) | []}
bind 252 Basics.Ic : {VV : func(0 , [int; Basics.Expr]) | []}
bind 253 Basics.Prim : {VV : func(0 , [Basics.Prim;
                                       Basics.Expr]) | []}
bind 254 Basics.BV : {VV : func(0 , [int; Basics.Expr]) | []}
bind 255 Basics.FV : {VV : func(0 , [int; Basics.Expr]) | []}
bind 256 Basics.Lambda : {VV : func(0 , [int;
                                         Basics.Expr;
                                         Basics.Expr]) | []}
bind 257 Basics.App : {VV : func(0 , [Basics.Expr;
                                      Basics.Expr;
                                      Basics.Expr]) | []}
bind 258 Basics.LambdaT : {VV : func(0 , [int;
                                          Basics.Kind;
                                          Basics.Expr;
                                          Basics.Expr]) | []}
bind 259 Basics.AppT : {VV : func(0 , [Basics.Expr;
                                       Basics.Type;
                                       Basics.Expr]) | []}
bind 260 Basics.Let : {VV : func(0 , [int;
                                      Basics.Expr;
                                      Basics.Expr;
                                      Basics.Expr]) | []}
bind 261 Basics.Annot : {VV : func(0 , [Basics.Expr;
                                        Basics.Type;
                                        Basics.Expr]) | []}
bind 262 Basics.Conj : {VV : func(0 , [Basics.Expr;
                                       Basics.Expr;
                                       Basics.Expr]) | []}
bind 263 Basics.Empty : {VV##1430 : Basics.Env | [((is$Basics.Empty VV##1430) <=> true);
                                                  ((is$Basics.ConsT VV##1430) <=> false);
                                                  ((is$Basics.Cons VV##1430) <=> false);
                                                  ((is$Basics.ConsT VV##1430) <=> false);
                                                  ((is$Basics.Cons VV##1430) <=> false);
                                                  ((is$Basics.Empty VV##1430) <=> true);
                                                  ((Basics.envsize VV##1430) = 0);
                                                  (VV##1430 = Basics.Empty)]}
bind 264 Basics.Cons : {VV : func(0 , [int;
                                       Basics.Type;
                                       Basics.Env;
                                       Basics.Env]) | []}
bind 265 Basics.ConsT : {VV : func(0 , [int;
                                        Basics.Kind;
                                        Basics.Env;
                                        Basics.Env]) | []}
bind 266 Basics.FTBasic : {VV : func(0 , [Basics.Basic;
                                          Basics.FType]) | []}
bind 267 Basics.FTFunc : {VV : func(0 , [Basics.FType;
                                         Basics.FType;
                                         Basics.FType]) | []}
bind 268 Basics.FTPoly : {VV : func(0 , [int;
                                         Basics.Kind;
                                         Basics.FType;
                                         Basics.FType]) | []}
bind 269 Basics.FEmpty : {VV##1436 : Basics.FEnv | [((is$Basics.FEmpty VV##1436) <=> true);
                                                    ((is$Basics.FConsT VV##1436) <=> false);
                                                    ((is$Basics.FCons VV##1436) <=> false);
                                                    ((is$Basics.FConsT VV##1436) <=> false);
                                                    ((is$Basics.FCons VV##1436) <=> false);
                                                    ((is$Basics.FEmpty VV##1436) <=> true);
                                                    ((is$Basics.FConsT VV##1436) <=> false);
                                                    ((is$Basics.FCons VV##1436) <=> false);
                                                    ((is$Basics.FEmpty VV##1436) <=> true);
                                                    ((Basics.fenvsize VV##1436) = 0);
                                                    (VV##1436 = Basics.FEmpty)]}
bind 270 Basics.FCons : {VV : func(0 , [int;
                                        Basics.FType;
                                        Basics.FEnv;
                                        Basics.FEnv]) | []}
bind 271 Basics.FConsT : {VV : func(0 , [int;
                                         Basics.Kind;
                                         Basics.FEnv;
                                         Basics.FEnv]) | []}
bind 272 SystemFWellFormedness.WFFT : {VV : func(0 , [Basics.FEnv;
                                                      Basics.FType;
                                                      Basics.Kind;
                                                      SystemFWellFormedness.WFFTP]) | []}
bind 273 SystemFWellFormedness.WFFTBasic : {VV : func(0 , [Basics.FEnv;
                                                           Basics.Basic;
                                                           SystemFWellFormedness.WFFT]) | []}
bind 274 SystemFWellFormedness.WFFTFV1 : {VV : func(0 , [Basics.FEnv;
                                                         int;
                                                         Basics.Kind;
                                                         SystemFWellFormedness.WFFT]) | []}
bind 275 SystemFWellFormedness.WFFTFV2 : {VV : func(0 , [Basics.FEnv;
                                                         int;
                                                         Basics.Kind;
                                                         SystemFWellFormedness.WFFT;
                                                         int;
                                                         Basics.FType;
                                                         SystemFWellFormedness.WFFT]) | []}
bind 276 SystemFWellFormedness.WFFTFV3 : {VV : func(0 , [Basics.FEnv;
                                                         int;
                                                         Basics.Kind;
                                                         SystemFWellFormedness.WFFT;
                                                         int;
                                                         Basics.Kind;
                                                         SystemFWellFormedness.WFFT]) | []}
bind 277 SystemFWellFormedness.WFFTFunc : {VV : func(0 , [Basics.FEnv;
                                                          Basics.FType;
                                                          Basics.Kind;
                                                          SystemFWellFormedness.WFFT;
                                                          Basics.FType;
                                                          Basics.Kind;
                                                          SystemFWellFormedness.WFFT;
                                                          SystemFWellFormedness.WFFT]) | []}
bind 278 SystemFWellFormedness.WFFTPoly : {VV : func(0 , [Basics.FEnv;
                                                          int;
                                                          Basics.Kind;
                                                          Basics.FType;
                                                          Basics.Kind;
                                                          int;
                                                          SystemFWellFormedness.WFFT;
                                                          SystemFWellFormedness.WFFT]) | []}
bind 279 SystemFWellFormedness.WFFTKind : {VV : func(0 , [Basics.FEnv;
                                                          Basics.FType;
                                                          SystemFWellFormedness.WFFT;
                                                          SystemFWellFormedness.WFFT]) | []}
bind 280 SystemFWellFormedness.WFFE : {VV : func(0 , [Basics.FEnv;
                                                      SystemFWellFormedness.WFFEP]) | []}
bind 281 SystemFWellFormedness.WFFEmpty : {VV##1448 : SystemFWellFormedness.WFFE | [((is$SystemFWellFormedness.WFFEmpty VV##1448) <=> true);
                                                                                    ((is$SystemFWellFormedness.WFFBindT VV##1448) <=> false);
                                                                                    ((is$SystemFWellFormedness.WFFBind VV##1448) <=> false);
                                                                                    ((propOf VV##1448) = (SystemFWellFormedness.WFFE Basics.FEmpty));
                                                                                    (VV##1448 = SystemFWellFormedness.WFFEmpty)]}
bind 282 SystemFWellFormedness.WFFBind : {VV : func(0 , [Basics.FEnv;
                                                         SystemFWellFormedness.WFFE;
                                                         int;
                                                         Basics.FType;
                                                         Basics.Kind;
                                                         SystemFWellFormedness.WFFT;
                                                         SystemFWellFormedness.WFFE]) | []}
bind 283 SystemFWellFormedness.WFFBindT : {VV : func(0 , [Basics.FEnv;
                                                          SystemFWellFormedness.WFFE;
                                                          int;
                                                          Basics.Kind;
                                                          SystemFWellFormedness.WFFE]) | []}
bind 284 SystemFTyping.HasFType : {VV : func(0 , [Basics.FEnv;
                                                  Basics.Expr;
                                                  Basics.FType;
                                                  SystemFTyping.HasFTypeP]) | []}
bind 285 SystemFTyping.FTBC : {VV : func(0 , [Basics.FEnv;
                                              bool;
                                              SystemFTyping.HasFType]) | []}
bind 286 SystemFTyping.FTIC : {VV : func(0 , [Basics.FEnv;
                                              int;
                                              SystemFTyping.HasFType]) | []}
bind 287 SystemFTyping.FTVar1 : {VV : func(0 , [Basics.FEnv;
                                                int;
                                                Basics.FType;
                                                SystemFTyping.HasFType]) | []}
bind 288 SystemFTyping.FTVar2 : {VV : func(0 , [Basics.FEnv;
                                                int;
                                                Basics.FType;
                                                SystemFTyping.HasFType;
                                                int;
                                                Basics.FType;
                                                SystemFTyping.HasFType]) | []}
bind 289 SystemFTyping.FTVar3 : {VV : func(0 , [Basics.FEnv;
                                                int;
                                                Basics.FType;
                                                SystemFTyping.HasFType;
                                                int;
                                                Basics.Kind;
                                                SystemFTyping.HasFType]) | []}
bind 290 SystemFTyping.FTPrm : {VV : func(0 , [Basics.FEnv;
                                               Basics.Prim;
                                               SystemFTyping.HasFType]) | []}
bind 291 SystemFTyping.FTAbs : {VV : func(0 , [Basics.FEnv;
                                               int;
                                               Basics.FType;
                                               Basics.Kind;
                                               SystemFWellFormedness.WFFT;
                                               Basics.Expr;
                                               Basics.FType;
                                               int;
                                               SystemFTyping.HasFType;
                                               SystemFTyping.HasFType]) | []}
bind 292 SystemFTyping.FTApp : {VV : func(0 , [Basics.FEnv;
                                               Basics.Expr;
                                               Basics.FType;
                                               Basics.FType;
                                               SystemFTyping.HasFType;
                                               Basics.Expr;
                                               SystemFTyping.HasFType;
                                               SystemFTyping.HasFType]) | []}
bind 293 SystemFTyping.FTAbsT : {VV : func(0 , [Basics.FEnv;
                                                int;
                                                Basics.Kind;
                                                Basics.Expr;
                                                Basics.FType;
                                                int;
                                                SystemFTyping.HasFType;
                                                SystemFTyping.HasFType]) | []}
bind 294 SystemFTyping.FTAppT : {VV : func(0 , [Basics.FEnv;
                                                Basics.Expr;
                                                int;
                                                Basics.Kind;
                                                Basics.FType;
                                                SystemFTyping.HasFType;
                                                Basics.Type;
                                                SystemFWellFormedness.WFFT;
                                                SystemFTyping.HasFType]) | []}
bind 295 SystemFTyping.FTLet : {VV : func(0 , [Basics.FEnv;
                                               Basics.Expr;
                                               Basics.FType;
                                               SystemFTyping.HasFType;
                                               int;
                                               Basics.Expr;
                                               Basics.FType;
                                               int;
                                               SystemFTyping.HasFType;
                                               SystemFTyping.HasFType]) | []}
bind 296 SystemFTyping.FTAnn : {VV : func(0 , [Basics.FEnv;
                                               Basics.Expr;
                                               Basics.FType;
                                               Basics.Type;
                                               SystemFTyping.HasFType;
                                               SystemFTyping.HasFType]) | []}
bind 297 SystemFTyping.FTConj : {VV : func(0 , [Basics.FEnv;
                                                Basics.Expr;
                                                SystemFTyping.HasFType;
                                                Basics.Expr;
                                                SystemFTyping.HasFType;
                                                SystemFTyping.HasFType]) | []}
bind 298 WellFormedness.WFType : {VV : func(0 , [Basics.Env;
                                                 Basics.Type;
                                                 Basics.Kind;
                                                 WellFormedness.WFTypeP]) | []}
bind 299 WellFormedness.WFBase : {VV : func(0 , [Basics.Env;
                                                 Basics.Basic;
                                                 Basics.Expr;
                                                 WellFormedness.WFType]) | []}
bind 300 WellFormedness.WFRefn : {VV : func(0 , [Basics.Env;
                                                 Basics.RVname;
                                                 Basics.Basic;
                                                 Basics.Expr;
                                                 WellFormedness.WFType;
                                                 Basics.Expr;
                                                 int;
                                                 SystemFTyping.HasFType;
                                                 WellFormedness.WFType]) | []}
bind 301 WellFormedness.WFVar1 : {VV : func(0 , [Basics.Env;
                                                 int;
                                                 Basics.Expr;
                                                 Basics.Kind;
                                                 WellFormedness.WFType]) | []}
bind 302 WellFormedness.WFVar2 : {VV : func(0 , [Basics.Env;
                                                 int;
                                                 Basics.Expr;
                                                 Basics.Kind;
                                                 WellFormedness.WFType;
                                                 int;
                                                 Basics.Type;
                                                 WellFormedness.WFType]) | []}
bind 303 WellFormedness.WFVar3 : {VV : func(0 , [Basics.Env;
                                                 int;
                                                 Basics.Expr;
                                                 Basics.Kind;
                                                 WellFormedness.WFType;
                                                 int;
                                                 Basics.Kind;
                                                 WellFormedness.WFType]) | []}
bind 304 WellFormedness.WFFunc : {VV : func(0 , [Basics.Env;
                                                 int;
                                                 Basics.Type;
                                                 Basics.Kind;
                                                 WellFormedness.WFType;
                                                 Basics.Type;
                                                 Basics.Kind;
                                                 int;
                                                 WellFormedness.WFType;
                                                 WellFormedness.WFType]) | []}
bind 305 WellFormedness.WFExis : {VV : func(0 , [Basics.Env;
                                                 int;
                                                 Basics.Type;
                                                 Basics.Kind;
                                                 WellFormedness.WFType;
                                                 Basics.Type;
                                                 Basics.Kind;
                                                 int;
                                                 WellFormedness.WFType;
                                                 WellFormedness.WFType]) | []}
bind 306 WellFormedness.WFPoly : {VV : func(0 , [Basics.Env;
                                                 int;
                                                 Basics.Kind;
                                                 Basics.Type;
                                                 Basics.Kind;
                                                 int;
                                                 WellFormedness.WFType;
                                                 WellFormedness.WFType]) | []}
bind 307 WellFormedness.WFKind : {VV : func(0 , [Basics.Env;
                                                 Basics.Type;
                                                 WellFormedness.WFType;
                                                 WellFormedness.WFType]) | []}
bind 308 WellFormedness.WFEnv : {VV : func(0 , [Basics.Env;
                                                WellFormedness.WFEnvP]) | []}
bind 309 WellFormedness.WFEEmpty : {VV##1476 : WellFormedness.WFEnv | [((is$WellFormedness.WFEEmpty VV##1476) <=> true);
                                                                       ((is$WellFormedness.WFEBindT VV##1476) <=> false);
                                                                       ((is$WellFormedness.WFEBind VV##1476) <=> false);
                                                                       ((propOf VV##1476) = (WellFormedness.WFEnv Basics.Empty));
                                                                       (VV##1476 = WellFormedness.WFEEmpty)]}
bind 310 WellFormedness.WFEBind : {VV : func(0 , [Basics.Env;
                                                  WellFormedness.WFEnv;
                                                  int;
                                                  Basics.Type;
                                                  Basics.Kind;
                                                  WellFormedness.WFType;
                                                  WellFormedness.WFEnv]) | []}
bind 311 WellFormedness.WFEBindT : {VV : func(0 , [Basics.Env;
                                                   WellFormedness.WFEnv;
                                                   int;
                                                   Basics.Kind;
                                                   WellFormedness.WFEnv]) | []}
bind 312 GHC.Real.C$58$Fractional : {VV : func(1 , [func(0 , [@(0);
                                                              @(0);
                                                              @(0)]);
                                                    func(0 , [@(0); @(0)]);
                                                    func(0 , [(GHC.Real.Ratio int); @(0)]);
                                                    (GHC.Real.Fractional @(0))]) | []}
bind 313 GHC.Real.C$58$Integral : {VV : func(1 , [func(0 , [@(0);
                                                            @(0);
                                                            @(0)]);
                                                  func(0 , [@(0); @(0); @(0)]);
                                                  func(0 , [@(0); @(0); @(0)]);
                                                  func(0 , [@(0); @(0); @(0)]);
                                                  func(0 , [@(0); @(0); (Tuple @(0) @(0))]);
                                                  func(0 , [@(0); @(0); (Tuple @(0) @(0))]);
                                                  func(0 , [@(0); int]);
                                                  (GHC.Real.Integral @(0))]) | []}
bind 314 ds_da7o : {VV##1482 : Tuple | []}
bind 315 PrimitivesWFTypeEql.lem_wf_ty_eql : {VV : func(0 , [Tuple;
                                                             Tuple]) | []}
bind 316 lq_anf$##7205759403792832502##da7s : {lq_tmp$x##1487 : Str | [(lq_tmp$x##1487 = lit$main)]}
bind 317 lq_anf$##7205759403792832503##da7t : {lq_tmp$x##1490 : GHC.Types.TrName | [(lq_tmp$x##1490 = (GHC.Types.TrNameS lq_anf$##7205759403792832502##da7s));
                                                                                    (lq_tmp$x##1490 = (GHC.Types.TrNameS lq_anf$##7205759403792832502##da7s));
                                                                                    (lq_tmp$x##1490 = (GHC.Types.TrNameS lq_anf$##7205759403792832502##da7s))]}
bind 318 lq_anf$##7205759403792832504##da7u : {lq_tmp$x##1495 : Str | [(lq_tmp$x##1495 = lit$PrimitivesWFTypeEql)]}
bind 319 lq_anf$##7205759403792832505##da7v : {lq_tmp$x##1498 : GHC.Types.TrName | [(lq_tmp$x##1498 = (GHC.Types.TrNameS lq_anf$##7205759403792832504##da7u));
                                                                                    (lq_tmp$x##1498 = (GHC.Types.TrNameS lq_anf$##7205759403792832504##da7u));
                                                                                    (lq_tmp$x##1498 = (GHC.Types.TrNameS lq_anf$##7205759403792832504##da7u))]}
bind 320 PrimitivesWFTypeEql.$trModule : {VV##1485 : GHC.Types.Module | [$k_##1486]}
bind 321 ds_da7o : {VV##1525 : Tuple | []}






constraint:
  env [0;
       1;
       2;
       3;
       4;
       5;
       6;
       7;
       8;
       9;
       10;
       11;
       12;
       13;
       14;
       15;
       16;
       17;
       18;
       19;
       20;
       21;
       22;
       23;
       24;
       25;
       26;
       27;
       28;
       29;
       30;
       31;
       32;
       33;
       34;
       35;
       36;
       37;
       38;
       39;
       40;
       41;
       42;
       43;
       44;
       45;
       46;
       47;
       48;
       49;
       50;
       51;
       52;
       53;
       54;
       55;
       56;
       57;
       58;
       59;
       60;
       61;
       62;
       63;
       64;
       65;
       66;
       67;
       68;
       69;
       70;
       71;
       72;
       73;
       74;
       75;
       76;
       77;
       78;
       79;
       80;
       81;
       82;
       83;
       84;
       85;
       86;
       87;
       88;
       89;
       90;
       91;
       92;
       93;
       94;
       95;
       96;
       97;
       98;
       99;
       100;
       101;
       102;
       103;
       104;
       105;
       106;
       107;
       108;
       109;
       110;
       111;
       112;
       113;
       114;
       115;
       116;
       117;
       118;
       119;
       120;
       121;
       122;
       123;
       124;
       125;
       126;
       127;
       128;
       129;
       130;
       131;
       132;
       133;
       134;
       135;
       136;
       137;
       138;
       139;
       140;
       141;
       142;
       143;
       144;
       145;
       146;
       147;
       148;
       149;
       150;
       151;
       152;
       153;
       154;
       155;
       156;
       157;
       158;
       159;
       160;
       161;
       162;
       163;
       164;
       165;
       166;
       167;
       168;
       169;
       170;
       171;
       172;
       173;
       174;
       175;
       176;
       177;
       178;
       179;
       180;
       181;
       182;
       183;
       184;
       185;
       186;
       187;
       188;
       189;
       190;
       191;
       192;
       193;
       194;
       195;
       196;
       197;
       198;
       199;
       200;
       201;
       202;
       203;
       204;
       205;
       206;
       207;
       208;
       209;
       210;
       211;
       212;
       213;
       214;
       215;
       216;
       217;
       218;
       219;
       220;
       221;
       222;
       223;
       224;
       225;
       226;
       227;
       228;
       229;
       230;
       231;
       232;
       233;
       234;
       235;
       236;
       237;
       238;
       239;
       240;
       241;
       242;
       243;
       244;
       245;
       246;
       247;
       248;
       249;
       250;
       251;
       252;
       253;
       254;
       255;
       256;
       257;
       258;
       259;
       260;
       261;
       262;
       263;
       264;
       265;
       266;
       267;
       268;
       269;
       270;
       271;
       272;
       273;
       274;
       275;
       276;
       277;
       278;
       279;
       280;
       281;
       282;
       283;
       284;
       285;
       286;
       287;
       288;
       289;
       290;
       291;
       292;
       293;
       294;
       295;
       296;
       297;
       298;
       299;
       300;
       301;
       302;
       303;
       304;
       305;
       306;
       307;
       308;
       309;
       310;
       311;
       312;
       313;
       315;
       316;
       317;
       318;
       319]
  lhs {VV##F##1 : GHC.Types.Module | [(VV##F##1 = (GHC.Types.Module lq_anf$##7205759403792832503##da7t lq_anf$##7205759403792832505##da7v));
                                      (VV##F##1 = (GHC.Types.Module lq_anf$##7205759403792832503##da7t lq_anf$##7205759403792832505##da7v))]}
  rhs {VV##F##1 : GHC.Types.Module | [$k_##1486[VV##1485:=VV##F##1][VV##1513:=VV##F##1][VV##F:=VV##F##1]]}
  id 1 tag [1]
  // META constraint id 1 : ()


constraint:
  env [0;
       1;
       2;
       3;
       4;
       5;
       6;
       7;
       8;
       9;
       10;
       11;
       12;
       13;
       14;
       15;
       16;
       17;
       18;
       19;
       20;
       21;
       22;
       23;
       24;
       25;
       26;
       27;
       28;
       29;
       30;
       31;
       32;
       33;
       34;
       35;
       36;
       37;
       38;
       39;
       40;
       41;
       42;
       43;
       44;
       45;
       46;
       47;
       48;
       49;
       50;
       51;
       52;
       53;
       54;
       55;
       56;
       57;
       58;
       59;
       60;
       61;
       62;
       63;
       64;
       65;
       66;
       67;
       68;
       69;
       70;
       71;
       72;
       73;
       74;
       75;
       76;
       77;
       78;
       79;
       80;
       81;
       82;
       83;
       84;
       85;
       86;
       87;
       88;
       89;
       90;
       91;
       92;
       93;
       94;
       95;
       96;
       97;
       98;
       99;
       100;
       101;
       102;
       103;
       104;
       105;
       106;
       107;
       108;
       109;
       110;
       111;
       112;
       113;
       114;
       115;
       116;
       117;
       118;
       119;
       120;
       121;
       122;
       123;
       124;
       125;
       126;
       127;
       128;
       129;
       130;
       131;
       132;
       133;
       134;
       135;
       136;
       137;
       138;
       139;
       140;
       141;
       142;
       143;
       144;
       145;
       146;
       147;
       148;
       149;
       150;
       151;
       152;
       153;
       154;
       155;
       156;
       157;
       158;
       159;
       160;
       161;
       162;
       163;
       164;
       165;
       166;
       167;
       168;
       169;
       170;
       171;
       172;
       173;
       174;
       175;
       176;
       177;
       178;
       179;
       180;
       181;
       182;
       183;
       184;
       185;
       186;
       187;
       188;
       189;
       190;
       191;
       192;
       193;
       194;
       195;
       196;
       197;
       198;
       199;
       200;
       201;
       202;
       203;
       204;
       205;
       206;
       207;
       208;
       209;
       210;
       211;
       212;
       213;
       214;
       215;
       216;
       217;
       218;
       219;
       220;
       221;
       222;
       223;
       224;
       225;
       226;
       227;
       228;
       229;
       230;
       231;
       232;
       233;
       234;
       235;
       236;
       237;
       238;
       239;
       240;
       241;
       242;
       243;
       244;
       245;
       246;
       247;
       248;
       249;
       250;
       251;
       252;
       253;
       254;
       255;
       256;
       257;
       258;
       259;
       260;
       261;
       262;
       263;
       264;
       265;
       266;
       267;
       268;
       269;
       270;
       271;
       272;
       273;
       274;
       275;
       276;
       277;
       278;
       279;
       280;
       281;
       282;
       283;
       284;
       285;
       286;
       287;
       288;
       289;
       290;
       291;
       292;
       293;
       294;
       295;
       296;
       297;
       298;
       299;
       300;
       301;
       302;
       303;
       304;
       305;
       306;
       307;
       308;
       309;
       310;
       311;
       312;
       313;
       314]
  lhs {VV##F##2 : Tuple | [(VV##F##2 = GHC.Tuple.$40$$41$);
                           (VV##F##2 = GHC.Tuple.$40$$41$)]}
  rhs {VV##F##2 : Tuple | [(WellFormedness.isWellFormed Basics.Empty (SystemFTyping.ty Basics.Eql) Basics.Star)]}
  id 2 tag [2]
  // META constraint id 2 : ()




wf:
  env [0;
       1;
       2;
       3;
       4;
       5;
       6;
       7;
       8;
       9;
       10;
       11;
       12;
       13;
       14;
       15;
       16;
       17;
       18;
       19;
       20;
       21;
       22;
       23;
       24;
       25;
       26;
       27;
       28;
       29;
       30;
       31;
       32;
       33;
       34;
       35;
       36;
       37;
       38;
       39;
       40;
       41;
       42;
       43;
       44;
       45;
       46;
       47;
       48;
       49;
       50;
       51;
       52;
       53;
       54;
       55;
       56;
       57;
       58;
       59;
       60;
       61;
       62;
       63;
       64;
       65;
       66;
       67;
       68;
       69;
       70;
       71;
       72;
       73;
       74;
       75;
       76;
       77;
       78;
       79;
       80;
       81;
       82;
       83;
       84;
       85;
       86;
       87;
       88;
       89;
       90;
       91;
       92;
       93;
       94;
       95;
       96;
       97;
       98;
       99;
       100;
       101;
       102;
       103;
       104;
       105;
       106;
       107;
       108;
       109;
       110;
       111;
       112;
       113;
       114;
       115;
       116;
       117;
       118;
       119;
       120;
       121;
       122;
       123;
       124;
       125;
       126;
       127;
       128;
       129;
       130;
       131;
       132;
       133;
       134;
       135;
       136;
       137;
       138;
       139;
       140;
       141;
       142;
       143;
       144;
       145;
       146;
       147;
       148;
       149;
       150;
       151;
       152;
       153;
       154;
       155;
       156;
       157;
       158;
       159;
       160;
       161;
       162;
       163;
       164;
       165;
       166;
       167;
       168;
       169;
       170;
       171;
       172;
       173;
       174;
       175;
       176;
       177;
       178;
       179;
       180;
       181;
       182;
       183;
       184;
       185;
       186;
       187;
       188;
       189;
       190;
       191;
       192;
       193;
       194;
       195;
       196;
       197;
       198;
       199;
       200;
       201;
       202;
       203;
       204;
       205;
       206;
       207;
       208;
       209;
       210;
       211;
       212;
       213;
       214;
       215;
       216;
       217;
       218;
       219;
       220;
       221;
       222;
       223;
       224;
       225;
       226;
       227;
       228;
       229;
       230;
       231;
       232;
       233;
       234;
       235;
       236;
       237;
       238;
       239;
       240;
       241;
       242;
       243;
       244;
       245;
       246;
       247;
       248;
       249;
       250;
       251;
       252;
       253;
       254;
       255;
       256;
       257;
       258;
       259;
       260;
       261;
       262;
       263;
       264;
       265;
       266;
       267;
       268;
       269;
       270;
       271;
       272;
       273;
       274;
       275;
       276;
       277;
       278;
       279;
       280;
       281;
       282;
       283;
       284;
       285;
       286;
       287;
       288;
       289;
       290;
       291;
       292;
       293;
       294;
       295;
       296;
       297;
       298;
       299;
       300;
       301;
       302;
       303;
       304;
       305;
       306;
       307;
       308;
       309;
       310;
       311;
       312;
       313;
       315]
  reft {VV##1485 : GHC.Types.Module | [$k_##1486]}
  // META wf : ()







